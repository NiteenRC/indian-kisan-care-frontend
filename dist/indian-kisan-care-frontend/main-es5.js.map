{"version":3,"sources":["webpack:///src/app/validators/category.validator.ts","webpack:///src/app/register/register.component.ts","webpack:///src/app/register/register.component.html","webpack:///src/app/_model/purchaseOrder.ts","webpack:///src/app/ui_modules/table/sales-table.component.ts","webpack:///src/app/ui_modules/table/sales-table.component.html","webpack:///src/app/menu/navigation-bar/navigation-bar.component.ts","webpack:///src/app/menu/navigation-bar/navigation-bar.component.html","webpack:///src/app/_services/token-storage.service.js","webpack:///src/app/products/create-product/create-product.component.ts","webpack:///src/app/products/create-product/create-product.component.html","webpack:///src/app/_services/auth.service.ts","webpack:///src/app/purchase-order/purchase-order.component.ts","webpack:///src/app/purchase-order/purchase-order.component.html","webpack:///src/app/_services/supplier.service.ts","webpack:///src/app/_model/sales-order.ts","webpack:///src/app/home/home.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/app/_services/category.service.ts","webpack:///src/app/locations/location-list/location-list.component.ts","webpack:///src/app/locations/location-list/location-list.component.html","webpack:///src/environments/environment.ts","webpack:///src/app/balance-sheet/supplier-balance-sheet/update-supplier-balance-sheet/supplier-update-balance-sheet.component.ts","webpack:///src/app/balance-sheet/supplier-balance-sheet/update-supplier-balance-sheet/supplier-update-balance-sheet.component.html","webpack:///src/app/_services/location.service.ts","webpack:///src/app/products/product-list/product-list.component.ts","webpack:///src/app/products/product-list/product-list.component.html","webpack:///src/app/_services/token-storage.service.ts","webpack:///src/app/reports/sales-report/sales-report.component.ts","webpack:///src/app/reports/sales-report/sales-report.component.html","webpack:///src/app/menu/action-bar-item/action-bar-item.component.ts","webpack:///src/app/menu/action-bar-item/action-bar-item.component.html","webpack:///src/app/suppliers/create-supplier/create-supplier.component.ts","webpack:///src/app/suppliers/create-supplier/create-supplier.component.html","webpack:///src/app/_model/company.ts","webpack:///src/app/ui_modules/table/table.component.ts","webpack:///src/app/ui_modules/table/table.component.html","webpack:///src/app/balance-sheet/supplier-balance-sheet/list-supplier-balance-sheet/supplier-balance-sheet.component.ts","webpack:///src/app/balance-sheet/supplier-balance-sheet/list-supplier-balance-sheet/supplier-balance-sheet.component.html","webpack:///src/app/_services/purchase-order.service.ts","webpack:///src/app/companies/company-list/company-list.component.ts","webpack:///src/app/companies/company-list/company-list.component.html","webpack:///src/app/_services/sales-order.service.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/menu/mobile-menu/mobile-menu.component.ts","webpack:///src/app/menu/mobile-menu/mobile-menu.component.html","webpack:///src/app/_services/customer.service.ts","webpack:///src/app/pages/dashboard/dashboard.component.ts","webpack:///src/app/pages/dashboard/dashboard.component.html","webpack:///src/app/categories/create-category/create-category.component.ts","webpack:///src/app/categories/create-category/create-category.component.html","webpack:///src/app/balance-sheet/customer-balance-sheet/update-customer-balance-sheet/customer-update-balance-sheet.component.ts","webpack:///src/app/balance-sheet/customer-balance-sheet/update-customer-balance-sheet/customer-update-balance-sheet.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/categories/category-list/category-list.component.ts","webpack:///src/app/categories/category-list/category-list.component.html","webpack:///src/app/sales-order/sales-order.component.ts","webpack:///src/app/sales-order/sales-order.component.html","webpack:///src/app/_model/category.ts","webpack:///src/app/_model/http-client-helper.ts","webpack:///src/app/reports/profit-summary/profit-summary.component.ts","webpack:///src/app/reports/profit-summary/profit-summary.component.html","webpack:///src/app/pages/notfound/notfound.component.ts","webpack:///src/app/pages/notfound/notfound.component.html","webpack:///src/app/locations/create-location/create-location.component.ts","webpack:///src/app/locations/create-location/create-location.component.html","webpack:///src/app/reports/stock-book/stock-book.component.ts","webpack:///src/app/reports/stock-book/stock-book.component.html","webpack:///src/app/pages/dashboard-categories/dashboard-categories.component.ts","webpack:///src/app/pages/dashboard-categories/dashboard-categories.component.html","webpack:///src/app/_services/company.service.ts","webpack:///src/app/companies/create-company/create-company.component.ts","webpack:///src/app/companies/create-company/create-company.component.html","webpack:///src/app/menu/action-bar/action-bar.component.ts","webpack:///src/app/menu/action-bar/action-bar.component.html","webpack:///src/app/utils/numToWords.js","webpack:///src/app/customers/customers-list/customers-list.component.ts","webpack:///src/app/customers/customers-list/customers-list.component.html","webpack:///src/app/suppliers/supplier-list/supplier-list.component.ts","webpack:///src/app/suppliers/supplier-list/supplier-list.component.html","webpack:///src/app/reports/purchase-report/purchase-report.component.ts","webpack:///src/app/reports/purchase-report/purchase-report.component.html","webpack:///src/app/_services/product.service.ts","webpack:///src/app/auth.guard.ts","webpack:///src/app/balance-sheet/customer-balance-sheet/list-customer-balance-sheet/balance-sheet.component.ts","webpack:///src/app/balance-sheet/customer-balance-sheet/list-customer-balance-sheet/balance-sheet.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/material.module.ts","webpack:///src/app/customers/create-customer/create-customer.component.ts","webpack:///src/app/customers/create-customer/create-customer.component.html","webpack:///src/app/_model/location.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["autocompleteStringValidator","validOptions","control","option","find","categoryName","value","RegisterComponent","authService","form","isSuccessful","isSignUpFailed","errorMessage","register","subscribe","data","console","log","err","error","message","selector","templateUrl","styleUrls","PurchaseOrder","SalesTableComponent","tokenStorageService","totalPrice","totalTaxAmount","totalQty","amountInWords","user","JSON","stringify","window","salesOrder","invoiceData","sessionStorage","getItem","parse","setItem","response","document","title","_calculateTotals","getUser","print","salesOrderDetail","forEach","amount","price","qtyOrdered","taxAmount","product","gst","Math","round","printPDF","NavigationBarComponent","auth","router","logout","navigateByUrl","TOKEN_KEY","USER_KEY","TokenStorageService","clear","token","removeItem","ɵfac","TokenStorageService_Factory","t","ɵprov","factory","providedIn","type","args","CreateProductComponent","location","productService","categoryService","dialogRef","myControl","options","listOfCategories","productForm","required","productName","pattern","min","hsnNo","currentPrice","qty","profit","locationForm","cityName","productUpdateData","controls","setValue","category","valid","close","fetchData","id","updateProduct","addProduct","_findCategory","undefined","createProduct","res","successMsg","closeModal","errorMsg","createCategory","selectedCategoryName","s","getCategoryList","get","setValidators","_valueChangesListner","filterValue","toLowerCase","supplierList","filter","indexOf","filteredOptions","valueChanges","pipe","_filter","onSubmit","AUTH_API","baseURL","httpOptions","headers","AuthService","http","credentials","post","username","password","email","localStorage","PurchaseOrderComponent","_fb","supplierService","purchaseOrderService","route","displayedColumns","previousBalance","totalAmount","suppliers","products","_createForm","purchaserOrderForm","index","purchaseOrderDetailArr","length","removeAt","purchaseOrderDetailData","selectedProduct","_findProduct","_addProduct","selectedSupplier","supplier","_findSupplier","_supplierBalanceData","getSupplierList","x","supplierName","startsWith","push","getProductsList","amountPaid","getCurrentBalance","isPrintReq","alert","purchaseOrder","saveSupplier","currentBalance","purchaseOrderDetail","vehicleNo","dueDate","getTime","billDate","getTotalBalance","status","confirm","createPurchaseOrder","_printPdf","gstIn","phoneNumber","supplierID","getPurchaseOrderBalaceBySupplier","url","origin","myWindow","open","group","max","isProductAdded","element","newRow","_initRow","filteredSuppliers","_filterSupplier","filteredProducts","_filterProduct","productList","Number","motorVehicleNo","Date","array","refreshAfterSave","save","SupplierService","baseUrl","put","responseType","opts","params","SalesOrder","HomeComponent","customerService","salesOrderService","reload","productsCount","getCustomerList","customersCount","suppliersCount","getPurchaseOrderList","purchaseOrdersCount","getSalesOrderList","salesOrdersCount","getAllCustomerSalesOrderBalance","totalCustomerBalance","getAllSupplierPurchaseOrderBalace","totalSupplierBalance","CategoryService","LocationListComponent","dialog","locationService","getLocationList","event","target","dataSource","trim","width","disableClose","afterClosed","result","updateLocationModal","paginator","deleteLocation","applyFilter","openDialog","environment","production","SupplierUpdateBalanceSheetComponent","payAmount","updateSupplierBalance","updatePurchaseOrder","LocationService","Location","ProductListComponent","companyService","getProductList","productId","deleteProduct","SalesReportComponent","productColumns","range","start","end","dateRange","searchData","salesReports","_setData","searchText","reset","filteredData","startTime","endTime","salesReport","dueDateTime","customer","customerName","clearDate","ActionBarItemComponent","shadow","CreateSupplierComponent","supplierUpdateData","supplierForm","companyName","company","getCompanyList","getlocationList","updateSupplier","createSupplier","citiesList","companies","Company","TableComponent","SupplierBalanceSheetComponent","getAllSupplierPurchaseOrderBalanceSheet","sort","a","b","updateBalance","PurchaseOrderService","invoice","CompanyListComponent","updateComapny","deleteCompany","SalesOrderService","customerID","AppComponent","isLoggedIn","showAdminBoard","showModeratorBoard","MobileMenuComponent","CustomerService","DashboardComponent","isVisible","urlPath","getCurrentPage","path","split","e","CreateCategoryComponent","categoryUpdateData","categoryForm","categoryDesc","updateCategory","saveCategory","UpdateBalanceSheetComponent","updateCustomerBalance","updateSalesOrder","AppModule","dateAdapter","setLocale","declarations","imports","providers","bootstrap","CategoryListComponent","deleteCategory","SalesOrderComponent","customers","salesOrderForm","salesOrderDetailArr","salesOrderDetailData","selectedCustomer","_findCustomer","_customerBalanceData","isStockAvail","getCustomerObj","createSalesOrder","getSalesOrderBalaceByCustomer","customerList","filteredCustomers","_filterCustomer","Category","HttpClientHelper","ProfitSummaryComponent","displayedColumnsProduct","getSalesOrderByProduct","getBarChartReport","monthlyBarChart","getSalesOrderByProductWise","_setDataProductWise","dataSourceProduct","NotfoundComponent","CreateLocationComponent","locationUpdateData","updateLocation","saveLocation","createLocation","StockBookComponent","getStockBook","DashboardCategoriesComponent","CompanyService","CreateCompanyComponent","companyUpdateData","companyForm","updateCompany","saveCompany","createCompany","ActionBarComponent","_transformer","node","level","expandable","children","name","treeControl","treeFlattener","dataSource_Order","dataSourceReports","dataSourceBalance","dataSourceSummary","hasChild","_","expanded","TREE_DATA","Order_DATA","REPORTS","BALANCESHEET","SUMMARY","navigate","item","_redirectToPage","changeDetection","OnPush","numberInWords","num","toString","n","substr","match","str","CustomersListComponent","updateCustomer","deleteCustomer","SupplierListComponent","deleteSupplier","PurchaseReportComponent","purchaseReports","purchaseReport","ProductService","AuthGuard","state","BalanceSheetComponent","getAllCustomerSalesOrderBalanceSheet","routes","redirectTo","pathMatch","component","canActivate","AppRoutingModule","forRoot","useHash","exports","LoginComponent","tokenStorage","roles","getToken","login","saveToken","accessToken","saveUser","DemoMaterialModule","CreateCustomerComponent","customerUpdateData","customerForm","saveCustomer","createCustomer","bootstrapModule","webpackEmptyAsyncContext","req","Promise","resolve","then","Error","code","keys","module"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { Category } from './../_model/category';\nimport { AbstractControl, ValidatorFn } from '@angular/forms';\n\nexport function autocompleteStringValidator(validOptions: Array<Category>): ValidatorFn {\n  return (control: AbstractControl): { [key: string]: any } | null => {\n    const option = validOptions.find(option => option?.categoryName === control.value);\n    \n    if (option) {\n      return null  /* valid option selected */\n    }\n    return { 'invalidAutocompleteString': { value: control.value } }\n  }\n}","import {Component, OnInit} from '@angular/core';\nimport {AuthService} from '../_services/auth.service';\n\n@Component({\n    selector: 'app-register',\n    templateUrl: './register.component.html',\n    styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n    form: any = {};\n    isSuccessful = false;\n    isSignUpFailed = false;\n    errorMessage = '';\n\n    constructor(private authService: AuthService) {\n    }\n\n    ngOnInit() {\n    }\n\n    onSubmit() {\n        this.authService.register(this.form).subscribe(\n            data => {\n                console.log(data);\n                this.isSuccessful = true;\n                this.isSignUpFailed = false;\n            },\n            err => {\n                this.errorMessage = err.error.message;\n                this.isSignUpFailed = true;\n            }\n        );\n    }\n}\n","<div class=\"col-md-12\">\n    <div class=\"card card-container\">\n        <img\n                class=\"profile-img-card\"\n                id=\"profile-img\"\n                src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n        />\n        <form\n                #f=\"ngForm\"\n                (ngSubmit)=\"f.form.valid && onSubmit()\"\n                *ngIf=\"!isSuccessful\"\n                name=\"form\"\n                novalidate\n        >\n            <div class=\"form-group\">\n                <label for=\"username\">Username</label>\n                <input\n                        #username=\"ngModel\"\n                        [(ngModel)]=\"form.username\"\n                        class=\"form-control\"\n                        maxlength=\"20\"\n                        minlength=\"3\"\n                        name=\"username\"\n                        required\n                        type=\"text\"\n                />\n                <div *ngIf=\"f.submitted && username.invalid\" class=\"alert-danger\">\n                    <div *ngIf=\"username.errors.required\">Username is required</div>\n                    <div *ngIf=\"username.errors.minlength\">\n                        Username must be at least 3 characters\n                    </div>\n                    <div *ngIf=\"username.errors.maxlength\">\n                        Username must be at most 20 characters\n                    </div>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"email\">Email</label>\n                <input\n                        #email=\"ngModel\"\n                        [(ngModel)]=\"form.email\"\n                        class=\"form-control\"\n                        email\n                        name=\"email\"\n                        required\n                        type=\"email\"\n                />\n                <div *ngIf=\"f.submitted && email.invalid\" class=\"alert-danger\">\n                    <div *ngIf=\"email.errors.required\">Email is required</div>\n                    <div *ngIf=\"email.errors.email\">\n                        Email must be a valid email address\n                    </div>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"password\">Password</label>\n                <input\n                        #password=\"ngModel\"\n                        [(ngModel)]=\"form.password\"\n                        class=\"form-control\"\n                        minlength=\"6\"\n                        name=\"password\"\n                        required\n                        type=\"password\"\n                />\n                <div *ngIf=\"f.submitted && password.invalid\" class=\"alert-danger\">\n                    <div *ngIf=\"password.errors.required\">Password is required</div>\n                    <div *ngIf=\"password.errors.minlength\">\n                        Password must be at least 6 characters\n                    </div>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <button class=\"btn btn-primary btn-block\">Sign Up</button>\n            </div>\n\n            <div *ngIf=\"f.submitted && isSignUpFailed\" class=\"alert alert-warning\">\n                Signup failed!<br/>{{ errorMessage }}\n            </div>\n        </form>\n\n        <div *ngIf=\"isSuccessful\" class=\"alert alert-success\">\n            Your registration is successful!\n        </div>\n    </div>\n</div>\n","import {PurchaseOrderDetail} from './purchaseOrderDetail';\nimport {Supplier} from './supplier';\n\nexport class PurchaseOrder {\n    status: string;\n    supplier: Supplier;\n    totalQty: number;\n    totalPrice: number;\n    amountPaid: number;\n    currentBalance: number;\n    previousBalance: number;\n    purchaseOrderDetail: Array<PurchaseOrderDetail>;\n    vehicleNo: string;\n    dueDate: string;\n    billDate: string;\n}\n","import { Component, OnInit } from '@angular/core';\nimport { TokenStorageService } from 'src/app/_services/token-storage.service.js';\nimport { numberInWords } from '../../utils/numToWords.js';\n@Component({\n  selector: 'app-table',\n  templateUrl: './sales-table.component.html',\n  styleUrls: ['./sales-table.component.css']\n})\nexport class SalesTableComponent implements OnInit {\n  response: any;\n  totalPrice: number = 0;\n  totalTaxAmount: number = 0;\n  totalQty: number = 0;\n  amountInWords: string = '';\n  user: any = null;\n\n  constructor(private tokenStorageService: TokenStorageService) { }\n\n  ngOnInit(): void {\n    console.log('this.response', JSON.stringify((window['response'])));\n    let salesOrder = window['response'];\n    if (!salesOrder) {\n      const invoiceData = sessionStorage.getItem('invoiceData');\n      if (invoiceData) {\n        salesOrder = JSON.parse(invoiceData);\n      }\n    } else {\n      sessionStorage.setItem('invoiceData', JSON.stringify(salesOrder));\n    }\n\n    this.response = salesOrder;\n    document.title = 'Tax Invoice';\n    this._calculateTotals();\n    this.user = this.tokenStorageService.getUser();\n  }\n\n  printPDF() {\n    window.print();\n  }\n\n  private _calculateTotals() {\n    let totalPrice = 0;\n    let totalTaxAmount = 0;\n    let totalQty = 0;\n\n    console.log('response?.salesOrderDetail', this.response?.salesOrderDetail);\n    this.response?.salesOrderDetail?.forEach((salesOrder) => {\n      const amount = salesOrder?.price * salesOrder?.qtyOrdered;\n      const taxAmount = amount * salesOrder?.product?.gst / 100;\n      totalPrice += amount;\n      totalTaxAmount += taxAmount;\n      totalQty +=salesOrder?.qtyOrdered;\n    });\n\n    this.totalQty = Math.round(totalQty);\n    this.totalPrice = Math.round(totalPrice);\n    this.totalTaxAmount = Math.round(totalTaxAmount);\n\n    this.amountInWords = numberInWords(this.totalPrice);\n  }\n}\n","<div class=\"page-content container\">\n    <div class=\"page-header text-blue-d2\">\n        <div class=\"container px-0\">\n            <div class=\"row pt-4\">\n                <div class=\"col-12 col-lg-10 offset-lg-1\">\n                    <div class=\"d-flex\">\n                        <img src=\"/assets/images/indian-kisan-care.png\" alt=\"image\" class=\"logo\">\n                        <div style=\"text-align: center; width: 55%\">\n                            <div>\n                                <span class=\"text-sm text-grey-m2 align-middle font-weight-bold\">\n                                    <h2> {{user?.brandName}} </h2>\n                                </span>\n                            </div>\n                            <div>\n                                <span class=\"text-sm text-grey-m2 align-middle\">GST: {{user?.gstNo}} | PAN:\n                                    {{user?.panNo}}\n                                </span>\n                            </div>\n                            <div>\n                                <span class=\"text-sm text-grey-m2 align-middle\">P: {{user?.phoneNumber}} | E:\n                                    {{user?.email}}</span>\n                            </div>\n                        </div>\n                    </div>\n                    <hr class=\"row brc-default-l1 mx-n1 mb-4\" />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">\n                            <div class=\"my-2\">\n                                <span class=\"text-sm text-grey-m2 align-middle font-weight-bold my-2\">\n                                    Customer Name:\n                                </span>\n                                <span class=\"text-600 text-110 text-blue align-middle\">\n                                    {{response?.customer?.customerName}}\n                                </span>\n                            </div>\n                            <div class=\"my-2\">\n                                <span class=\"text-sm text-grey-m2 align-middle font-weight-bold my-2\">\n                                    GSTIN/UIN:\n                                </span>\n                                <span class=\"text-600 text-110 text-blue align-middle\">\n                                    {{response?.customer?.gstIn}}\n                                </span>\n                            </div>\n\n                            <div class=\"my-2\">\n                                <span class=\"text-sm text-grey-m2 align-middle font-weight-bold my-2\">\n                                    Mobile Number:\n                                </span>\n                                <span class=\"text-600 text-110 text-blue align-middle\">\n                                    {{response?.customer?.phoneNumber}}\n                                </span>\n                            </div>\n                            <div class=\"my-2\">\n                                <span class=\"text-sm text-grey-m2 align-middle font-weight-bold my-2\">\n                                    Address:\n                                </span>\n                                <span class=\"text-600 text-110 text-blue align-middle\">\n                                    {{response?.customer?.location?.cityName}}\n                                </span>\n                            </div>\n                        </div>\n                        <!-- /.col -->\n                        <div class=\"text-95 col-sm-6 align-self-start d-sm-flex justify-content-end\">\n                            <hr class=\"d-sm-none\" />\n                            <div class=\"text-grey-m2\">\n                                <div class=\"my-2\">\n                                    <span class=\"text-600 text-90 font-weight-bold\">Bill Date:</span>\n                                    {{(response?.billDate | date: 'dd/MM/yyyy hh:mm a')}}\n                                </div>\n\n                                <div class=\"my-2\">\n                                    <span class=\"text-600 text-90 font-weight-bold\">Due Date:</span>\n                                    {{response?.dueDate | date: 'dd/MM/yyyy hh:mm a'}}\n                                </div>\n\n                                <div class=\"my-2\">\n                                    <span class=\"text-600 text-90 font-weight-bold\">Bill Status:</span>\n                                    <span class=\"text-600 text-90\">\n                                        {{response?.status}}\n                                    </span>\n                                </div>\n                                <div class=\"my-2\">\n                                    <span class=\"text-600 text-90 font-weight-bold\">Motor Vehicle no:</span>\n                                    <span class=\"text-600 text-90\">\n                                        {{response?.vehicleNo}}\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <hr>\n                    <!-- ----------------------------------------- -->\n                    <table class=\"table table-bordered\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">SI.<br>NO</th>\n                                <th scope=\"col\">Item & Description</th>\n                                <th scope=\"col\">HSN/SAC</th>\n                                <th scope=\"col\">Base Price</th>\n                                <th scope=\"col\">\n                                    <div style=\"text-align: center;\">CGST/SGST <br> IGST Rate</div>\n                                </th>\n                                <th scope=\"col\">Sell Price</th>\n                                <th scope=\"col\">Quantity</th>\n                                <th scope=\"col\">Tax Amount</th>\n                                <th scope=\"col\">Total Amount</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let cart of response?.salesOrderDetail; index as i;\">\n                                <td>{{i + 1}}.</td>\n                                <td>{{cart?.product?.productName}}</td>\n                                <td>{{cart?.product?.hsnNo}}</td>\n                                <td class=\"text-right pr-4\">₹{{(cart?.price - (cart?.price * (cart?.product?.gst/100))).toLocaleString('en-IN') || 0}}\n                                </td>\n                                <td>{{cart?.product?.gst}}%</td>\n                                <td class=\"text-right pr-4\">₹{{cart?.price.toLocaleString('en-IN') || 0}}</td>\n                                <td class=\"text-right pr-4\">{{cart?.qtyOrdered || 0}}</td>\n                                <td class=\"text-right pr-4\">₹{{(cart?.product?.gst * cart.price * cart.qtyOrdered / 100).toLocaleString('en-IN')}}\n                                </td>\n                                <td class=\"text-right pr-4\">₹{{(cart?.price * cart?.qtyOrdered).toLocaleString('en-IN') || 0}}</td>\n                            </tr>\n                            <tr>\n                                <th colspan=\"6\">Total</th>\n                                <th class=\"text-right pr-4\">{{totalQty.toLocaleString('en-IN')}}</th>\n                                <th class=\"text-right pr-4\">₹{{totalTaxAmount.toLocaleString('en-IN')}}</th>\n                                <th class=\"text-right pr-4\">₹{{totalPrice.toLocaleString('en-IN')}}</th>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <span class=\"text-sm text-grey-m2 align-middle\">Amount chargeable(in words):</span>\n                    <span class=\"text-lg text-grey-m2 align-middle font-weight-bold\">\n                        {{ amountInWords }}\n                    </span>\n                    <hr>\n                    <!-- ---------------- -->\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">\n                            <div>\n                                <span class=\"text-sm text-grey-m2 align-middle font-weight-bold\">Payment Mode:</span>\n                                <span class=\"text-600 text-110 text-blue align-middle\">\n                                    Cash\n                                </span>\n                            </div>\n                            <div>\n                                <span class=\"text-sm text-grey-m2 align-middle font-weight-bold\">PhonePe:</span>\n                                <span class=\"text-600 text-110 text-blue align-middle\">\n                                    NA\n                                </span>\n                            </div>\n                            <br>\n\n                            <div *ngIf=\"user.bankAccount != null\">\n                                <div>\n                                    <span\n                                        class=\"text-sm text-grey-m2 align-middle font-weight-bold\">{{user?.bankAccount?.bankName}}</span>\n                                </div>\n                                <div>\n                                    <span class=\"text-sm text-grey-m2 align-middle font-weight-bold\">A/c no:</span>\n                                    <span class=\"text-600 text-110 text-blue align-middle\">\n                                        {{user?.bankAccount?.accountNo}}\n                                    </span>\n                                </div>\n\n                                <div>\n                                    <span class=\"text-sm text-grey-m2 align-middle font-weight-bold\">Branch:</span>\n                                    <span class=\"text-600 text-110 text-blue align-middle\">\n                                        {{user?.bankAccount?.branchName}}\n                                    </span>\n                                </div>\n                                <div>\n                                    <span class=\"text-sm text-grey-m2 align-middle font-weight-bold\">IFSC code:</span>\n                                    <span class=\"text-600 text-110 text-blue align-middle\">\n                                        {{user?.bankAccount?.ifscCode}}\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                        <!-- /.col -->\n                        <div class=\"text-95 col-sm-6 align-self-start d-sm-flex justify-content-end\">\n                            <hr class=\"d-sm-none\" />\n                            <div class=\"text-grey-m2\">\n                                <div class=\"my-2\">\n                                    <span class=\"text-600 text-90 font-weight-bold\">Amount Paid: </span>\n                                    ₹{{response?.amountPaid.toLocaleString('en-IN') || 0 }}\n                                </div>\n                                <div class=\"my-2\">\n                                    <span class=\"text-600 text-90 font-weight-bold\">Current Balance: </span>\n                                    ₹{{response?.currentBalance.toLocaleString('en-IN') || 0 }}\n                                </div>\n\n                                <div class=\"my-2\">\n                                    <span class=\"text-600 text-90 font-weight-bold\">Previous Balance: </span>\n                                    <span class=\"text-600 text-90\">\n                                        ₹{{((response?.previousBalance - (response?.currentBalance)) >= 0 ? (response?.previousBalance - (response?.currentBalance)) : 0).toLocaleString('en-IN') || 0 }}\n                                    </span>\n                                </div>\n                                <div class=\"my-2\">\n                                    <span class=\"text-600 text-90 font-weight-bold\">Total Pay Balance:</span>\n                                    <span class=\"text-600 text-90\">\n                                        ₹{{(response?.previousBalance).toLocaleString('en-IN') || 0 }}\n                                    </span>\n                                </div>\n\n                                <br><br><br>\n                                <div style=\"text-align: center;\">\n                                    <div class=\"my-2\">\n                                        <span class=\"text-600 text-90 font-weight-bold\">Authorised Signatory</span>\n                                    </div>\n                                    <div class=\"my-2\">\n                                        <span class=\"text-600 text-90 font-weight-bold\">({{user?.brandName}})</span>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <!-- --------------------- -->\n                </div>\n            </div>\n\n            <div class=\"col-12 col-lg-10 offset-lg-1\">\n                <hr>\n                <div style=\"text-align: center;\">\n                    <span class=\"text-300 text-30\">This is a computer generated invoice</span>\n                </div>\n                <div style=\"text-align: center;\" class=\"print-btn\">\n                    <button (click)=\"printPDF()\">Print</button>\n                </div>\n            </div>\n        </div>\n    </div>","import {Router} from '@angular/router';\nimport {AuthService} from '../../_services/auth.service';\nimport {Component} from '@angular/core';\n\n@Component({\n    selector: 'app-navigation-bar',\n    templateUrl: './navigation-bar.component.html',\n    styleUrls: ['./navigation-bar.component.css']\n})\nexport class NavigationBarComponent {\n    constructor(private auth: AuthService, private router: Router) {\n    }\n\n    logout() {\n        this.auth.logout();\n        this.router.navigateByUrl('/login');\n    }\n}\n","<nav class=\"navbar navbar-light navbar-expand-sm bg-white shadow-sm\">\n    <div class=\"container-fluid\">\n        <span class=\"navbar-brand\"></span>\n        <div class=\"navbar-nav\">\n            <span (click)=\"logout()\" class=\"nav-item nav-link\" style=\"cursor: pointer;\">Logout</span>\n        </div>\n    </div>\n</nav>\n","import { Injectable } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nconst TOKEN_KEY = 'auth-token';\nconst USER_KEY = 'auth-user';\nexport class TokenStorageService {\n    constructor() {\n    }\n    signOut() {\n        window.sessionStorage.clear();\n    }\n    saveToken(token) {\n        window.sessionStorage.removeItem(TOKEN_KEY);\n        window.sessionStorage.setItem(TOKEN_KEY, token);\n    }\n    getToken() {\n        return sessionStorage.getItem(TOKEN_KEY);\n    }\n    saveUser(user) {\n        window.sessionStorage.removeItem(USER_KEY);\n        window.sessionStorage.setItem(USER_KEY, JSON.stringify(user));\n    }\n    getUser() {\n        return JSON.parse(sessionStorage.getItem(USER_KEY));\n    }\n}\nTokenStorageService.ɵfac = function TokenStorageService_Factory(t) { return new (t || TokenStorageService)(); };\nTokenStorageService.ɵprov = i0.ɵɵdefineInjectable({ token: TokenStorageService, factory: TokenStorageService.ɵfac, providedIn: 'root' });\n/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(TokenStorageService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return []; }, null); })();\n//# sourceMappingURL=token-storage.service.js.map","import { Category } from './../../_model/category';\nimport { Component, Inject, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport { autocompleteStringValidator } from 'src/app/validators/category.validator';\nimport { CategoryService } from 'src/app/_services/category.service';\nimport { LocationService } from 'src/app/_services/location.service';\nimport { ProductService } from 'src/app/_services/product.service';\n\n@Component({\n    selector: 'app-create-product',\n    templateUrl: './create-product.component.html',\n    styleUrls: ['./create-product.component.css']\n})\nexport class CreateProductComponent implements OnInit {\n    myControl = new FormControl();\n    options: Category[] = [];\n    filteredOptions: Observable<Category[]>;\n    listOfCategories = [];\n    productForm: FormGroup;\n    locationForm: FormGroup;\n    productUpdateData: any;\n    successMsg: any;\n    errorMsg: any;\n    citiesList: any;\n    companies: any;\n\n    constructor(private location: LocationService,\n        private productService: ProductService,\n        private categoryService: CategoryService,\n        public dialogRef: MatDialogRef<CreateProductComponent>,\n        @Inject(MAT_DIALOG_DATA) private data) {\n        this.productForm = new FormGroup({\n            categoryName: new FormControl(null, [Validators.required]),\n            productName: new FormControl(null, [Validators.required]),\n            price: new FormControl(null),\n            gst: new FormControl(null, [Validators.required, Validators.pattern('^[0-9]*$'), Validators.min(0)]),\n            hsnNo: new FormControl(null),\n            currentPrice: new FormControl(null),\n            qty: new FormControl(null),\n            profit: new FormControl(null),\n        });\n\n        this.locationForm = new FormGroup({\n            cityName: new FormControl(null, [Validators.required]),\n        });\n\n        if (data != null) {\n            this.productUpdateData = data?.data;\n            this.productForm.controls['categoryName'].setValue(this.productUpdateData.category.categoryName);\n            this.productForm.controls['productName'].setValue(this.productUpdateData.productName);\n            this.productForm.controls['price'].setValue(this.productUpdateData.price);\n            this.productForm.controls['gst'].setValue(this.productUpdateData.gst);\n            this.productForm.controls['hsnNo'].setValue(this.productUpdateData.hsnNo);\n            this.productForm.controls['currentPrice'].setValue(this.productUpdateData.currentPrice);\n            this.productForm.controls['qty'].setValue(this.productUpdateData.qty);\n            this.productForm.controls['profit'].setValue(this.productUpdateData.profit);\n        }\n    }\n\n    closeModal(): void {\n        if (this.productForm.valid || this.productForm.controls.productName.value === null) {\n            this.dialogRef.close();\n        }\n    }\n\n    ngOnInit(): void {\n        this.fetchData();\n    }\n\n    onSubmit() {\n        if (this.productForm.valid) {\n            if (this.productUpdateData?.id != null) {\n                this.updateProduct();\n            } else {\n                this.addProduct();\n            }\n        }\n    }\n\n    addProduct() {\n        const categoryName = this.productForm.controls.categoryName.value;\n        let category = this._findCategory(categoryName);\n\n        if (category == undefined) {\n            category = { 'categoryName': categoryName };\n        }\n\n        let hsnNo = this.productForm.controls.hsnNo.value;\n        if (hsnNo === null) {\n            hsnNo = 'NA';\n        }\n\n        let data = {\n            productName: this.productForm.controls.productName.value,\n            //price: this.productForm.controls.price.value,\n            gst: this.productForm.controls.gst.value,\n            hsnNo: hsnNo,\n            currentPrice: this.productForm.controls.currentPrice.value,\n            //qty: this.productForm.controls.qty.value,\n            category: category\n        };\n\n        this.productService.createProduct(data).subscribe(res => {\n            if (res != null) {\n                this.successMsg = 'Product Successfully Updated..!';\n                // this.getCategoryList();\n                this.closeModal();\n            }\n        }, error => {\n            this.errorMsg = error.error.errorMessage;\n        });\n    }\n\n    saveCategory(categoryName: string) {\n        let data = {\n            categoryName: categoryName\n        }\n        this.categoryService.createCategory(data).subscribe();\n    }\n\n    updateProduct() {\n        const selectedCategoryName = this.productForm.controls.categoryName.value;\n        const category = this._findCategory(selectedCategoryName);\n        let data = {\n            id: this.productUpdateData.id,\n            productName: this.productForm.controls.productName.value,\n            price: this.productForm.controls.price.value,\n            gst: this.productForm.controls.gst.value,\n            hsnNo: this.productForm.controls.hsnNo.value,\n            currentPrice: this.productForm.controls.currentPrice.value,\n            qty: this.productForm.controls.qty.value,\n            profit: this.productForm.controls.profit.value,\n            category,\n        };\n        this.productService.updateProduct(data).subscribe(res => {\n            if (res != null) {\n                let s = 0;\n                this.successMsg = 'Product Successfully Created..!';\n                this.closeModal();\n            }\n        }, error => {\n            this.errorMsg = error.error.errorMessage;\n        });\n\n    }\n\n    getCategoryList() {\n        this.categoryService.getCategoryList().subscribe(data => {\n            this.options = data;\n            this.productForm.get('categoryName').setValidators([autocompleteStringValidator(data), Validators.required]);\n        });\n    }\n\n    fetchData() {\n        this.categoryService.getCategoryList().subscribe(data => {\n            this.listOfCategories = data;\n            this._valueChangesListner();\n        });\n    }\n\n    private _filter(value: string): Category[] {\n        if (!value) {\n            return this.listOfCategories;\n        }\n        const filterValue = value.toLowerCase();\n        const supplierList = this.listOfCategories.filter(option => option.categoryName.toLowerCase().indexOf(filterValue) === 0)\n        return supplierList;\n    }\n\n    private _findCategory(categoryName: string) {\n        return this.listOfCategories.find(option => option?.categoryName === categoryName);\n    }\n\n    private _valueChangesListner() {\n        this.filteredOptions = this.productForm.controls['categoryName'].valueChanges.pipe(\n            startWith(''),\n            map(value => this._filter(value))\n        );\n    }\n}\n","<div class=\"product-conatiner\">\n    <div class=\"title-header\" *ngIf=\"productUpdateData?.id==null\">\n        <h4 class=\"title\">Add Product</h4>\n    </div>\n    <div class=\"title-header\" *ngIf=\"productUpdateData?.id!=null\">\n        <h4 class=\"title\">Update Product</h4>\n    </div>\n    <hr>\n    <form [formGroup]=\"productForm\" (submit)=\"onSubmit()\">\n        <div class=\"addproduct-container\">\n            <mat-form-field class=\"forms-fildes\">\n                <input formControlName=\"productName\" matInput placeholder=\"Product\" required>\n            </mat-form-field>\n            <br>\n        </div>\n\n        <div class=\"addproduct-container\">\n            <mat-form-field class=\"forms-fildes\">\n                <input formControlName=\"categoryName\" [matAutocomplete]=\"supplierAuto\" aria-label=\"Number\" matInput\n                    placeholder=\"Category\" type=\"text\">\n                <mat-autocomplete #supplierAuto=\"matAutocomplete\" autoActiveFirstOption>\n                    <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option?.categoryName\">\n                        {{option?.categoryName}}\n                    </mat-option>\n                </mat-autocomplete>\n            </mat-form-field>\n        </div>\n\n        <div class=\"addproduct-container\">\n            <mat-form-field class=\"forms-fildes\">\n                <input formControlName=\"currentPrice\" matInput placeholder=\"SALE PRICE\">\n            </mat-form-field>\n            <br>\n        </div>\n\n        <div class=\"addproduct-container\">\n            <mat-form-field class=\"forms-fildes\">\n                <input formControlName=\"hsnNo\" matInput placeholder=\"HSN/SAC\">\n            </mat-form-field>\n            <br>\n        </div>\n\n        <div class=\"addproduct-container\">\n            <mat-form-field class=\"forms-fildes\">\n                <input formControlName=\"gst\" matInput placeholder=\"GST%\" required>\n            </mat-form-field>\n            <br>\n        </div>\n\n        <div class=\"button-container\">\n            <button (click)=\"closeModal()\" aria-label=\"Close\" class=\"btn btn-warning\"\n                style=\"width: 25%;margin-left: 5px;\">Cancel\n            </button>\n            <button [disabled]=\"!productForm.valid\" class=\"btn btn-primary\" type=\"submit\"\n                style=\"width: 25%;margin-left: 5px;border-radius: 10px;\">Save\n            </button>\n        </div>\n\n        <div class=\"button-container\">\n            <h4 style=\"color: green;\">{{successMsg}}</h4>\n            <h4 style=\"color: red;\">{{errorMsg}}</h4>\n        </div>\n    </form>\n\n</div>","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {HttpClientHelper} from '../_model/http-client-helper';\n\nconst AUTH_API = HttpClientHelper.baseURL + '/auth/';\n\nconst httpOptions = {\n    headers: new HttpHeaders({'Content-Type': 'application/json'})\n};\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthService {\n\n    constructor(private http: HttpClient) {\n    }\n\n    login(credentials): Observable<any> {\n        return this.http.post(AUTH_API + 'signin', {\n            username: credentials.username,\n            password: credentials.password\n        }, httpOptions);\n    }\n\n    register(user): Observable<any> {\n        return this.http.post(AUTH_API + 'signup', {\n            username: user.username,\n            email: user.email,\n            password: user.password\n        }, httpOptions);\n    }\n\n    logout() {\n        localStorage.clear();\n    }\n}\n","import { MatTableDataSource } from '@angular/material/table';\nimport { FormArray, FormBuilder } from '@angular/forms';\nimport { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { map, startWith } from 'rxjs/operators';\n\nimport { Product } from '../_model/product';\nimport { Observable } from 'rxjs';\nimport { ProductService } from '../_services/product.service';\nimport { PurchaseOrder } from '../_model/purchaseOrder';\nimport { PurchaseOrderService } from '../_services/purchase-order.service';\nimport { Supplier } from '../_model/supplier';\nimport { SupplierService } from '../_services/supplier.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-purchase-order',\n  templateUrl: './purchase-order.component.html',\n  styleUrls: ['./purchase-order.component.css']\n})\nexport class PurchaseOrderComponent implements OnInit {\n  purchaseOrderDetailData: any;\n  displayedColumns: string[] = ['sno', 'action', 'item', 'price', 'quantity', 'totalAmount'];\n  filteredSuppliers: Observable<Supplier[]>;\n  filteredProducts: Observable<Product[]>;\n\n  suppliers: Supplier[];\n  products: Product[];\n\n  previousBalance = 0;\n  totalAmount = 0;\n\n  purchaserOrderForm: FormGroup;\n\n  constructor(\n    private _fb: FormBuilder,\n    private productService: ProductService,\n    private supplierService: SupplierService,\n    private purchaseOrderService: PurchaseOrderService, private route: Router) {\n\n    this.suppliers = [];\n    this.products = [];\n  }\n\n  ngOnInit() {\n    this.fetchData();\n    this._createForm();\n    console.log('this.purchaserOrderForm', this.purchaserOrderForm);\n  }\n\n  removeProduct(index: number) {\n    if (this.purchaseOrderDetailArr.length > 1 || index > 0) {\n      this.purchaseOrderDetailArr.removeAt(index);\n      this.purchaseOrderDetailData = new MatTableDataSource(this.purchaseOrderDetailArr.controls);\n    }\n  }\n\n  selectedProduct(selectedProduct: string) {\n    this.purchaserOrderForm.controls['productName'].setValue(null);\n    const product = this._findProduct(selectedProduct);\n    this._addProduct(product);\n  }\n\n  selectedSupplier(selectedSupplier: string) {\n    const supplier = this._findSupplier(selectedSupplier);\n    this._supplierBalanceData(supplier?.id);\n  }\n\n  fetchData() {\n    this.supplierService.getSupplierList().subscribe(data => {\n      data.forEach(x => {\n        if (x.supplierName != '' && !x.supplierName.startsWith('UNKNOWN')) {\n          this.suppliers.push(x);\n        }\n      });\n    });\n\n    this.productService.getProductsList().subscribe(data => {\n      this.products = data;\n      this._valueChangesListner();\n    });\n  }\n\n  getCurrentBalance() {\n    return this.totalAmount - this.amountPaid.value;\n  }\n\n  getTotalBalance() {\n    return this.previousBalance + this.getCurrentBalance();\n  }\n\n  save(isPrintReq: boolean) {\n\n    if (this.purchaseOrderDetailArr.value.length === 0) {\n      alert('please select products, before submitting');\n      return;\n    }\n    const supplierName = this.purchaserOrderForm.get('supplierName').value;\n    let supplier = this._findSupplier(supplierName);\n\n    const purchaseOrder: PurchaseOrder = new PurchaseOrder();\n    if (supplier === undefined) {\n      supplier = this.saveSupplier(supplierName);\n    }\n    purchaseOrder.supplier = supplier;\n    purchaseOrder.currentBalance = this.getCurrentBalance();\n    purchaseOrder.purchaseOrderDetail = this.purchaseOrderDetailArr.value;\n    purchaseOrder.totalPrice = this.totalAmount;\n    purchaseOrder.vehicleNo = this.purchaserOrderForm.get('motorVehicleNo').value;\n    purchaseOrder.amountPaid = this.purchaserOrderForm.get('amountPaid').value;\n    purchaseOrder.dueDate = this.purchaserOrderForm.get('dueDate').value?.getTime();;\n    purchaseOrder.billDate = this.purchaserOrderForm.get('billDate').value?.getTime();;\n\n    if (purchaseOrder.amountPaid < 0) {\n      alert('Amount paid should be positive');\n      return;\n    } else if (this.getTotalBalance() < 0) {\n      alert('Amount paid should be equals to balance');\n      return;\n    } else if (this.getTotalBalance() <= 0) {\n      purchaseOrder.status = 'PAID';\n    } else if (purchaseOrder.amountPaid > 0) {\n      purchaseOrder.status = 'PARTIAL';\n    } else {\n      purchaseOrder.status = 'DUE';\n    }\n\n    if (confirm(\"Are you sure to save?\")) {\n      this.purchaseOrderService\n        .createPurchaseOrder(purchaseOrder).subscribe(data => {\n          console.log(data);\n\n          if (isPrintReq) {\n            this._printPdf(data);\n          } else {\n            alert('Purchase Order Successfully created!!');\n          }\n        },\n          error => console.log(error));\n    }\n  }\n\n  saveSupplier(supplierName: string): any {\n    let data = {\n      supplierName: supplierName,\n      gstIn: 'NA',\n      phoneNumber: 'NA'\n    };\n    return data;;\n  }\n\n  refreshAfterSave() {\n    //this.route.navigate(['purchaseOrder'])\n    //this.route.navigateByUrl('/dashboard');\n    //window.location.reload();\n    this.previousBalance = 0;\n    this.totalAmount = 0;\n    this.purchaseOrderDetailData = [];\n    this._createForm();\n    this.fetchData();\n  }\n\n  private _supplierBalanceData(supplierID: any) {\n    this.purchaseOrderService.getPurchaseOrderBalaceBySupplier(supplierID).subscribe((data: number) => {\n      this.previousBalance = data;\n    }, (error: any) => console.log(error));\n  }\n\n  private _printPdf(response) {\n    //const url = `${location.origin}/praveen-traders/#table`;\n    const url = `${location.origin}/#table`;\n    const myWindow = window.open(url);\n    myWindow['response'] = response;\n  }\n\n  private _filterSupplier(value: string): Supplier[] {\n    if (!value) {\n      this.previousBalance = 0.00;\n      return this.suppliers;\n    }\n    const filterValue = value.toLowerCase();\n    const supplierList = this.suppliers.filter(option => option.supplierName.toLowerCase().indexOf(filterValue) === 0)\n    if (supplierList.length == 0) {\n      this.previousBalance = 0.00;\n    }\n    return supplierList;\n  }\n\n  private _filterProduct(value: string): Product[] {\n    if (!value) {\n      return this.products;\n    }\n    const filterValue = value.toLowerCase();\n    return this.products.filter(option => option.productName.toLowerCase().indexOf(filterValue) === 0);\n  }\n\n  private _findProduct(value: string): Product {\n    return this.products.find(option => option.productName === value);\n  }\n\n  private _findSupplier(value: string): Supplier {\n    return this.suppliers.find(option => option.supplierName === value);\n  }\n\n  private _initRow(product) {\n    return this._fb.group({\n      price: [, [Validators.required, Validators.min(1), Validators.max(100000)]],\n      qtyOrdered: [, [Validators.required, Validators.min(1), Validators.max(10000)]],\n      product: [product]\n    });\n  }\n\n  private _addProduct(product: Product) {\n    let isProductAdded = true;\n    this.purchaseOrderDetailArr.value.forEach(element => {\n      if (product.productName === element.product.productName) {\n        alert('Product is already Added!!');\n        isProductAdded = false;\n      }\n    });\n\n    if (isProductAdded) {\n      const newRow = this._initRow(product);\n      this.purchaseOrderDetailArr.push(newRow);\n      this.purchaseOrderDetailData = new MatTableDataSource(this.purchaseOrderDetailArr.controls);\n    }\n  }\n\n  private _valueChangesListner() {\n    this.filteredSuppliers = this.purchaserOrderForm.controls['supplierName'].valueChanges.pipe(\n      startWith(''),\n      map(value => this._filterSupplier(value))\n    );\n\n    this.filteredProducts = this.purchaserOrderForm.controls['productName'].valueChanges.pipe(\n      startWith(''),\n      map(value => this._filterProduct(value))\n    );\n\n    this.purchaseOrderDetailArr.valueChanges.subscribe((productList) => {\n      let totalAmount = 0;\n      productList.forEach(product => {\n        const amount = Number(product.qtyOrdered) * Number(product.price);\n        //const taxAmount = amount * (product.product?.gst || 0) / 100;\n        //totalAmount += amount + taxAmount;\n        totalAmount += amount;\n      });\n      this.totalAmount = Math.round(totalAmount);\n    });\n  }\n\n  private _createForm() {\n    this.purchaserOrderForm = this._fb.group({\n      supplierName: [''],\n      productName: [''],\n      motorVehicleNo: [''],\n      billDate: [new Date()],\n      dueDate: [],\n      purchaseOrderDetail: this._fb.array([]),\n      amountPaid: [],\n    });\n  }\n\n  get purchaseOrderDetailArr() {\n    return this.purchaserOrderForm.get('purchaseOrderDetail') as FormArray;\n  }\n\n  get amountPaid() {\n    return this.purchaserOrderForm.get('amountPaid') as FormControl;\n  }\n}\n","<form [formGroup]=\"purchaserOrderForm\">\n  <div class=\"d-flex\">\n    <div class=\"form-group col-3\">\n      <mat-form-field class=\"example-full-width\">\n        <mat-label>Supplier</mat-label>\n        <input type=\"text\" aria-label=\"Supplier\" matInput formControlName=\"supplierName\"\n          [matAutocomplete]=\"supplierAuto\">\n        <mat-autocomplete #supplierAuto=\"matAutocomplete\" autoActiveFirstOption\n          (optionSelected)=\"selectedSupplier($event.option.value)\">\n          <mat-option *ngFor=\"let supplier of filteredSuppliers | async\" [value]=\"supplier.supplierName\">\n            {{supplier.supplierName}}\n          </mat-option>\n        </mat-autocomplete>\n      </mat-form-field>\n    </div>\n\n    <div class=\"form-group col-3\">\n      <mat-form-field class=\"example-full-width\">\n        <mat-label>Product</mat-label>\n        <input type=\"text\" aria-label=\"Product\" matInput formControlName=\"productName\" [matAutocomplete]=\"productAuto\">\n        <mat-autocomplete #productAuto=\"matAutocomplete\" autoActiveFirstOption\n          (optionSelected)=\"selectedProduct($event.option.value)\">\n          <mat-option *ngFor=\"let product of filteredProducts | async\" [value]=\"product.productName\">\n            {{product.productName}}\n          </mat-option>\n        </mat-autocomplete>\n      </mat-form-field>\n    </div>\n\n    <div class=\"form-group col-2\">\n      <mat-form-field class=\"forms-fildes\">\n        <mat-label>Motor Vehicle no</mat-label>\n        <input type=\"text\" aria-label=\"Motor Vehicle no\" matInput formControlName=\"motorVehicleNo\">\n      </mat-form-field>\n    </div>\n\n    <mat-form-field class=\"form-group col-2\">\n      <mat-label>Bill date</mat-label>\n      <input matInput [matDatepicker]=\"picker1\" formControlName=\"billDate\">\n      <mat-datepicker-toggle matSuffix [for]=\"picker1\"></mat-datepicker-toggle>\n      <mat-datepicker #picker1></mat-datepicker>\n    </mat-form-field>\n\n    <mat-form-field class=\"form-group col-2\">\n      <mat-label>Due date</mat-label>\n      <input matInput [matDatepicker]=\"picker2\" formControlName=\"dueDate\">\n      <mat-datepicker-toggle matSuffix [for]=\"picker2\"></mat-datepicker-toggle>\n      <mat-datepicker #picker2></mat-datepicker>\n    </mat-form-field>\n\n  </div>\n  <div class=\"mat-elevation-z8 purchase-order-container\">\n    <table formArrayName=\"purchaseOrderDetail\" [dataSource]=\"purchaseOrderDetailData\" mat-table>\n      <ng-container matColumnDef=\"sno\">\n        <th *matHeaderCellDef mat-header-cell class=\"text-left pr-4\">S. No</th>\n        <td *matCellDef=\"let element; let i = index;\" mat-cell class=\"text-right pr-4\"> {{i + 1}}. </td>\n        <td mat-footer-cell *matFooterCellDef><strong>Total</strong></td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"action\">\n        <th *matHeaderCellDef mat-header-cell class=\"text-left pr-4\">Action</th>\n        <td *matCellDef=\"let element; let i = index;\" mat-cell>\n          <button (click)=\"removeProduct(i)\" mat-icon-button aria-label=\"Remove product\">\n            <mat-icon class=\"delete-button\">delete</mat-icon>\n          </button>\n        </td>\n        <td mat-footer-cell *matFooterCellDef></td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"item\">\n        <th *matHeaderCellDef mat-header-cell>Item & Description</th>\n        <td *matCellDef=\"let element\" mat-cell>{{element.get('product').value?.productName}}</td>\n        <td mat-footer-cell *matFooterCellDef></td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"price\">\n        <th *matHeaderCellDef mat-header-cell class=\"text-right pr-4\">Purchase Price</th>\n        <td *matCellDef=\"let element; let index = index\" mat-cell class=\"text-right pr-4\" [formGroupName]=\"index\">\n          <mat-form-field floatLabel=\"never\">\n            <input matInput type=\"number\" formControlName=\"price\" required class=\"text-right\">\n            <span matPrefix>₹&nbsp;</span>\n            <mat-error *ngIf=\"element.get('price')?.hasError('required')\">\n              Price is Required!\n            </mat-error>\n            <mat-error *ngIf=\"element.get('price')?.hasError('min')\">\n              Price more than zero\n            </mat-error>\n            <mat-error *ngIf=\"element.get('price')?.hasError('max')\">\n              Price can't be greater than 1 lakhs\n            </mat-error>\n          </mat-form-field>\n        </td>\n        <td mat-footer-cell *matFooterCellDef></td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"quantity\">\n        <th *matHeaderCellDef mat-header-cell class=\"text-right pr-4\">Quantity</th>\n        <td *matCellDef=\"let element; let index = index\" mat-cell class=\"text-right pr-4\" [formGroupName]=\"index\">\n          <mat-form-field floatLabel=\"never\" class=\"text-right\">\n            <input matInput type=\"number\" formControlName=\"qtyOrdered\" required>\n            <mat-error *ngIf=\"element.get('qtyOrdered')?.hasError('required')\">\n              Quantity is required!\n            </mat-error>\n            <mat-error *ngIf=\"element.get('qtyOrdered')?.hasError('min')\">\n              Quantity more than zero\n            </mat-error>\n            <mat-error *ngIf=\"element.get('qtyOrdered')?.hasError('max')\">\n              Quantity can't be greater than 10 thousand\n            </mat-error>\n          </mat-form-field>\n        </td>\n        <td mat-footer-cell *matFooterCellDef></td>\n      </ng-container>\n\n     <!-- <ng-container matColumnDef=\"amount\">\n        <th *matHeaderCellDef mat-header-cell class=\"text-right pr-4\">Amount</th>\n        <td *matCellDef=\"let element\" mat-cell class=\"text-right pr-4\">\n          ₹{{element.get('price')?.value * element.get('qtyOrdered')?.value | number : '1.0-2'}}</td>\n        <td mat-footer-cell *matFooterCellDef></td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"taxType\">\n        <th *matHeaderCellDef mat-header-cell class=\"text-right pr-4\">\n          CGST/SGST <br> IGST Rate\n        </th>\n        <td *matCellDef=\"let element\" mat-cell class=\"text-right pr-4\">\n          {{element.get('product')?.value.gst}}%</td>\n        <td mat-footer-cell *matFooterCellDef></td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"taxAmount\">\n        <th *matHeaderCellDef mat-header-cell class=\"text-right pr-4\">Tax Amount</th>\n        <td *matCellDef=\"let element\" mat-cell class=\"text-right pr-4\">\n          ₹{{element.get('price')?.value * element.get('qtyOrdered')?.value * element.get('product')?.value.gst/100 | number : '1.0-2'}}\n        </td>\n        <td mat-footer-cell *matFooterCellDef></td>\n      </ng-container>-->\n\n      <ng-container matColumnDef=\"totalAmount\">\n        <th *matHeaderCellDef mat-header-cell class=\"text-right pr-4\">Total Amount</th>\n        <td *matCellDef=\"let element\" mat-cell class=\"text-right pr-4\">\n          <!--₹{{element.get('price')?.value * element.get('qtyOrdered')?.value + element.get('price')?.value * element.get('qtyOrdered')?.value * element.get('product')?.value.gst/100 | number : '1.0-2'}} -->\n          ₹{{element.get('price')?.value * element.get('qtyOrdered')?.value | number : '1.0-2'}}\n        </td>\n        <td mat-footer-cell *matFooterCellDef class=\"text-right pr-4\">\n          <h4><b>{{ totalAmount | currency:'INR' }}</b></h4>\n        </td>\n      </ng-container>\n\n      <tr *matHeaderRowDef=\"displayedColumns;  sticky: true\" mat-header-row></tr>\n      <tr *matRowDef=\"let row; columns: displayedColumns;\" mat-row></tr>\n      <tr mat-footer-row *matFooterRowDef=\"displayedColumns\"></tr>\n    </table>\n\n    <div class=\"total-container\">\n      <div>\n        <label for=\"name\">Current Balance : </label>\n        <span class=\"amount-read-only\">{{ getCurrentBalance() | currency:'INR' }}</span>\n      </div>\n      <div>\n        <label for=\"name\">Previous Balance :</label>\n        <span class=\"amount-read-only\">{{previousBalance | currency:'INR' }}</span>\n      </div>\n      <div>\n        <label for=\"name\">Total Pay Balance :</label>\n        <span class=\"amount-read-only\">{{getTotalBalance() | currency:'INR'}}</span>\n      </div>\n      <div>\n        <label for=\"name\">Amount Paid : </label>\n        <input class=\"amount-edit\" type=\"number\" formControlName=\"amountPaid\" required>\n      </div>\n      <br>\n\n      <button class=\"btn btn-warning\" style=\"width: 10%;margin-left: 5px;\" (click)=\"refreshAfterSave()\">CLEAR</button>\n      <button class=\"btn btn-primary\" style=\"width: 10%;margin-left: 5px;\"\n        (click)=\"save(false)\">SAVE</button>\n      <button class=\"btn btn-success\" style=\"width: 10%;margin-left: 5px;\"\n        (click)=\"save(true)\">PRINT</button>\n    </div>\n  </div>\n</form>","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {HttpClientHelper} from '../_model/http-client-helper';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SupplierService {\n\n    private baseUrl = HttpClientHelper.baseURL + '/supplier';\n\n    constructor(private http: HttpClient) {\n    }\n\n    getSupplier(id: number): Observable<any> {\n        return this.http.get(`${this.baseUrl}/${id}`);\n    }\n\n    // tslint:disable-next-line: ban-types\n    createSupplier(supplier: Object): Observable<Object> {\n        return this.http.post(`${this.baseUrl}`, supplier);\n    }\n\n    // tslint:disable-next-line: ban-types\n    updateSupplier(value: any): Observable<Object> {\n        return this.http.put(`${this.baseUrl}`, value);\n    }\n\n    deleteSupplier(id: number): Observable<any> {\n        return this.http.delete(`${this.baseUrl}/${id}`, {responseType: 'text'});\n    }\n\n    getSupplierList(): Observable<any> {\n        return this.http.get(`${this.baseUrl}`);\n    }\n\n    createSupplierPurchase(supplier: Object): Observable<Object> {\n        return this.http.post(`${this.baseUrl}/purchase`, supplier);\n    }\n    \n    getSupplierByName(supplierName: string): any {\n        const opts = { params: {'supplierName': supplierName}};\n        return this.http.get(`${this.baseUrl}/supplierName`, opts);\n    }\n}\n","import {SalesOrderDetail} from './sales-order-detail';\nimport {Customer} from './customer';\n\nexport class SalesOrder {\n    status: string;\n    customer: Customer;\n    totalQty: number;\n    totalPrice: number;\n    amountPaid: number;\n    currentBalance: number;\n    previousBalance: number;\n    salesOrderDetail: Array<SalesOrderDetail>;\n    vehicleNo: string;\n    dueDate: string;\n    billDate: string;\n}\n","import {SalesOrderService} from './../_services/sales-order.service';\nimport {PurchaseOrderService} from './../_services/purchase-order.service';\nimport {SupplierService} from './../_services/supplier.service';\nimport {CustomerService} from './../_services/customer.service';\nimport {ProductService} from '../_services/product.service';\nimport {Component, OnInit} from '@angular/core';\n\n@Component({\n    selector: 'app-home',\n    templateUrl: './home.component.html',\n    styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n    productsCount: number;\n    customersCount: number;\n    suppliersCount: number;\n    purchaseOrdersCount: number;\n    salesOrdersCount: number;\n    totalCustomerBalance: number;\n    totalSupplierBalance: number;\n\n    constructor(private productService: ProductService, private customerService: CustomerService, private supplierService: SupplierService, private purchaseOrderService: PurchaseOrderService, private salesOrderService: SalesOrderService) {\n    }\n\n    ngOnInit(): void {\n        this.reload();\n    }\n\n    reload() {\n        this.productService.getProductsList().subscribe(data => {\n                console.log(data);\n                this.productsCount = data.length;\n            },\n            error => console.log(error));\n\n        this.customerService.getCustomerList().subscribe(data => {\n                console.log(data);\n                this.customersCount = data.length;\n            },\n            error => console.log(error));\n\n        this.supplierService.getSupplierList().subscribe(data => {\n                console.log(data);\n                this.suppliersCount = data.length;\n            },\n            error => console.log(error));\n\n        this.purchaseOrderService.getPurchaseOrderList().subscribe(data => {\n                console.log(data);\n                this.purchaseOrdersCount = data.length;\n            },\n            error => console.log(error));\n\n        this.salesOrderService.getSalesOrderList().subscribe(data => {\n                console.log(data);\n                this.salesOrdersCount = data.length;\n            },\n            error => console.log(error));\n\n        this.salesOrderService.getAllCustomerSalesOrderBalance().subscribe(data => {\n                console.log(data);\n                this.totalCustomerBalance = data;\n            },\n            error => console.log(error));\n\n        this.purchaseOrderService.getAllSupplierPurchaseOrderBalace().subscribe(data => {\n                console.log(data);\n                this.totalSupplierBalance = data;\n            },\n            error => console.log(error));\n    }\n}\n","<!-- <div class=\"form-group\">\n  <button style=\"margin-left:1cm;\" type=\"submit\" class=\"btn btn-success\">\n    <p>Total Purchase</p>\n    <p>{{purchaseOrdersCount}}</p>\n  </button>\n\n  <button style=\"margin-left:1cm;\" type=\"submit\" class=\"btn btn-success\">\n    <p>Total Sell</p>\n    <p>{{salesOrdersCount}}</p>\n  </button>\n\n  <button style=\"margin-left:1cm;\" type=\"submit\" class=\"btn btn-success\">\n    <p>Total Products</p>\n    <p>{{productsCount}}</p>\n  </button>\n\n  <button style=\"margin-left:1cm;\" type=\"submit\" class=\"btn btn-success\">\n    <p>Total Customers</p>\n    <p>{{customersCount}}</p>\n  </button>\n\n  <button style=\"margin-left:1cm;\" type=\"submit\" class=\"btn btn-success\">\n    <p>Total Supplier</p>\n    <p>{{suppliersCount}}</p>\n  </button>\n</div>\n\n<div class=\"form-group\">\n  <button style=\"margin-left:1cm;\" type=\"submit\" class=\"btn btn-success\">\n    <p>Total Customer Balance</p>\n    <p>{{totalCustomerBalance}}</p>\n  </button>\n\n  <button style=\"margin-left:1cm;\" type=\"submit\" class=\"btn btn-success\">\n    <p>Total Supplier Balance</p>\n    <p>{{totalSupplierBalance}}</p>\n  </button>\n</div> -->\n<div class=\"app-container\">\n\n\n    <div class=\"main-container flex-fill\">\n\n\n        <div class=\"container-fluid mt-2\">\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n\n                    <div class=\"row\">\n\n                        <div class=\"col-md-3\">\n                            <div class=\"card-counter primary\">\n                                <i class=\"fa fa-code-forkl\"></i>\n                                <span class=\"count-numbers\">{{purchaseOrdersCount}}</span>\n                                <span class=\"count-name\">Total Purchase</span>\n                            </div>\n                        </div>\n\n                        <div class=\"col-md-3\">\n                            <div class=\"card-counter danger\">\n                                <i class=\"fa fa-ticketa\"></i>\n                                <span class=\"count-numbers\">{{salesOrdersCount}}</span>\n                                <span class=\"count-name\">Total Sell</span>\n                            </div>\n                        </div>\n\n                        <div class=\"col-md-3\">\n                            <div class=\"card-counter success\">\n                                <i class=\"fa fa-users\"></i>\n                                <span class=\"count-numbers\">{{suppliersCount}}</span>\n                                <span class=\"count-name\">Total Supplier</span>\n                            </div>\n                        </div>\n\n                        <div class=\"col-md-3\">\n                            <div class=\"card-counter info\">\n                                <i class=\"fa fa-users1\"></i>\n                                <span class=\"count-numbers\">{{totalSupplierBalance}}</span>\n                                <span class=\"count-name\">Total Supplier Balance</span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpParams} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {HttpClientHelper} from '../_model/http-client-helper';\nimport { Category } from '../_model/category';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CategoryService {\n\n    private baseUrl = HttpClientHelper.baseURL + '/category';\n\n    constructor(private http: HttpClient) {\n    }\n\n    getCategory(id: number): Observable<any> {\n        return this.http.get(`${this.baseUrl}/${id}`);\n    }\n\n    getCategoryByName(categoryName: string): any {\n        const opts = { params: {'categoryName': categoryName}};\n        return this.http.get(`${this.baseUrl}/categoryName`, opts);\n    }\n\n    // tslint:disable-next-line: ban-types\n    createCategory(category: Object): Observable<Object> {\n        return this.http.post(`${this.baseUrl}`, category);\n    }\n\n    // tslint:disable-next-line: ban-types\n    updateCategory(value: any): Observable<Object> {\n        return this.http.put(`${this.baseUrl}`, value);\n    }\n\n    deleteCategory(id: number): Observable<any> {\n        return this.http.delete(`${this.baseUrl}/${id}`, {responseType: 'text'});\n    }\n\n    getCategoryList(): Observable<any> {\n        return this.http.get(`${this.baseUrl}`);\n    }\n}\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { CustomerService } from 'src/app/_services/customer.service';\nimport { LocationService } from 'src/app/_services/location.service';\nimport { CreateLocationComponent } from '../create-location/create-location.component';\n\n@Component({\n    selector: 'app-location-list',\n    templateUrl: './location-list.component.html',\n    styleUrls: ['./location-list.component.css']\n})\nexport class LocationListComponent implements OnInit {\n    @ViewChild(MatPaginator) paginator: MatPaginator;\n    displayedColumns: string[] = ['cityName', 'id'];\n    dataSource;\n\n    constructor(public dialog: MatDialog, private customerService: CustomerService, private locationService: LocationService) {\n    }\n\n    ngOnInit(): void {\n        this.getLocationList();\n    }\n\n    applyFilter(event: Event) {\n        const filterValue = (event.target as HTMLInputElement).value;\n        this.dataSource.filter = filterValue.trim().toLowerCase();\n    }\n\n    openDialog(): void {\n        const dialogRef = this.dialog.open(CreateLocationComponent, {\n            width: '550px',\n            disableClose: true\n        });\n\n        dialogRef.afterClosed().subscribe(result => {\n            console.log('The dialog was closed');\n            this.getLocationList();\n        });\n    }\n\n    updateLocationModal(updateLocationModal): void {\n        const dialogRef = this.dialog.open(CreateLocationComponent, {\n            width: '550px',\n            disableClose: true,\n            data: { data: updateLocationModal }\n        });\n\n        dialogRef.afterClosed().subscribe(result => {\n            console.log('The dialog was closed');\n            this.getLocationList();\n        });\n    }\n\n    getLocationList() {\n        this.locationService.getLocationList().subscribe(data => {\n            this.dataSource = data;\n            this.dataSource = new MatTableDataSource(data);\n            this.dataSource.paginator = this.paginator;\n        }, error => console.log(error));\n    }\n\n    deleteLocation(event) {\n        this.locationService.deleteLocation(event.id).subscribe(\n            response => {\n                this.getLocationList();\n            },\n            error => {\n                console.log(error)\n                alert(JSON.parse(error.error).errorMessage);\n            });\n    }\n}\n","<div>\n    <mat-form-field style=\"width: 300px;\">\n        <mat-label>Search</mat-label>\n        <input #input (keyup)=\"applyFilter($event)\" matInput>\n    </mat-form-field>\n    <div class=\"pull-right\">\n        <button (click)=\"openDialog()\" class=\"btn btn-info btn-sm\" style=\"height: 35px;width: 150px;\"> Add Location\n        </button>\n    </div>\n</div>\n\n<div class=\"mat-elevation-z8\">\n    <table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\" mat-table>\n        <!-- Position customer -->\n        <ng-container matColumnDef=\"cityName\">\n            <th *matHeaderCellDef mat-header-cell>Location</th>\n            <td *matCellDef=\"let element\" mat-cell> {{element.cityName}} </td>\n            <td *matCellDef=\"let element\" hidden mat-cell> {{element.id}} </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"id\">\n            <th *matHeaderCellDef mat-header-cell> Action</th>\n            <td *matCellDef=\"let element\" mat-cell>\n                <button class=\"kebab-menu-btn\" [matMenuTriggerFor]=\"menu\" aria-label=\"Example icon-button with a menu\" mat-icon-button>\n                    <mat-icon class=\"kebab-menu\">more_vert</mat-icon>\n                </button>\n                <mat-menu #menu=\"matMenu\" style=\"background-color: #f7f3f3;\">\n                    <div>\n                        <button (click)=\"updateLocationModal(element)\" class=\"btn btn-info\"\n                                style=\"width: 80px;margin-left: 15px;\">\n                            Update\n                        </button>\n                        <br>\n                        <button (click)=\"deleteLocation(element)\" class=\"btn btn-danger\"\n                                style=\"margin-top:5px;width: 80px;margin-left: 15px;\">Delete\n                        </button>\n                        <br>\n                    </div>\n                </mat-menu>\n                <!--  -->\n            </td>\n        </ng-container>\n\n        <tr *matHeaderRowDef=\"displayedColumns\" mat-header-row></tr>\n        <tr *matRowDef=\"let row; columns: displayedColumns;\" mat-row></tr>\n    </table>\n    <mat-paginator [pageSizeOptions]=\"[15, 30, 50]\" [pageSize]=\"15\" showFirstLastButtons></mat-paginator>\n</div>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport { PurchaseOrderService } from 'src/app/_services/purchase-order.service';\nimport { SalesOrderService } from 'src/app/_services/sales-order.service';\n\n@Component({\n  selector: 'app-update-balance-sheet',\n  templateUrl: './supplier-update-balance-sheet.component.html',\n  styleUrls: ['./supplier-update-balance-sheet.component.css']\n})\nexport class SupplierUpdateBalanceSheetComponent implements OnInit {\n  productForm: FormGroup;\n  productUpdateData: any;\n\n  constructor(private purchaseOrderService: PurchaseOrderService,\n    public dialogRef: MatDialogRef<SupplierUpdateBalanceSheetComponent>,\n    @Inject(MAT_DIALOG_DATA) private data) {\n    this.productForm = new FormGroup({\n      id: new FormControl(),\n      supplierName: new FormControl(),\n      currentBalance: new FormControl(),\n      payAmount: new FormControl(),\n    });\n\n    if (data != null) {\n      this.productUpdateData = data?.data;\n      //this.productForm.controls['supplierName'].disable()\n      //this.productForm.controls['currentBalance'].disable()\n      this.productForm.controls['id'].setValue(this.productUpdateData.supplier.id);\n      this.productForm.controls['supplierName'].setValue(this.productUpdateData.supplier.supplierName);\n      this.productForm.controls['currentBalance'].setValue(this.productUpdateData.currentBalance);\n    }\n  }\n\n  ngOnInit(): void {\n  }\n\n  onSubmit() {\n    if (this.productForm.valid) {\n      if (this.productForm.controls.id.value != null) {\n        this.updateSupplierBalance();\n      }\n    }\n  }\n\n  updateSupplierBalance() {\n    let status: string = '';\n    const payAmount: number = Number(this.productForm.controls.payAmount.value);\n\n    if (payAmount < 0) {\n      alert('Pay amount should be positive');\n      return;\n    } else if (payAmount == 0) {\n      alert('Pay amount should not be ZERO');\n      return;\n    } else if (payAmount === this.productForm.controls.currentBalance.value) {\n      status = 'PAID';\n    } else if (payAmount < this.productForm.controls.currentBalance.value) {\n      status = 'DUE';\n    } else {\n      alert('Please pay amount less than due amount');\n      return;\n    }\n\n    let data = {\n      id: this.productForm.controls.id.value,\n      payAmount: payAmount,\n      status: status,\n    };\n\n    this.purchaseOrderService.updatePurchaseOrder(data).subscribe(res => {\n      if (res != null) {\n        this.closeModal();\n      }\n    }, error => {\n      //this.errorMsg = error.error.errorMessage;\n    });\n  }\n\n  closeModal(): void {\n    if (this.productForm.valid || this.productForm.controls.payAmount.value === null) {\n      this.dialogRef.close();\n    }\n  }\n}\n","<div class=\"product-conatiner\">\n\n    <form [formGroup]=\"productForm\" (submit)=\"onSubmit()\">\n        <div class=\"addproduct-container\">\n            <mat-form-field class=\"forms-fildes\">\n                <mat-label>Supplier name</mat-label>\n                <input formControlName=\"supplierName\" matInput readonly>\n            </mat-form-field>\n            <br>\n        </div>\n\n        <div class=\"addproduct-container\">\n            <mat-form-field class=\"forms-fildes\">\n                <mat-label>Current balance</mat-label>\n                <input type=\"text\" formControlName=\"currentBalance\" matInput readonly>\n            </mat-form-field>\n            <br>\n        </div>\n\n        <div class=\"addproduct-container\">\n            <mat-form-field class=\"forms-fildes\">\n                <mat-label>Pay amount</mat-label>\n                <input formControlName=\"payAmount\" matInput required>\n            </mat-form-field>\n            <br>\n        </div>\n\n        <div class=\"button-container\">\n            <button (click)=\"closeModal()\" aria-label=\"Close\" class=\"btn btn-warning\"\n                style=\"width: 25%;margin-left: 5px;\">Cancel\n            </button>\n            <button [disabled]=\"!productForm.valid\" class=\"btn btn-primary\"\n                style=\"width: 25%;margin-left: 5px;border-radius: 10px;\">Save\n            </button>\n        </div>\n    </form>\n\n</div>","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {HttpClientHelper} from '../_model/http-client-helper';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class LocationService {\n\n    private baseUrl = HttpClientHelper.baseURL + '/location';\n\n    constructor(private http: HttpClient) {\n    }\n\n    getLocation(id: number): Observable<any> {\n        return this.http.get(`${this.baseUrl}/${id}`);\n    }\n\n    createLocation(Location: any): Observable<any> {\n        return this.http.post(`${this.baseUrl}`, Location);\n    }\n\n    updateLocation(value: any): Observable<any> {\n        return this.http.put(`${this.baseUrl}`, value);\n    }\n\n    deleteLocation(id: number): Observable<any> {\n        return this.http.delete(`${this.baseUrl}/${id}`, {responseType: 'text'});\n    }\n\n    getLocationList(): Observable<any> {\n        return this.http.get(`${this.baseUrl}`);\n    }\n}\n","import {Component, OnInit, ViewChild} from '@angular/core';\nimport {MatDialog} from '@angular/material/dialog';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatTableDataSource} from '@angular/material/table';\nimport {CompanyService} from 'src/app/_services/company.service';\nimport {ProductService} from 'src/app/_services/product.service';\nimport {CreateProductComponent} from '../create-product/create-product.component';\n\n@Component({\n    selector: 'app-product-list',\n    templateUrl: './product-list.component.html',\n    styleUrls: ['./product-list.component.css']\n})\nexport class ProductListComponent implements OnInit {\n    displayedColumns: string[] = ['productName', 'category', 'qty', 'salePrice', 'price', 'profit', 'GST', 'productDesc'];\n    dataSource;\n    @ViewChild(MatPaginator) paginator: MatPaginator;\n\n    constructor(public dialog: MatDialog, private productService: ProductService, private companyService: CompanyService) {\n    }\n\n    applyFilter(event: Event) {\n        const filterValue = (event.target as HTMLInputElement).value;\n        this.dataSource.filter = filterValue.trim().toLowerCase();\n    }\n\n    ngOnInit(): void {\n        this.getProductList();\n    }\n\n    getProductList() {\n        this.productService.getProductsList().subscribe(res => {\n            this.dataSource = res;\n            this.dataSource = new MatTableDataSource(res);\n            this.dataSource.paginator = this.paginator;\n        }, error => console.log(error));\n    }\n\n    createProduct(): void {\n        const dialogRef = this.dialog.open(CreateProductComponent, {\n            width: '550px',\n            disableClose: true\n        });\n        dialogRef.afterClosed().subscribe(result => {\n            console.log('The dialog was closed');\n            this.getProductList();\n        });\n    }\n\n    updateProduct(updateProduct): void {\n        const dialogRef = this.dialog.open(CreateProductComponent, {\n          width: '550px',\n          disableClose: true,\n          data: { data: updateProduct }\n        });\n    \n        dialogRef.afterClosed().subscribe(result => {\n          console.log('The dialog was closed');\n          this.getProductList();\n        });\n      }\n\n      deleteProduct(productId) {\n        this.productService.deleteProduct(productId).subscribe(\n          response => {\n            this.getProductList();\n          },\n          error => console.log(error));\n      }\n}\n\n\n\n","<div>\n    <mat-form-field style=\"width: 300px;\">\n        <mat-label>Search</mat-label>\n        <input #input (keyup)=\"applyFilter($event)\" matInput>\n    </mat-form-field>\n    <div class=\"pull-right\">\n        <button (click)=\"createProduct()\" class=\"btn btn-info btn-sm\"\n                style=\"height: 35px;width: 150px;\"> Add Product\n        </button>\n    </div>\n\n</div>\n\n<div class=\"mat-elevation-z8\">\n<table [dataSource]=\"dataSource\" mat-table>\n\n    <!-- Name Column -->\n    <ng-container matColumnDef=\"productName\">\n        <th *matHeaderCellDef mat-header-cell> Product</th>\n        <td *matCellDef=\"let element\" mat-cell> {{element.productName}} </td>\n    </ng-container>\n\n    <!-- Weight Column -->\n    <ng-container matColumnDef=\"category\">\n        <th *matHeaderCellDef mat-header-cell> Category</th>\n        <td *matCellDef=\"let element\" mat-cell> {{element.category?.categoryName}} </td>\n    </ng-container>\n\n    <!-- Symbol Column -->\n    <ng-container matColumnDef=\"qty\">\n        <th *matHeaderCellDef mat-header-cell>Stock</th>\n        <td *matCellDef=\"let element\" mat-cell> {{element.qty}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"price\">\n        <th *matHeaderCellDef mat-header-cell> Avg Price</th>\n        <td *matCellDef=\"let element\" mat-cell> {{element.price  | number : '1.0-2'}}</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"salePrice\">\n        <th *matHeaderCellDef mat-header-cell> Selling Price</th>\n        <td *matCellDef=\"let element\"  mat-cell class=\"row-highlight\"><b>{{element.currentPrice  | number : '1.0-2'}}</b></td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"profit\">\n        <th *matHeaderCellDef mat-header-cell> Profit</th>\n        <td *matCellDef=\"let element\" mat-cell> {{element.profit | number : '1.0-2'}} </td>\n    </ng-container>\n\n    <!--<ng-container matColumnDef=\"HSN/SAC\">\n        <th *matHeaderCellDef mat-header-cell> HAN/SAC</th>\n        <td *matCellDef=\"let element\" mat-cell> {{element.hsnNo}}</td>\n    </ng-container>-->\n\n    <ng-container matColumnDef=\"GST\">\n        <th *matHeaderCellDef mat-header-cell> GST</th>\n        <td *matCellDef=\"let element\" mat-cell> {{element.gst}}%</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"productDesc\">\n        <th *matHeaderCellDef mat-header-cell> Action</th>\n        <td *matCellDef=\"let element\" mat-cell>\n\n            <button class=\"kebab-menu-btn\" [matMenuTriggerFor]=\"menu\" aria-label=\"Example icon-button with a menu\" mat-icon-button>\n                <mat-icon class=\"kebab-menu\">more_vert</mat-icon>\n            </button>\n            <mat-menu #menu=\"matMenu\" style=\"background-color: #f7f3f3;\">\n                <div>\n                    <button (click)=\"updateProduct(element)\" class=\"btn btn-info\"\n                            style=\"width: 80px;margin-left: 15px;\">\n                        Update\n                    </button>\n                    <br>\n                    <button (click)=\"deleteProduct(element.id)\"\n                            class=\"btn btn-danger\"\n                            style=\"margin-top:5px;width: 80px;margin-left: 15px;\">Delete\n                    </button>\n                </div>\n            </mat-menu>\n            <!--  -->\n\n        </td>\n    </ng-container>\n\n    <tr *matHeaderRowDef=\"displayedColumns;  sticky: true\" mat-header-row></tr>\n    <tr *matRowDef=\"let row; columns: displayedColumns;\" mat-row></tr>\n</table>\n<mat-paginator [pageSizeOptions]=\"[15, 30, 50]\" [pageSize]=\"15\" showFirstLastButtons></mat-paginator>\n</div>\n","import {Injectable} from '@angular/core';\n\nconst TOKEN_KEY = 'auth-token';\nconst USER_KEY = 'auth-user';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TokenStorageService {\n\n    constructor() {\n    }\n\n    signOut() {\n        window.sessionStorage.clear();\n    }\n\n    public saveToken(token: string) {\n        window.sessionStorage.removeItem(TOKEN_KEY);\n        window.sessionStorage.setItem(TOKEN_KEY, token);\n    }\n\n    public getToken(): string {\n        return sessionStorage.getItem(TOKEN_KEY);\n    }\n\n    public saveUser(user) {\n        window.sessionStorage.removeItem(USER_KEY);\n        window.sessionStorage.setItem(USER_KEY, JSON.stringify(user));\n    }\n\n    public getUser() {\n        return JSON.parse(sessionStorage.getItem(USER_KEY));\n    }\n}\n","import { SalesOrderService } from './../../_services/sales-order.service';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { FormControl, FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-sales-report',\n  templateUrl: './sales-report.component.html',\n  styleUrls: ['./sales-report.component.css']\n})\nexport class SalesReportComponent implements OnInit {\n  displayedColumns: string[] = ['billDate', 'dueDate', 'customerName', 'status', 'totalPrice', 'amountPaid','profit', 'dueAmount'];\n  productColumns: string[] = ['id', 'productName', 'salesPrice', 'qtyOrdered'];\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  dataSource: any;\n\n  searchText: string;\n\n  range = new FormGroup({\n    start: new FormControl(),\n    end: new FormControl()\n  });\n\n  salesReports;\n\n  constructor(private salesOrderService: SalesOrderService) { }\n\n  ngOnInit(): void {\n    this.getSalesOrderList();\n    this.range.valueChanges.subscribe(dateRange => {\n      if (this.range.valid) {\n        this.searchData();\n      }\n    })\n  }\n\n  getSalesOrderList() {\n    this.salesOrderService.getSalesOrderList().subscribe(res => {\n      this.salesReports = res;\n      this._setData(res);\n    }, error => console.log(error));\n  }\n\n  clearCustomerSearch() {\n    this.searchText = '';\n    this._setData(this.salesReports);\n  }\n\n  clearDate() {\n    this.range.reset();\n  }\n\n  searchData() {\n    const searchText = this.searchText;\n    const { start, end } = this.range.value || {};\n    let filteredData = this.salesReports;\n\n    if (start && end) {\n      const startTime = start.getTime();\n      const endTime = end.getTime() + 86399999;\n      // console.log('date===', startTime, endTime, new Date(startTime), new Date(endTime));\n      filteredData = filteredData.filter(salesReport => {\n        const dueDateTime = new Date(salesReport?.dueDate).getTime();\n        return dueDateTime >= startTime && dueDateTime <= endTime\n      });\n    }\n\n    if (searchText) {\n      filteredData = filteredData.filter(salesReport => salesReport?.customer?.customerName?.toLowerCase().indexOf(searchText?.toLowerCase()) > -1);\n    }\n    this._setData(filteredData);\n  }\n\n  private _setData(data) {\n    this.dataSource = new MatTableDataSource(data);\n    this.dataSource.paginator = this.paginator;\n  }\n}\n","<div class=\"d-flex\">\n  <div class=\"form-group col-3\">\n    <mat-form-field class=\"example-form-field\">\n      <mat-label>Search Customer</mat-label>\n      <input matInput type=\"text\" [(ngModel)]=\"searchText\" (input)=\"searchData()\" placeholder=\"Search Customer\">\n      <button *ngIf=\"searchText\" matSuffix mat-icon-button aria-label=\"Clear\" (click)=\"clearCustomerSearch()\">\n        <mat-icon>clear</mat-icon>\n      </button>\n    </mat-form-field>\n  </div>\n\n  <mat-form-field>\n    <mat-date-range-input [formGroup]=\"range\" [rangePicker]=\"picker\">\n      <input matStartDate formControlName=\"start\" placeholder=\"Start Due date\">\n      <input matEndDate formControlName=\"end\" placeholder=\"End Due date\">\n    </mat-date-range-input>\n    <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n    <mat-datepicker-toggle matSuffix (click)=\"clearDate()\">\n      <mat-icon matDatepickerToggleIcon>clear</mat-icon>\n    </mat-datepicker-toggle>\n    <mat-date-range-picker #picker></mat-date-range-picker>\n\n    <mat-error *ngIf=\"range.controls.start.hasError('matStartDateInvalid')\">Invalid start date</mat-error>\n    <mat-error *ngIf=\"range.controls.end.hasError('matEndDateInvalid')\">Invalid end date</mat-error>\n  </mat-form-field>\n</div>\n\n<div class=\"mat-elevation-z8\">\n  <table [dataSource]=\"dataSource\" mat-table>\n    <ng-container matColumnDef=\"customerName\">\n      <th *matHeaderCellDef mat-header-cell>Customer</th>\n      <td *matCellDef=\"let element\" mat-cell> {{element.customer?.customerName}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"billDate\">\n      <th *matHeaderCellDef mat-header-cell>Bill date</th>\n      <td *matCellDef=\"let element\" mat-cell>\n        {{element.billDate | date: 'dd/MM/yyyy hh:mm a'}}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"dueDate\">\n      <th *matHeaderCellDef mat-header-cell>Due Date</th>\n      <td *matCellDef=\"let element\" mat-cell> {{element.dueDate | date: 'dd/MM/yyyy hh:mm a'}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"dueAmount\">\n      <th *matHeaderCellDef mat-header-cell class=\"text-right pr-5\">Due amount</th>\n      <td *matCellDef=\"let element\" mat-cell class=\"text-right pr-5\"> {{element.currentBalance.toLocaleString('en-IN') || 0}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"amountPaid\">\n      <th *matHeaderCellDef mat-header-cell class=\"text-right\">Amount Paid</th>\n      <td *matCellDef=\"let element\" mat-cell class=\"text-right\"> {{element.amountPaid.toLocaleString('en-IN') || 0}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"totalPrice\">\n      <th *matHeaderCellDef mat-header-cell class=\"text-right\">Total Price</th>\n      <td *matCellDef=\"let element\" mat-cell class=\"text-right\"> {{element.totalPrice.toLocaleString('en-IN') || 0}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"profit\">\n      <th *matHeaderCellDef mat-header-cell class=\"text-right\">Profit</th>\n      <td *matCellDef=\"let element\" mat-cell class=\"text-right\"> {{element.totalProfit?.toLocaleString('en-IN') || 0}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"status\">\n      <th *matHeaderCellDef mat-header-cell>Status</th>\n      <td *matCellDef=\"let element\" mat-cell> {{element.status}} </td>\n    </ng-container>\n\n    <tr *matHeaderRowDef=\"displayedColumns;  sticky: true\" mat-header-row></tr>\n    <tr *matRowDef=\"let row; columns: displayedColumns;\" mat-row [ngbPopover]=\"test\" [placement]=\"['bottom']\"\n      triggers=\"mouseenter:mouseleave\">\n      <ng-template #test>\n        <table [dataSource]=\"row.salesOrderDetail\" mat-table class=\"mat-elevation-z2\">\n          <ng-container matColumnDef=\"id\">\n            <th *matHeaderCellDef mat-header-cell>S.No</th>\n            <td *matCellDef=\"let element; let index = index\" mat-cell>\n              {{index+1}}\n            </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"productName\">\n            <th *matHeaderCellDef mat-header-cell>Product Name</th>\n            <td *matCellDef=\"let element\" mat-cell> {{element.product?.productName}} </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"salesPrice\">\n            <th *matHeaderCellDef mat-header-cell class=\"text-right\">Sales Price</th>\n            <td *matCellDef=\"let element\" mat-cell class=\"text-right\"> {{element.price.toLocaleString('en-IN') || 0}} </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"qtyOrdered\">\n            <th *matHeaderCellDef mat-header-cell class=\"text-right\">Order Qty</th>\n            <td *matCellDef=\"let element\" mat-cell class=\"text-right\"> {{element.qtyOrdered}} </td>\n          </ng-container>\n\n          <tr *matHeaderRowDef=\"productColumns;  sticky: true\" mat-header-row></tr>\n          <tr *matRowDef=\"let row; columns: productColumns;\" mat-row></tr>\n        </table>\n      </ng-template>\n    </tr>\n  </table>\n  <mat-paginator [pageSizeOptions]=\"[15, 30, 50]\" [pageSize]=\"15\" showFirstLastButtons></mat-paginator>\n</div>","import {Component, Input} from '@angular/core';\n\n@Component({\n    selector: 'app-action-bar-item',\n    templateUrl: './action-bar-item.component.html',\n    styleUrls: ['./action-bar-item.component.css']\n})\nexport class ActionBarItemComponent {\n    @Input() shadow: boolean = false;\n}\n","<button [class.shadow-sm]=\"shadow\" class=\"action-bar-item\">\n    <div class=\"hamburger-container\">\n        <div class=\"bar1\"></div>\n        <div class=\"bar2\"></div>\n        <div class=\"bar3\"></div>\n    </div>\n    <span _ngcontent-c1=\"\" class=\"action-bar-item-text\">Menu</span>\n</button>\n\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';\nimport { CompanyService } from 'src/app/_services/company.service';\nimport { LocationService } from 'src/app/_services/location.service';\nimport { SupplierService } from 'src/app/_services/supplier.service';\n\n@Component({\n    selector: 'app-create-supplier',\n    templateUrl: './create-supplier.component.html',\n    styleUrls: ['./create-supplier.component.css']\n})\nexport class CreateSupplierComponent implements OnInit {\n\n    supplierForm: FormGroup;\n    locationForm: FormGroup;\n    supplierUpdateData: any;\n    successMsg: any;\n    errorMsg: any;\n    citiesList: any;\n    companies: any;\n\n    constructor(private supplierService: SupplierService, private location: LocationService,\n        private companyService: CompanyService,\n        public dialogRef: MatDialogRef<CreateSupplierComponent>,\n        @Inject(MAT_DIALOG_DATA) private data) {\n        this.supplierUpdateData = data;\n\n        this.supplierForm = new FormGroup({\n            cityName: new FormControl(null),\n            supplierName: new FormControl(null, [Validators.required]),\n            gstIn: new FormControl(null),\n            companyName: new FormControl(null),\n            phoneNumber: new FormControl(null),\n        });\n\n        this.locationForm = new FormGroup({\n            cityName: new FormControl(null, [Validators.required]),\n        });\n\n        if (data != null) {\n            this.supplierUpdateData = data?.data;\n            this.supplierForm.controls['supplierName'].setValue(this.supplierUpdateData.supplierName);\n            this.supplierForm.controls['gstIn'].setValue(this.supplierUpdateData.gstIn);\n            this.supplierForm.controls['phoneNumber'].setValue(this.supplierUpdateData.phoneNumber);\n            this.supplierForm.controls['cityName'].setValue(this.supplierUpdateData.location);\n            this.supplierForm.controls['companyName'].setValue(this.supplierUpdateData.company);\n        }\n    }\n\n    closeModal(): void {\n        if (this.supplierForm.valid || this.supplierForm.controls.supplierName.value === null) {\n            this.dialogRef.close();\n        }\n    }\n\n    ngOnInit(): void {\n        this.getCompanyList();\n        this.getlocationList();\n    }\n\n    onSubmit() {\n        if (this.supplierForm.valid) {\n            if (this.supplierUpdateData?.id != null) {\n                this.updateSupplier();\n            } else {\n                this.saveSupplier();\n            }\n        }\n    }\n\n    saveSupplier() {\n        let data = {\n            supplierName: this.supplierForm.controls.supplierName.value,\n            gstIn: this.supplierForm.controls.gstIn.value,\n            location: this.supplierForm.controls.cityName.value,\n            company: this.supplierForm.controls.companyName.value,\n            phoneNumber: this.supplierForm.controls.phoneNumber.value,\n        };\n\n        this.supplierService.createSupplier(data).subscribe(res => {\n            if (res != null) {\n                this.successMsg = 'Supplier Successfully Created..!';\n                this.closeModal();\n            }\n        }, error => {\n            this.errorMsg = error.error.errorMessage;\n        });\n\n    }\n\n    updateSupplier() {\n        let data = {\n            id: this.supplierUpdateData?.id,\n            supplierName: this.supplierForm.controls.supplierName.value,\n            gstIn: this.supplierForm.controls.gstIn.value,\n            location: this.supplierForm.controls.cityName.value,\n            phoneNumber: this.supplierForm.controls.phoneNumber.value,\n            company: this.supplierForm.controls.companyName.value,\n        };\n\n        this.supplierService.updateSupplier(data).subscribe(res => {\n            if (res != null) {\n                this.successMsg = \"Supplier Successfully Updated..!\";\n                this.closeModal();\n            }\n        }, error => {\n            this.errorMsg = error.error.errorMessage;\n        })\n    }\n\n    getlocationList() {\n        this.location.getLocationList().subscribe(res => {\n            this.citiesList = res;\n        });\n    }\n\n    getCompanyList() {\n        this.companyService.getCompanyList().subscribe(res => {\n            this.companies = res;\n        });\n    }\n}\n","<div class=\"product-conatiner\">\n    <div class=\"title-header\">\n        <h4 class=\"title\">Add Supplier</h4>\n    </div>\n    <hr>\n    <form [formGroup]=\"supplierForm\" (submit)=\"onSubmit()\">\n        <div class=\"title-header\">\n            <mat-form-field class=\"forms-fildes\">\n                <input matInput placeholder=\"Supplier Name\" formControlName=\"supplierName\">\n            </mat-form-field>\n        </div>\n        <div class=\"title-header\">\n            <mat-form-field class=\"forms-fildes\">\n                <input matInput placeholder=\"GSTIN\" formControlName=\"gstIn\">\n            </mat-form-field>\n        </div>\n        <div class=\"title-header\">\n            <mat-form-field class=\"forms-fildes\">\n                <mat-select placeholder=\"City\" formControlName=\"cityName\">\n                    <mat-option [value]=\"location\" *ngFor=\"let location of citiesList\">{{location.cityName}}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n        <div class=\"title-header\">\n            <mat-form-field class=\"forms-fildes\">\n                <mat-select placeholder=\"company\" formControlName=\"companyName\">\n                    <mat-option [value]=\"company\" *ngFor=\"let company of companies\">{{company.companyName}}</mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n        <div class=\"title-header\">\n            <mat-form-field class=\"forms-fildes\">\n                <input matInput placeholder=\"Phone Number\" formControlName=\"phoneNumber\">\n            </mat-form-field>\n        </div>\n        <div class=\"button-container\">\n            <button (click)=\"closeModal()\" aria-label=\"Close\" class=\"btn btn-warning\"\n                style=\"width: 25%;margin-left: 5px;\">Cancel\n            </button>\n            <button class=\"btn btn-primary\" style=\"width: 25%;margin-left: 5px;border-radius: 10px;\"\n                [disabled]=\"!supplierForm.valid\">Save</button>\n        </div>\n        <div class=\"button-container\">\n            <h4 style=\"color: green;\">{{successMsg}}</h4>\n            <h4 style=\"color: red;\">{{errorMsg}}</h4>\n        </div>\n    </form>\n\n</div>","export class Company {\n    companyID: number;\n    companyName: string;\n    phoneNumber: string;\n}\n","import { Component, OnInit } from '@angular/core';\nimport { TokenStorageService } from 'src/app/_services/token-storage.service.js';\nimport { numberInWords } from '../../utils/numToWords.js';\n@Component({\n  selector: 'app-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.css']\n})\nexport class TableComponent implements OnInit {\n  response: any;\n  totalPrice: number = 0;\n  totalQty: number = 0;\n  amountInWords: string = '';\n  user: any = null;\n\n  constructor(private tokenStorageService: TokenStorageService) {}\n\n  ngOnInit(): void {\n    console.log('this.response', JSON.stringify((window['response'])));\n    let purchaseOrder = window['response'];\n    if (!purchaseOrder) {\n      const invoiceData = sessionStorage.getItem('invoiceData');\n      if (invoiceData) {\n        purchaseOrder = JSON.parse(invoiceData);\n      }\n    } else {\n      sessionStorage.setItem('invoiceData', JSON.stringify(purchaseOrder));\n    }\n    \n    this.response = purchaseOrder;\n    document.title = 'Tax Invoice';\n    this._calculateTotals();\n    this.user = this.tokenStorageService.getUser();\n  }\n\n  printPDF() {\n    window.print();\n  }\n\n  private _calculateTotals() {\n    let totalPrice = 0;\n    let totalQty = 0;\n    console.log('response?.purchaseOrderDetail', this.response?.purchaseOrderDetail);\n    this.response?.purchaseOrderDetail?.forEach((purchaseOrder) => {\n      const amount = purchaseOrder?.price * purchaseOrder?.qtyOrdered;\n      const qty = purchaseOrder?.qtyOrdered;\n      //const taxAmount = amount * purchaseOrder?.product?.gst/100;\n      totalQty += qty;\n      totalPrice += amount;// + taxAmount;\n    });\n\n    this.totalPrice = Math.round(totalPrice);\n    this.totalQty = totalQty;\n    this.amountInWords = numberInWords(this.totalPrice);\n  }\n}\n","<div class=\"page-content container\">\n    <div class=\"page-header text-blue-d2\">\n        <div class=\"container px-0\">\n            <div class=\"row pt-4\">\n                <div class=\"col-12 col-lg-10 offset-lg-1\">\n                    <div class=\"d-flex\">\n                        <img src=\"/assets/images/indian-kisan-care.png\" alt=\"image\" class=\"logo\">\n                        <div style=\"text-align: center; width: 55%\">\n                            <div>\n                                <span class=\"text-sm text-grey-m2 align-middle font-weight-bold\">\n                                    <h2> {{user?.brandName}} </h2>\n                                </span>\n                            </div>\n                            <div>\n                                <span class=\"text-sm text-grey-m2 align-middle\">GST: {{user?.gstNo}} | PAN:\n                                    {{user?.panNo}}\n                                </span>\n                            </div>\n                            <div>\n                                <span class=\"text-sm text-grey-m2 align-middle\">P: {{user?.phoneNumber}} | E:\n                                    {{user?.email}}</span>\n                            </div>\n                        </div>\n                    </div>\n                    <hr class=\"row brc-default-l1 mx-n1 mb-4\" />\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">\n                            <div class=\"my-2\">\n                                <span class=\"text-sm text-grey-m2 align-middle font-weight-bold my-2\">\n                                    Supplier Name:\n                                </span>\n                                <span class=\"text-600 text-110 text-blue align-middle\">\n                                    {{response?.supplier?.supplierName}}\n                                </span>\n                            </div>\n                            <div class=\"my-2\">\n                                <span class=\"text-sm text-grey-m2 align-middle font-weight-bold my-2\">\n                                    GSTIN/UIN:\n                                </span>\n                                <span class=\"text-600 text-110 text-blue align-middle\">\n                                    {{response?.supplier?.gstIn}}\n                                </span>\n                            </div>\n\n                            <div class=\"my-2\">\n                                <span class=\"text-sm text-grey-m2 align-middle font-weight-bold my-2\">\n                                    Mobile Number:\n                                </span>\n                                <span class=\"text-600 text-110 text-blue align-middle\">\n                                    {{response?.supplier?.phoneNumber}}\n                                </span>\n                            </div>\n                            <div class=\"my-2\">\n                                <span class=\"text-sm text-grey-m2 align-middle font-weight-bold my-2\">\n                                    Address:\n                                </span>\n                                <span class=\"text-600 text-110 text-blue align-middle\">\n                                    {{response?.supplier?.location?.cityName}}\n                                </span>\n                            </div>\n                        </div>\n                        <!-- /.col -->\n                        <div class=\"text-95 col-sm-6 align-self-start d-sm-flex justify-content-end\">\n                            <hr class=\"d-sm-none\" />\n                            <div class=\"text-grey-m2\">\n                                <div class=\"my-2\">\n                                    <span class=\"text-600 text-90 font-weight-bold\">Bill Date:</span>\n                                    {{(response?.billDate | date: 'dd/MM/yyyy hh:mm a')}}\n                                </div>\n\n                                <div class=\"my-2\">\n                                    <span class=\"text-600 text-90 font-weight-bold\">Due Date:</span>\n                                    {{response?.dueDate | date: 'dd/MM/yyyy hh:mm a'}}\n                                </div>\n\n                                <div class=\"my-2\">\n                                    <span class=\"text-600 text-90 font-weight-bold\">Bill Status:</span>\n                                    <span class=\"text-600 text-90\">\n                                        {{response?.status}}\n                                    </span>\n                                </div>\n                                <div class=\"my-2\">\n                                    <span class=\"text-600 text-90 font-weight-bold\">Motor Vehicle no:</span>\n                                    <span class=\"text-600 text-90\">\n                                        {{response?.vehicleNo}}\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <hr>\n                    <!-- ----------------------------------------- -->\n                    <table class=\"table table-bordered\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">SI.<br>NO</th>\n                                <th scope=\"col\">Item & Description</th>\n                                <th scope=\"col\">HSN/SAC</th>\n                                <th scope=\"col\">Purchase Rate</th>\n                                <th scope=\"col\">Quantity</th>\n                                <th scope=\"col\">Total Amount</th>\n                                <!--<th scope=\"col\">\n                                    <div style=\"text-align: center;\">CGST/SGST <br> IGST Rate</div>\n                                </th>\n                                <th scope=\"col\">Tax Amount</th>\n                                <th scope=\"col\">Total Amount</th>-->\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let cart of response?.purchaseOrderDetail; index as i;\">\n                                <td>{{i + 1}}.</td>\n                                <td>{{cart?.product?.productName}}</td>\n                                <td>{{cart?.product?.hsnNo}}</td>\n                                <td class=\"text-right pr-4\">₹{{cart?.price.toLocaleString('en-IN') || 0}}</td>\n                                <td class=\"text-right pr-4\">{{cart?.qtyOrdered || 0}}</td>\n                                <td class=\"text-right pr-4\">₹{{(cart?.price * cart?.qtyOrdered).toLocaleString('en-IN') || 0}}</td>\n                                <!--<td>{{cart?.product?.gst}}%</td>\n                                <td>₹{{(cart?.product?.gst * cart.price * cart.qtyOrdered / 100).toLocaleString('en-IN')}}\n                                </td>\n                                <td>\n                                    ₹{{(cart.price * cart.qtyOrdered + cart?.product?.gst * cart.price * cart.qtyOrdered / 100).toLocaleString('en-IN')}}\n                                </td>-->\n                            </tr>\n                            <tr>\n                                <th colspan=\"4\">Total</th>\n                                <th class=\"text-right pr-4\">{{totalQty.toLocaleString('en-IN')}}</th>\n                                <th class=\"text-right pr-4\">₹{{totalPrice.toLocaleString('en-IN')}}</th>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <span class=\"text-sm text-grey-m2 align-middle\">Amount chargeable(in words):</span>\n                    <span class=\"text-lg text-grey-m2 align-middle font-weight-bold\">\n                        {{ amountInWords }}\n                    </span>\n                    <hr>\n                    <!-- ---------------- -->\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">\n                            <div>\n                                <span class=\"text-sm text-grey-m2 align-middle font-weight-bold\">Payment Mode:</span>\n                                <span class=\"text-600 text-110 text-blue align-middle\">\n                                    Cash\n                                </span>\n                            </div>\n                            <div>\n                                <span class=\"text-sm text-grey-m2 align-middle font-weight-bold\">PhonePe:</span>\n                                <span class=\"text-600 text-110 text-blue align-middle\">\n                                    NA\n                                </span>\n                            </div>\n                            <br>\n\n                            <div *ngIf=\"user.bankAccount != null\">\n                                <div>\n                                    <span\n                                        class=\"text-sm text-grey-m2 align-middle font-weight-bold\">{{user?.bankAccount?.bankName}}</span>\n                                </div>\n                                <div>\n                                    <span class=\"text-sm text-grey-m2 align-middle font-weight-bold\">A/c no:</span>\n                                    <span class=\"text-600 text-110 text-blue align-middle\">\n                                        {{user?.bankAccount?.accountNo}}\n                                    </span>\n                                </div>\n\n                                <div>\n                                    <span class=\"text-sm text-grey-m2 align-middle font-weight-bold\">Branch:</span>\n                                    <span class=\"text-600 text-110 text-blue align-middle\">\n                                        {{user?.bankAccount?.branchName}}\n                                    </span>\n                                </div>\n                                <div>\n                                    <span class=\"text-sm text-grey-m2 align-middle font-weight-bold\">IFSC code:</span>\n                                    <span class=\"text-600 text-110 text-blue align-middle\">\n                                        {{user?.bankAccount?.ifscCode}}\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                        <!-- /.col -->\n                        <div class=\"text-95 col-sm-6 align-self-start d-sm-flex justify-content-end\">\n                            <hr class=\"d-sm-none\" />\n                            <div class=\"text-grey-m2\">\n                                <div class=\"my-2\">\n                                    <span class=\"text-600 text-90 font-weight-bold\">Amount Paid: </span>\n                                    ₹{{response?.amountPaid.toLocaleString('en-IN') || 0 }}\n                                </div>\n                                <div class=\"my-2\">\n                                    <span class=\"text-600 text-90 font-weight-bold\">Current Balance: </span>\n                                    ₹{{response?.currentBalance.toLocaleString('en-IN') || 0 }}\n                                </div>\n\n                                <div class=\"my-2\">\n                                    <span class=\"text-600 text-90 font-weight-bold\">Previous Balance: </span>\n                                    <span class=\"text-600 text-90\">\n                                        ₹{{((response?.previousBalance - (response?.currentBalance)) >= 0 ? (response?.previousBalance - (response?.currentBalance)) : 0).toLocaleString('en-IN') || 0 }}\n                                    </span>\n                                </div>\n                                <div class=\"my-2\">\n                                    <span class=\"text-600 text-90 font-weight-bold\">Total Pay Balance:</span>\n                                    <span class=\"text-600 text-90\">\n                                        ₹{{(response?.previousBalance).toLocaleString('en-IN') || 0 }}\n                                    </span>\n                                </div>\n\n                                <br><br><br>\n                                <div style=\"text-align: center;\">\n                                    <div class=\"my-2\">\n                                        <span class=\"text-600 text-90 font-weight-bold\">Authorised Signatory</span>\n                                    </div>\n                                    <div class=\"my-2\">\n                                        <span class=\"text-600 text-90 font-weight-bold\">({{user?.brandName}})</span>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <!-- --------------------- -->\n                </div>\n            </div>\n\n            <div class=\"col-12 col-lg-10 offset-lg-1\">\n                <hr>\n                <div style=\"text-align: center;\">\n                    <span class=\"text-300 text-30\">This is a computer generated invoice</span>\n                </div>\n                <div style=\"text-align: center;\" class=\"print-btn\">\n                    <button (click)=\"printPDF()\">Print</button>\n                </div>\n            </div>\n        </div>\n    </div>","import { PurchaseOrderService } from '../../../_services/purchase-order.service';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { SupplierUpdateBalanceSheetComponent } from '../update-supplier-balance-sheet/supplier-update-balance-sheet.component';\n\n@Component({\n  selector: 'app-balance-sheet',\n  templateUrl: './supplier-balance-sheet.component.html',\n  styleUrls: ['./supplier-balance-sheet.component.css']\n})\nexport class SupplierBalanceSheetComponent implements OnInit {\n  displayedColumns: string[] = ['supplierName', 'status', 'totalPrice', 'amountPaid', 'dueAmount', 'billDate', 'dueDate', 'action'];\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  dataSource: any;\n\n  searchText: string;\n\n  range = new FormGroup({\n    start: new FormControl(),\n    end: new FormControl()\n  });\n\n  salesReports;\n\n  constructor(private dialog: MatDialog, private purchaseOrderService: PurchaseOrderService) { }\n\n  ngOnInit(): void {\n    this.getSalesOrderList();\n    this.range.valueChanges.subscribe(dateRange => {\n      if (this.range.valid) {\n        this.searchData();\n      }\n    })\n  }\n\n  getSalesOrderList() {\n    this.purchaseOrderService.getAllSupplierPurchaseOrderBalanceSheet().subscribe(res => {\n      res.sort(function(a, b) {\n        return b.billDate - a.billDate;\n      });\n      this.salesReports = res;\n      this._setData(res);\n    }, error => console.log(error));\n  }\n\n  clearSupplierSearch() {\n    this.searchText = '';\n    this._setData(this.salesReports);\n  }\n\n  clearDate() {\n    this.range.reset();\n  }\n\n  searchData() {\n    const searchText = this.searchText;\n    const { start, end } = this.range.value || {};\n    let filteredData = this.salesReports;\n\n    if (start && end) {\n      const startTime = start.getTime();\n      const endTime = end.getTime();\n      // console.log('date===', startTime, endTime, new Date(startTime), new Date(endTime));\n      filteredData = filteredData.filter(salesReport => {\n        const dueDateTime = new Date(salesReport?.dueDate).getTime();\n        return dueDateTime >= startTime && dueDateTime <= endTime\n      });\n    }\n\n    if (searchText) {\n      filteredData = filteredData.filter(salesReport => salesReport?.supplier?.supplierName?.toLowerCase().indexOf(searchText?.toLowerCase()) > -1);\n    }\n    this._setData(filteredData);\n  }\n\n  private _setData(data) {\n    this.dataSource = new MatTableDataSource(data);\n    this.dataSource.paginator = this.paginator;\n  }\n\n  pay(index: number) {\n    alert('s')\n    //this.salesOrderDetailArr.removeAt(index);\n    //this.salesOrderDetailData = new MatTableDataSource(this.salesOrderDetailArr.controls);\n  }\n\n  updateBalance(updateBalance): void {\n    const dialogRef = this.dialog.open(SupplierUpdateBalanceSheetComponent, {\n      width: '450px',\n      disableClose: true,\n      data: { data: updateBalance }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n      this.getSalesOrderList();\n    });\n  }\n}\n","<div class=\"d-flex\">\n  <div class=\"form-group col-3\">\n    <mat-form-field class=\"example-form-field\">\n      <mat-label>Search Supplier</mat-label>\n      <input matInput type=\"text\" [(ngModel)]=\"searchText\" (input)=\"searchData()\">\n      <button *ngIf=\"searchText\" matSuffix mat-icon-button aria-label=\"Clear\" (click)=\"clearSupplierSearch()\">\n        <mat-icon>clear</mat-icon>\n      </button>\n    </mat-form-field>\n  </div>\n\n  <mat-form-field> \n    <mat-date-range-input [formGroup]=\"range\" [rangePicker]=\"picker\">\n      <input matStartDate formControlName=\"start\" placeholder=\"Start date\">\n      <input matEndDate formControlName=\"end\" placeholder=\"End date\">\n    </mat-date-range-input>\n    <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n    <mat-datepicker-toggle matSuffix (click)=\"clearDate()\">\n      <mat-icon matDatepickerToggleIcon>clear</mat-icon>\n    </mat-datepicker-toggle>\n    <mat-date-range-picker #picker></mat-date-range-picker>\n\n    <mat-error *ngIf=\"range.controls.start.hasError('matStartDateInvalid')\">Invalid start date</mat-error>\n    <mat-error *ngIf=\"range.controls.end.hasError('matEndDateInvalid')\">Invalid end date</mat-error>\n  </mat-form-field>\n</div>\n\n<div class=\"mat-elevation-z8\">\n  <table [dataSource]=\"dataSource\" mat-table>\n    <ng-container matColumnDef=\"supplierName\">\n      <th *matHeaderCellDef mat-header-cell>Supplier</th>\n      <td *matCellDef=\"let element\" mat-cell> {{element.supplier?.supplierName}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"status\">\n      <th *matHeaderCellDef mat-header-cell>Status</th>\n      <td *matCellDef=\"let element\" mat-cell> {{element.currentBalance == 0 ? 'PAID': 'DUE'}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"totalPrice\">\n      <th *matHeaderCellDef mat-header-cell class=\"text-right\">Total Price</th>\n      <td *matCellDef=\"let element\" mat-cell class=\"text-right\"> {{element.totalPrice.toLocaleString('en-IN') || 0}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"amountPaid\">\n      <th *matHeaderCellDef mat-header-cell class=\"text-right\">Amount Paid</th>\n      <td *matCellDef=\"let element\" mat-cell class=\"text-right\"> {{element.amountPaid.toLocaleString('en-IN') || 0}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"dueAmount\">\n      <th *matHeaderCellDef mat-header-cell class=\"text-right pr-5\">Due amount</th>\n      <td *matCellDef=\"let element\" mat-cell class=\"text-right pr-5\"> {{element.currentBalance.toLocaleString('en-IN') || 0}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"billDate\">\n      <th *matHeaderCellDef mat-header-cell>Bill date</th>\n      <td *matCellDef=\"let element\" mat-cell>\n        {{element.billDate | date: 'dd/MM/yyyy hh:mm a'}}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"dueDate\">\n      <th *matHeaderCellDef mat-header-cell>Due Date</th>\n      <td *matCellDef=\"let element\" mat-cell> {{element.dueDate | date: 'dd/MM/yyyy hh:mm a'}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"action\">\n      <th *matHeaderCellDef mat-header-cell class=\"text-left pr-4\">Action</th>\n      <td *matCellDef=\"let element\" mat-cell>\n        <button (click)=\"updateBalance(element)\" mat-icon-button aria-label=\"Pay Balance\">\n          <mat-icon>payment</mat-icon>\n        </button>\n      </td>\n      <td mat-footer-cell *matFooterCellDef></td>\n    </ng-container>\n\n    <tr *matHeaderRowDef=\"displayedColumns;  sticky: true\" mat-header-row></tr>\n    <tr *matRowDef=\"let row; columns: displayedColumns;\" mat-row></tr>\n  </table>\n  <mat-paginator [pageSizeOptions]=\"[15, 30, 50]\" [pageSize]=\"15\" showFirstLastButtons></mat-paginator>\n</div>","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {HttpClientHelper} from '../_model/http-client-helper';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class PurchaseOrderService {\n\n    private baseUrl = HttpClientHelper.baseURL + '/purchaseOrder';\n\n    constructor(private http: HttpClient) {\n    }\n\n    createPurchaseOrder(invoice: any): Observable<any> {\n        return this.http.post(`${this.baseUrl}`, invoice);\n    }\n\n    getPurchaseOrderList(): Observable<any> {\n        return this.http.get(`${this.baseUrl}`);\n    }\n\n    getPurchaseOrderBalaceBySupplier(supplierID: any): any {\n        return this.http.get(`${this.baseUrl}/supplier/${supplierID}`);\n    }\n\n    getAllSupplierPurchaseOrderBalace(): any {\n        return this.http.get(`${this.baseUrl}/supplier`);\n    }\n\n    getAllSupplierPurchaseOrderBalanceSheet(): any {\n        return this.http.get(`${this.baseUrl}/supplier/balance`);\n    }\n\n    updatePurchaseOrder(value: any): Observable<Object> {\n        return this.http.put(`${this.baseUrl}`, value);\n    }\n\n    deleteOrder(id: number): Observable<any> {\n        return this.http.delete(`${this.baseUrl}/${id}`, {responseType: 'text'});\n    }\n}\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { CompanyService } from 'src/app/_services/company.service';\nimport { CustomerService } from 'src/app/_services/customer.service';\nimport { CreateCompanyComponent } from '../create-company/create-company.component';\n\n@Component({\n    selector: 'app-company-list',\n    templateUrl: './company-list.component.html',\n    styleUrls: ['./company-list.component.css']\n})\nexport class CompanyListComponent implements OnInit {\n    @ViewChild(MatPaginator) paginator: MatPaginator;\n    displayedColumns: string[] = ['companyName', 'phoneNumber', 'id'];\n    dataSource;\n\n    constructor(public dialog: MatDialog, private customerService: CustomerService, private companyService: CompanyService) {\n    }\n\n    ngOnInit(): void {\n        this.getCompanyList();\n    }\n\n    applyFilter(event: Event) {\n        const filterValue = (event.target as HTMLInputElement).value;\n        this.dataSource.filter = filterValue.trim().toLowerCase();\n    }\n\n    openDialog(): void {\n        const dialogRef = this.dialog.open(CreateCompanyComponent, {\n            width: '550px',\n            disableClose: true\n        });\n\n        dialogRef.afterClosed().subscribe(result => {\n            console.log('The dialog was closed');\n            this.getCompanyList();\n        });\n    }\n\n    updateComapny(updateComapny): void {\n        const dialogRef = this.dialog.open(CreateCompanyComponent, {\n            width: '550px',\n            disableClose: true,\n            data: { data: updateComapny }\n        });\n\n        dialogRef.afterClosed().subscribe(result => {\n            console.log('The dialog was closed');\n            this.getCompanyList();\n        });\n    }\n\n    getCompanyList() {\n        this.companyService.getCompanyList().subscribe(data => {\n            this.dataSource = data;\n            this.dataSource = new MatTableDataSource(data);\n            this.dataSource.paginator = this.paginator;\n        }, error => console.log(error));\n    }\n\n    deleteCompany(event) {\n        this.companyService.deleteCompany(event.id).subscribe(\n            response => {\n                this.getCompanyList();\n            },\n            error => {\n                console.log(error)\n                alert(JSON.parse(error.error).errorMessage);\n            });\n    }\n}\n","<div>\n    <mat-form-field style=\"width: 300px;\">\n        <mat-label>Search</mat-label>\n        <input #input (keyup)=\"applyFilter($event)\" matInput>\n    </mat-form-field>\n    <div class=\"pull-right\">\n        <button (click)=\"openDialog()\" class=\"btn btn-info btn-sm\"\n                style=\"height: 35px;width: 150px;\"> Add Company\n        </button>\n    </div>\n\n</div>\n\n<div class=\"mat-elevation-z8\">\n    <table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\" mat-table>\n\n        <!-- Position customer -->\n        <ng-container matColumnDef=\"companyName\">\n            <th *matHeaderCellDef mat-header-cell>Company</th>\n            <td *matCellDef=\"let element\" mat-cell> {{element.companyName}} </td>\n        </ng-container>\n\n        <!-- Name Column -->\n        <ng-container matColumnDef=\"phoneNumber\">\n            <th *matHeaderCellDef mat-header-cell> Phone Number</th>\n            <td *matCellDef=\"let element\" mat-cell> {{element.phoneNumber}} </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"id\">\n            <th *matHeaderCellDef mat-header-cell> Action</th>\n            <td *matCellDef=\"let element\" mat-cell>\n\n                <button class=\"kebab-menu-btn\" [matMenuTriggerFor]=\"menu\" aria-label=\"Example icon-button with a menu\" mat-icon-button>\n                    <mat-icon class=\"kebab-menu\">more_vert</mat-icon>\n                </button>\n                <mat-menu #menu=\"matMenu\" style=\"background-color: #f7f3f3;\">\n                    <div>\n                        <button (click)=\"updateComapny(element)\" class=\"btn btn-info\"\n                                style=\"width: 80px;margin-left: 15px;\">\n                            Update\n                        </button>\n                        <br>\n                        <button (click)=\"deleteCompany(element)\" class=\"btn btn-danger\"\n                                style=\"margin-top:5px;width: 80px;margin-left: 15px;\">Delete\n                        </button>\n                        <br>\n\n                    </div>\n                </mat-menu>\n                <!--  -->\n\n            </td>\n        </ng-container>\n\n\n        <tr *matHeaderRowDef=\"displayedColumns\" mat-header-row></tr>\n        <tr *matRowDef=\"let row; columns: displayedColumns;\" mat-row></tr>\n    </table>\n    <mat-paginator [pageSizeOptions]=\"[15, 30, 50]\" [pageSize]=\"15\" showFirstLastButtons></mat-paginator>\n</div>\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { HttpClientHelper } from '../_model/http-client-helper';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SalesOrderService {\n\n    private baseUrl = HttpClientHelper.baseURL + '/salesOrder';\n\n    constructor(private http: HttpClient) {\n    }\n\n    createSalesOrder(invoice: any): Observable<any> {\n        return this.http.post(`${this.baseUrl}`, invoice);\n    }\n\n    getSalesOrderList(): Observable<any> {\n        return this.http.get(`${this.baseUrl}`);\n    }\n\n    getSalesOrderBalaceByCustomer(customerID: any): any {\n        return this.http.get(`${this.baseUrl}/customer/balance/${customerID}`);\n    }\n\n    getAllCustomerSalesOrderBalance(): any {\n        return this.http.get(`${this.baseUrl}/customer/`);\n    }\n\n    getAllCustomerSalesOrderBalanceSheet(): any {\n        return this.http.get(`${this.baseUrl}/customer/balance`);\n    }\n\n    updateSalesOrder(value: any): Observable<Object> {\n        return this.http.put(`${this.baseUrl}`, value);\n    }\n\n    getBarChartReport(): any {\n        return this.http.get(`${this.baseUrl}/barChart`);\n    }\n\n    getSalesOrderByProductWise(): any {\n        return this.http.get(`${this.baseUrl}/product`);\n    }\n\n    getStockBook(productName: string): any {\n        const opts = { params: {'productName': productName}};\n        return this.http.get(`${this.baseUrl}/stock-book`,opts);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { TokenStorageService } from './_services/token-storage.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = 'RK FERTILIZER';\n\n  private roles: string[];\n  isLoggedIn = false;\n  showAdminBoard = false;\n  showModeratorBoard = false;\n  username: string;\n\n  constructor(private tokenStorageService: TokenStorageService) { }\n\n  ngOnInit() {\n    // this.isLoggedIn = !!this.tokenStorageService.getToken();\n\n    // if (this.isLoggedIn) {\n    //   const user = this.tokenStorageService.getUser();\n    //   this.roles = user.roles;\n\n    //   // this.showAdminBoard = this.roles.includes('ROLE_ADMIN');\n    //   // this.showModeratorBoard = this.roles.includes('ROLE_MODERATOR');\n\n    //   this.username = user.username;\n    // }\n  }\n\n\n}\n","<div id=\"app\">\n  <router-outlet></router-outlet>\n</div>\n\n\n","import {Component, OnInit} from '@angular/core';\n\n@Component({\n    selector: 'app-mobile-menu',\n    templateUrl: './mobile-menu.component.html',\n    styleUrls: ['./mobile-menu.component.scss']\n})\nexport class MobileMenuComponent implements OnInit {\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n    }\n\n}\n","<nav class=\"navbar navbar-expand-lg bg-primary navbar-dark\">\n    <a class=\"navbar-brand\" href=\"#\">RK-FERTILIZER</a>\n    <button aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\" class=\"navbar-toggler\"\n            data-target=\"#navbarSupportedContent\" data-toggle=\"collapse\" type=\"button\">\n        <span class=\"navbar-toggler-icon\"></span>\n    </button>\n\n    <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n        <ul class=\"navbar-nav mr-auto\">\n            <li class=\"nav-item\">\n                <a class=\"nav-link\" href=\"/dashboard\" routerLinkActive=\"active\">\n                    DASHBOARDS </a>\n            </li>\n\n            <li class=\"nav-item\">\n                <a class=\"nav-link\" href=\"/dashboard/products\">PRODUCTS</a>\n            </li>\n\n            <li class=\"nav-item\">\n                <a class=\"nav-link\" href=\"/dashboard/salesOrder\">SALES</a>\n            </li>\n\n            <li class=\"nav-item\">\n                <a class=\"nav-link\" href=\"/dashboard/add\">ADD PRODUCT</a>\n            </li>\n\n            <li class=\"nav-item\">\n                <a class=\"nav-link\" href=\"/dashboard/addCategory\"> ADD CATEGORY</a>\n            </li>\n\n            <li class=\"nav-item\">\n                <a class=\"nav-link\" href=\"/dashboard/supplier\"> SUPPLIER</a>\n            </li>\n\n            <li class=\"nav-item\">\n                <a class=\"nav-link\" href=\"/dashboard/location\"> LOCATION</a>\n            </li>\n            <li class=\"nav-item\">\n                <a class=\"nav-link\" href=\"/dashboard/company\"> COMPANY</a>\n            </li>\n            <li class=\"nav-item\">\n                <a class=\"nav-link\" href=\"/dashboard/customer\"> CUSTOMER</a>\n            </li>\n        </ul>\n\n    </div>\n</nav>\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {HttpClientHelper} from '../_model/http-client-helper';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CustomerService {\n\n    private baseUrl = HttpClientHelper.baseURL + '/customer';\n\n    constructor(private http: HttpClient) {\n    }\n\n    getCustomer(id: number): Observable<any> {\n        return this.http.get(`${this.baseUrl}/${id}`);\n    }\n\n    // tslint:disable-next-line: ban-types\n    createCustomer(customer: Object): Observable<Object> {\n        return this.http.post(`${this.baseUrl}`, customer);\n    }\n\n    // tslint:disable-next-line: ban-types\n    updateCustomer(value: any): Observable<Object> {\n        return this.http.put(`${this.baseUrl}`, value);\n    }\n\n    deleteCustomer(id: number): Observable<any> {\n        return this.http.delete(`${this.baseUrl}/${id}`, {responseType: 'text'});\n    }\n\n    getCustomerList(): Observable<any> {\n        return this.http.get(`${this.baseUrl}`);\n    }\n\n    createCustomerSales(customer: Object): Observable<Object> {\n        return this.http.post(`${this.baseUrl}/sales`, customer);\n    }\n    \n    getCustomerByName(customerName: string): any {\n        const opts = { params: {'customerName': customerName}};\n        return this.http.get(`${this.baseUrl}/customerName`, opts);\n    }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {Router} from '@angular/router';\n\n\n@Component({\n    selector: 'app-dashboard',\n    templateUrl: './dashboard.component.html',\n    styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n    isVisible = false;\n    urlPath = [];\n\n    constructor(\n        private router: Router\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.getCurrentPage();\n    }\n\n    getCurrentPage() {\n        const path = this.router.url.split('/');\n        if (path.length === 2 && path[1] === 'dashboard') {\n            this.isVisible = true;\n        }\n        path.forEach((e) => {\n            if (e !== '') {\n                this.urlPath.push(e);\n            }\n        });\n    }\n}\n","<div class=\"app-container\">\n\n    <app-action-bar class=\"d-none d-sm-block\"></app-action-bar>\n\n    <div class=\"main-container flex-fill\">\n        <app-navigation-bar class=\"d-none d-sm-block\"></app-navigation-bar>\n        <!-- only Mobile and Tab View -->\n        <app-mobile-menu class=\"d-block d-sm-none\"></app-mobile-menu>\n        <div class=\"container-fluid mt-2\">\n            <div class=\"row\">\n                <nav aria-label=\"breadcrumb\">\n                    <!-- <ol *ngIf=\"urlPath.length < 2; else visibleCrum\" class=\"breadcrumb\">\n                        <li class=\"breadcrumb-item active\">\n                            <span>{{urlPath[0] | titlecase}}</span>\n                        </li>\n                    </ol> -->\n                    <ng-template #visibleCrum>\n                        <ol class=\"breadcrumb\">\n                            <li *ngFor=\"let item of urlPath\" class=\"breadcrumb-item\">\n                                {{urlPath.pop()}}  {{item}}\n                                <!-- <a [routerLink]=\"[item]\" *ngIf=\"urlPath.pop() != item; else activeMenu\" >{{ item | titlecase}}</a>\n                                <ng-template #activeMenu><span>{{ item | titlecase }}</span></ng-template> -->\n                            </li>\n                        </ol>\n                    </ng-template>\n\n                </nav>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n\n                    <!-- <div class=\"row\" *ngIf=\"isVisible\">\n\n                    <div class=\"col-md-3\">\n                      <div class=\"card-counter primary\">\n                        <i class=\"fa fa-code-fork\"></i>\n                        <span class=\"count-numbers\">12</span>\n                        <span class=\"count-name\">Flowz</span>\n                      </div>\n                    </div>\n\n                    <div class=\"col-md-3\">\n                      <div class=\"card-counter danger\">\n                        <i class=\"fa fa-ticket\"></i>\n                        <span class=\"count-numbers\">599</span>\n                        <span class=\"count-name\">Instances</span>\n                      </div>\n                    </div>\n\n                    <div class=\"col-md-3\">\n                      <div class=\"card-counter success\">\n                        <i class=\"fa fa-database\"></i>\n                        <span class=\"count-numbers\">6875</span>\n                        <span class=\"count-name\">Data</span>\n                      </div>\n                    </div>\n\n                    <div class=\"col-md-3\">\n                      <div class=\"card-counter info\">\n                        <i class=\"fa fa-users\"></i>\n                        <span class=\"count-numbers\">35</span>\n                        <span class=\"count-name\">Users</span>\n                      </div>\n                    </div>\n                  </div> -->\n                    <router-outlet></router-outlet>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { CategoryService } from 'src/app/_services/category.service';\nimport { Category } from 'src/app/_model/category';\n\n@Component({\n  selector: 'app-create-category',\n  templateUrl: './create-category.component.html',\n  styleUrls: ['./create-category.component.css']\n})\nexport class CreateCategoryComponent implements OnInit {\n\n  categoryForm: FormGroup;\n  companies: Observable<Category[]>;\n  category: Category = new Category();\n  categoryUpdateData: any;\n  successMsg: any;\n  errorMsg: any;\n  constructor(private categoryService: CategoryService,\n    public dialogRef: MatDialogRef<CreateCategoryComponent>,\n\n    @Inject(MAT_DIALOG_DATA) private data) {\n    this.categoryUpdateData = data;\n\n    this.categoryForm = new FormGroup({\n      categoryName: new FormControl(null, [Validators.required]),\n      categoryDesc: new FormControl(null),\n    })\n\n    if (data != null) {\n      this.categoryForm.controls[\"categoryName\"].setValue(this.categoryUpdateData.data.categoryName);\n      this.categoryForm.controls[\"categoryDesc\"].setValue(this.categoryUpdateData.data.categoryDesc);\n    }\n  }\n\n  closeModal(): void {\n    if (this.categoryForm.valid || this.categoryForm.controls.categoryName.value === null) {\n      this.dialogRef.close();\n    }\n  }\n\n  ngOnInit(): void {\n  }\n\n  onSubmit() {\n    if (this.categoryForm.valid) {\n      if (this.categoryUpdateData?.data.id != null) {\n        this.updateCategory();\n      } else {\n        this.saveCategory();\n      }\n    }\n  }\n\n  saveCategory() {\n    let data = {\n      id: this.categoryUpdateData?.data.id,\n      categoryName: this.categoryForm.controls.categoryName.value,\n      categoryDesc: this.categoryForm.controls.categoryDesc.value\n    }\n    this.categoryService.createCategory(data).subscribe(res => {\n      if (res != null) {\n        this.successMsg = \"Category Successfully Created..!\";\n        this.closeModal();\n      }\n    }, error => {\n      this.errorMsg = error.error.errorMessage;\n    })\n  }\n\n  updateCategory() {\n    let data = {\n      id: this.categoryUpdateData?.data.id,\n      categoryName: this.categoryForm.controls.categoryName.value,\n      categoryDesc: this.categoryForm.controls.categoryDesc.value\n    }\n    this.categoryService.updateCategory(data).subscribe(res => {\n      if (res != null) {\n        this.successMsg = \"Category Successfully Updated..!\";\n        this.closeModal();\n      }\n    }, error => {\n      this.errorMsg = error.error.errorMessage;\n    })\n  }\n\n  getCategoryList() {\n    this.categoryService.getCategoryList().subscribe(data => {\n    }, error => console.log(error));\n  }\n}\n","<div class=\"product-conatiner\">\n    <div class=\"title-header\" *ngIf=\"categoryUpdateData?.data.id==null\">\n        <h4 class=\"title\">Add Category</h4>\n    </div>\n    <div class=\"title-header\" *ngIf=\"categoryUpdateData?.data.id!=null\">\n        <h4 class=\"title\">Update Category</h4>\n    </div>\n    <hr>\n    \n    <form [formGroup]=\"categoryForm\" (submit)=\"onSubmit()\">\n        <div class=\"title-header\">\n            <mat-form-field class=\"forms-fildes\">\n                <input matInput placeholder=\"Category Name\" formControlName=\"categoryName\" required>\n            </mat-form-field>\n        </div>\n        \n        <div class=\"title-header\">\n            <mat-form-field class=\"forms-fildes\">\n                <input matInput placeholder=\"Category description\" formControlName=\"categoryDesc\">\n            </mat-form-field>\n        </div>\n\n        <div class=\"button-container\">\n            <button class=\"btn btn-warning\" style=\"width: 25%;margin-left: 5px;\" (click)=\"closeModal()\"\n                aria-label=\"Close\">Cancel</button>\n            <button class=\"btn btn-primary\" style=\"width: 25%;margin-left: 5px;\"\n                [disabled]=\"!categoryForm.valid\">Save</button>\n        </div>\n        <div class=\"button-container\">\n            <h4 style=\"color: green;\">{{successMsg}}</h4>\n            <h4 style=\"color: red;\">{{errorMsg}}</h4>\n        </div>\n    </form>\n\n</div>","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport { SalesOrderService } from 'src/app/_services/sales-order.service';\n\n@Component({\n  selector: 'app-update-balance-sheet',\n  templateUrl: './customer-update-balance-sheet.component.html',\n  styleUrls: ['./customer-update-balance-sheet.component.css']\n})\nexport class UpdateBalanceSheetComponent implements OnInit {\n  productForm: FormGroup;\n  productUpdateData: any;\n\n  constructor(private salesOrderService: SalesOrderService,\n    public dialogRef: MatDialogRef<UpdateBalanceSheetComponent>,\n    @Inject(MAT_DIALOG_DATA) private data) {\n    this.productForm = new FormGroup({\n      id: new FormControl(),\n      customerName: new FormControl(),\n      currentBalance: new FormControl(),\n      payAmount: new FormControl(),\n    });\n\n    if (data != null) {\n      this.productUpdateData = data?.data;\n      this.productForm.controls['id'].setValue(this.productUpdateData.customer.id);\n      this.productForm.controls['customerName'].setValue(this.productUpdateData.customer.customerName);\n      this.productForm.controls['currentBalance'].setValue(this.productUpdateData.currentBalance);\n    }\n  }\n\n  ngOnInit(): void {\n  }\n\n  onSubmit() {\n    if (this.productForm.valid) {\n      if (this.productForm.controls.id.value != null) {\n        this.updateCustomerBalance();\n      }\n    }\n  }\n\n  updateCustomerBalance() {\n    let status: string = '';\n    const payAmount: number = Number(this.productForm.controls.payAmount.value);\n\n    if (payAmount < 0) {\n      alert('Pay amount should be positive');\n      return;\n    } else if (payAmount == 0) {\n      alert('Pay amount should not be ZERO');\n      return;\n    } else if (payAmount === this.productForm.controls.currentBalance.value) {\n      status = 'PAID';\n    } else if (payAmount < this.productForm.controls.currentBalance.value) {\n      status = 'DUE';\n    } else {\n      alert('Please pay amount less than due amount');\n      return;\n    }\n\n    let data = {\n      id: this.productForm.controls.id.value,\n      payAmount: payAmount,\n      status: status,\n    };\n\n    this.salesOrderService.updateSalesOrder(data).subscribe(res => {\n      if (res != null) {\n        //this.closeModal();\n      }\n    }, error => {\n      //this.errorMsg = error.error.errorMessage;\n    });\n  }\n\n  closeModal(): void {\n    if (this.productForm.valid || this.productForm.controls.payAmount.value === null) {\n      this.dialogRef.close();\n    }\n  }\n}\n","<div class=\"product-conatiner\">\n\n    <form [formGroup]=\"productForm\" (submit)=\"onSubmit()\">\n        <div class=\"addproduct-container\">\n            <mat-form-field class=\"forms-fildes\">\n                <mat-label>Customer name</mat-label>\n                <input formControlName=\"customerName\" matInput readonly>\n            </mat-form-field>\n            <br>\n        </div>\n\n        <div class=\"addproduct-container\">\n            <mat-form-field class=\"forms-fildes\">\n                <mat-label>Current balance</mat-label>\n                <input type=\"text\" formControlName=\"currentBalance\" matInput readonly>\n            </mat-form-field>\n            <br>\n        </div>\n\n        <div class=\"addproduct-container\">\n            <mat-form-field class=\"forms-fildes\">\n                <mat-label>Pay amount</mat-label>\n                <input formControlName=\"payAmount\" matInput required>\n            </mat-form-field>\n            <br>\n        </div>\n\n        <div class=\"button-container\">\n            <button (click)=\"closeModal()\" aria-label=\"Close\" class=\"btn btn-warning\"\n                style=\"width: 25%;margin-left: 5px;\">Cancel\n            </button>\n            <button [disabled]=\"!productForm.valid\" class=\"btn btn-primary\"\n                style=\"width: 25%;margin-left: 5px;border-radius: 10px;\">Save\n            </button>\n        </div>\n    </form>\n\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\n\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { PurchaseOrderComponent } from './purchase-order/purchase-order.component';\nimport { SalesOrderComponent } from './sales-order/sales-order.component';\nimport { BalanceSheetComponent } from './balance-sheet/customer-balance-sheet/list-customer-balance-sheet/balance-sheet.component';\nimport { MatTableModule } from '@angular/material/table';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { DashboardComponent } from './pages/dashboard/dashboard.component';\nimport { NotfoundComponent } from './pages/notfound/notfound.component';\nimport { RouterModule } from '@angular/router';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { MobileMenuComponent } from './menu/mobile-menu/mobile-menu.component';\nimport { TableModule } from 'primeng/table';\nimport { ActionBarComponent } from './menu/action-bar/action-bar.component';\nimport { ActionBarItemComponent } from './menu/action-bar-item/action-bar-item.component';\nimport { NavigationBarComponent } from './menu/navigation-bar/navigation-bar.component';\nimport { DashboardCategoriesComponent } from './pages/dashboard-categories/dashboard-categories.component';\nimport { DemoMaterialModule } from './material.module';\nimport { CreateCustomerComponent } from './customers/create-customer/create-customer.component';\nimport { CustomersListComponent } from './customers/customers-list/customers-list.component';\nimport { CreateCompanyComponent } from './companies/create-company/create-company.component';\nimport { CompanyListComponent } from './companies/company-list/company-list.component';\nimport { CategoryListComponent } from './categories/category-list/category-list.component';\nimport { CreateSupplierComponent } from './suppliers/create-supplier/create-supplier.component';\nimport { SupplierListComponent } from './suppliers/supplier-list/supplier-list.component';\nimport { LocationListComponent } from './locations/location-list/location-list.component';\nimport { CreateLocationComponent } from './locations/create-location/create-location.component';\nimport { CreateCategoryComponent } from './categories/create-category/create-category.component';\nimport { ProductListComponent } from './products/product-list/product-list.component';\nimport { CreateProductComponent } from './products/create-product/create-product.component';\nimport { TableComponent } from './ui_modules/table/table.component';\nimport { SalesTableComponent } from './ui_modules/table/sales-table.component';\nimport { SalesReportComponent } from './reports/sales-report/sales-report.component';\nimport { PurchaseReportComponent } from './reports/purchase-report/purchase-report.component';\nimport { UpdateBalanceSheetComponent } from './balance-sheet/customer-balance-sheet/update-customer-balance-sheet/customer-update-balance-sheet.component';\nimport { MatSortModule } from '@angular/material/sort';\nimport { SupplierBalanceSheetComponent } from './balance-sheet/supplier-balance-sheet/list-supplier-balance-sheet/supplier-balance-sheet.component';\nimport { SupplierUpdateBalanceSheetComponent } from './balance-sheet/supplier-balance-sheet/update-supplier-balance-sheet/supplier-update-balance-sheet.component';\nimport { DateAdapter } from '@angular/material/core';\nimport { ProfitSummaryComponent } from './reports/profit-summary/profit-summary.component';\nimport { StockBookComponent } from './reports/stock-book/stock-book.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CreateProductComponent,\n    ProductListComponent,\n    CreateCategoryComponent,\n    PurchaseOrderComponent,\n    CreateCustomerComponent,\n    CreateSupplierComponent,\n    CreateLocationComponent,\n    SalesOrderComponent,\n    BalanceSheetComponent,\n    SupplierUpdateBalanceSheetComponent,\n    SupplierBalanceSheetComponent,\n    ActionBarComponent,\n    ActionBarItemComponent,\n    NavigationBarComponent,\n    LoginComponent,\n    RegisterComponent,\n    DashboardComponent,\n    NotfoundComponent,\n    MobileMenuComponent,\n    DashboardCategoriesComponent,\n    CustomersListComponent,\n    CreateCompanyComponent,\n    CompanyListComponent,\n    CategoryListComponent,\n    CreateSupplierComponent,\n    SupplierListComponent,\n    LocationListComponent,\n    TableComponent,\n    SalesTableComponent,\n    SalesReportComponent,\n    PurchaseReportComponent,\n    UpdateBalanceSheetComponent,\n    ProfitSummaryComponent,\n    StockBookComponent\n  ],\n  imports: [\n    TableModule,\n    DemoMaterialModule,\n    MatTableModule,\n    MatSortModule,\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    MatFormFieldModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    ReactiveFormsModule,\n    MatAutocompleteModule,\n    MatInputModule,\n    NgbModule,\n    NgxPaginationModule,\n    RouterModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n  constructor(private dateAdapter: DateAdapter<Date>) {\n    dateAdapter.setLocale(\"en-in\"); // DD/MM/YYYY\n  }\n}\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { CategoryService } from 'src/app/_services/category.service';\nimport { CreateCategoryComponent } from '../create-category/create-category.component';\n\n@Component({\n  selector: 'app-category-list',\n  templateUrl: './category-list.component.html',\n  styleUrls: ['./category-list.component.css']\n})\n\nexport class CategoryListComponent implements OnInit {\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  displayedColumns: string[] = ['categoryName', 'categoryDesc', 'id'];\n  dataSource;\n\n  constructor(private categoryService: CategoryService, public dialog: MatDialog) { }\n\n  ngOnInit(): void {\n    this.getCategoryList();\n  }\n\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n\n  openDialog(): void {\n    const dialogRef = this.dialog.open(CreateCategoryComponent, {\n      width: '550px',\n      disableClose: true\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n      this.getCategoryList();\n    });\n  }\n\n  updateCategory(updateCategory): void {\n    const dialogRef = this.dialog.open(CreateCategoryComponent, {\n      width: '550px',\n      disableClose: true,\n      data: { data: updateCategory }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n      this.getCategoryList();\n    });\n  }\n\n  getCategoryList() {\n    this.categoryService.getCategoryList().subscribe(data => {\n      this.dataSource = data;\n      this.dataSource = new MatTableDataSource(data);\n      this.dataSource.paginator = this.paginator;\n    }, error => console.log(error));\n  }\n\n  deleteCategory(event) {\n    this.categoryService.deleteCategory(event.id).subscribe(\n      response => {\n        this.getCategoryList();\n      },\n      error => {\n        console.log(JSON.parse(error.error).errorMessage);\n        alert(JSON.parse(error.error).errorMessage);\n      });\n  }\n}\n","<div>\n  <mat-form-field style=\"width: 300px;\">\n    <mat-label>Search</mat-label>\n    <input matInput (keyup)=\"applyFilter($event)\">\n  </mat-form-field>\n  <div class=\"pull-right\">\n    <button (click)=\"openDialog()\" class=\"btn btn-info btn-sm\" style=\"height: 35px;width: 150px;\">Add Category </button>\n  </div>\n\n</div>\n\n<div class=\"mat-elevation-z8\">\n  <table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\n\n    <!-- Position customer -->\n    <ng-container matColumnDef=\"categoryName\">\n      <th mat-header-cell *matHeaderCellDef>Category</th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.categoryName}} </td>\n    </ng-container>\n\n    <!-- Name Column -->\n    <ng-container matColumnDef=\"categoryDesc\">\n      <th mat-header-cell *matHeaderCellDef> Description </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.categoryDesc}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"id\">\n      <th mat-header-cell *matHeaderCellDef> Action </th>\n      <td mat-cell *matCellDef=\"let element\">\n\n        <button class=\"kebab-menu-btn\" mat-icon-button [matMenuTriggerFor]=\"menu\" aria-label=\"Example icon-button with a menu\">\n          <mat-icon class=\"kebab-menu\">more_vert</mat-icon>\n        </button>\n        <mat-menu #menu=\"matMenu\" style=\"background-color: #f7f3f3;\">\n          <div>\n            <button (click)=\"updateCategory(element)\" class=\"btn btn-info\" style=\"width: 80px;margin-left: 15px;\">\n              Update </button>\n            <br>\n            <button (click)=\"deleteCategory(element)\" style=\"margin-top:5px;width: 80px;margin-left: 15px;\"\n              class=\"btn btn-danger\">Delete</button>\n            <br>\n          </div>\n        </mat-menu>\n        <!--  -->\n      </td>\n    </ng-container>\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </table>\n  <mat-paginator [pageSizeOptions]=\"[15, 30, 50]\" [pageSize]=\"15\" showFirstLastButtons></mat-paginator>\n</div>\n","import { MatTableDataSource } from '@angular/material/table';\nimport { FormArray, FormBuilder } from '@angular/forms';\nimport { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { map, startWith } from 'rxjs/operators';\n\nimport { Product } from '../_model/product';\nimport { Observable } from 'rxjs';\nimport { ProductService } from '../_services/product.service';\nimport { SalesOrder } from '../_model/sales-order';\nimport { SalesOrderService } from '../_services/sales-order.service';\nimport { Customer } from '../_model/customer';\nimport { CustomerService } from '../_services/customer.service';\n\n@Component({\n  selector: 'app-sales-order',\n  templateUrl: './sales-order.component.html',\n  styleUrls: ['./sales-order.component.css']\n})\nexport class SalesOrderComponent implements OnInit {\n  salesOrderDetailData: any;\n  displayedColumns: string[] = ['sno', 'action', 'item', 'price', 'quantity', 'totalAmount'];\n  filteredCustomers: Observable<Customer[]>;\n  filteredProducts: Observable<Product[]>;\n\n  customers: Customer[];\n  products: Product[];\n\n  previousBalance = 0;\n  totalAmount = 0;\n\n  salesOrderForm: FormGroup;\n\n  constructor(\n    private _fb: FormBuilder,\n    private productService: ProductService,\n    private customerService: CustomerService,\n    private salesOrderService: SalesOrderService) {\n\n    this.customers = [];\n    this.products = [];\n  }\n\n  ngOnInit() {\n    this.fetchData();\n    this._createForm();\n    console.log('this.salesOrderForm', this.salesOrderForm);\n  }\n\n  removeProduct(index: number) {\n    if (this.salesOrderDetailArr.length > 1 || index > 0) {\n      this.salesOrderDetailArr.removeAt(index);\n      this.salesOrderDetailData = new MatTableDataSource(this.salesOrderDetailArr.controls);\n    }\n  }\n\n  selectedProduct(selectedProduct: string) {\n    this.salesOrderForm.controls['productName'].setValue(null);\n    const product = this._findProduct(selectedProduct);\n    if (product.qty <= 0) {\n      alert('Stock is not avaiable');\n      // this.salesOrderForm = this._fb.group({\n      //productName: ['']\n      //});\n      return;\n    }\n    this._addProduct(product);\n  }\n\n  selectedCustomer(selectedCustomer: string) {\n    const customer = this._findCustomer(selectedCustomer);\n    this._customerBalanceData(customer?.id);\n  }\n\n  fetchData() {\n    this.customerService.getCustomerList().subscribe(data => {\n      data.forEach(x => {\n        if (x.customerName != '' && !x.customerName.startsWith('UNKNOWN')) {\n          this.customers.push(x);\n        }\n      });\n    });\n\n    this.productService.getProductsList().subscribe(data => {\n      this.products = data;\n      this._valueChangesListner();\n    });\n  }\n\n  getCurrentBalance() {\n    return this.totalAmount - this.amountPaid.value;\n  }\n\n  getTotalBalance() {\n    return this.previousBalance + this.getCurrentBalance();\n  }\n\n  save(isPrintReq: boolean) {\n\n    if (this.salesOrderDetailArr.value.length === 0) {\n      alert('please select products, before submitting');\n      return;\n    }\n\n    let isStockAvail = true;\n    this.salesOrderDetailArr.value.forEach(value => {\n      if (value.product.qty < value.qtyOrdered) {\n        alert('No Stock for product: ' + value.product.productName);\n        isStockAvail = false;\n      }\n\n      if (value.qtyOrdered === 0) {\n        alert('Please add Quantity to : ' + value.product.productName);\n        isStockAvail = false;\n      }\n    });\n\n    if (isStockAvail) {\n      const customerName = this.salesOrderForm.get('customerName').value;\n      let customer = this._findCustomer(customerName);\n\n      if (customer === undefined) {\n        customer = this.getCustomerObj(customerName);\n      }\n      const salesOrder: SalesOrder = new SalesOrder();\n      salesOrder.customer = customer;\n      salesOrder.currentBalance = this.getCurrentBalance();\n      salesOrder.salesOrderDetail = this.salesOrderDetailArr.value;\n      salesOrder.totalPrice = this.totalAmount;\n      salesOrder.vehicleNo = this.salesOrderForm.get('motorVehicleNo').value;\n      salesOrder.amountPaid = this.salesOrderForm.get('amountPaid').value;\n      salesOrder.dueDate = this.salesOrderForm.get('dueDate').value?.getTime();\n      salesOrder.billDate = this.salesOrderForm.get('billDate').value?.getTime();\n\n      if (salesOrder.amountPaid < 0) {\n        alert('Amount paid should be positive');\n        return;\n      } else if (this.getTotalBalance() < 0) {\n        alert('Amount paid should be equals to balance');\n        return;\n      } else if (this.getTotalBalance() <= 0) {\n        salesOrder.status = 'PAID';\n      } else if (salesOrder.amountPaid > 0) {\n        salesOrder.status = 'PARTIAL';\n      } else {\n        salesOrder.status = 'DUE';\n      }\n\n      if (confirm(\"Are you sure to save?\")) {\n        this.salesOrderService\n          .createSalesOrder(salesOrder).subscribe(data => {\n            console.log(data);\n            //this._printPdf(data);\n            //this.refreshAfterSave();\n\n            if (isPrintReq) {\n              this._printPdf(data);\n            } else {\n              alert('Sales Order Successfully created!!');\n            }\n          },\n            error => console.log(error));\n      }\n    }\n  }\n\n  getCustomerObj(customerName: string): any {\n    let data = {\n      customerName: customerName,\n      gstIn: 'NA',\n      phoneNumber: 'NA'\n    };\n    return data;\n  }\n\n  refreshAfterSave() {\n    //window.location.reload();\n    this.previousBalance = 0;\n    this.totalAmount = 0;\n    this.salesOrderDetailData = [];\n    this._createForm();\n    this.fetchData();\n  }\n\n  private _customerBalanceData(customerID: any) {\n    this.salesOrderService.getSalesOrderBalaceByCustomer(customerID).subscribe((data: number) => {\n      this.previousBalance = data;\n    }, (error: any) => console.log(error));\n  }\n\n  private _printPdf(response) {\n    //const url = `${location.origin}/praveen-traders/#salesTable`;\n    const url = `${location.origin}/#salesTable`;\n    const myWindow = window.open(url);\n    myWindow['response'] = response;\n  }\n\n  private _filterCustomer(value: string): Customer[] {\n    if (!value) {\n      this.previousBalance = 0.00;\n      return this.customers;\n    }\n    const filterValue = value.toLowerCase();\n    const customerList = this.customers.filter(option => option.customerName.toLowerCase().indexOf(filterValue) === 0)\n    if (customerList.length == 0) {\n      this.previousBalance = 0.00;\n    }\n    return customerList;\n  }\n\n  private _filterProduct(value: string): Product[] {\n    if (!value) {\n      return this.products;\n    }\n    const filterValue = value.toLowerCase();\n    return this.products.filter(option => option.productName.toLowerCase().indexOf(filterValue) === 0);\n  }\n\n  private _findProduct(value: string): Product {\n    return this.products.find(option => option.productName === value);\n  }\n\n  private _findCustomer(value: string): Customer {\n    return this.customers.find(option => option.customerName === value);\n  }\n\n  private _initRow(product) {\n    return this._fb.group({\n      price: [, [Validators.required, Validators.min(1), Validators.max(100000)]],\n      qtyOrdered: [, [Validators.required, Validators.min(1), Validators.max(10000)]],\n      product: [product]\n    });\n  }\n\n  private _addProduct(product: Product) {\n    let isProductAdded = true;\n    this.salesOrderDetailArr.value.forEach(element => {\n      if (product.productName === element.product.productName) {\n        alert('Product is already Added!!');\n        isProductAdded = false;\n      }\n    });\n\n    if (isProductAdded) {\n      const newRow = this._initRow(product);\n      this.salesOrderDetailArr.push(newRow);\n      this.salesOrderDetailData = new MatTableDataSource(this.salesOrderDetailArr.controls);\n    }\n  }\n\n  private _valueChangesListner() {\n    this.filteredCustomers = this.salesOrderForm.controls['customerName'].valueChanges.pipe(\n      startWith(''),\n      map(value => this._filterCustomer(value))\n    );\n\n    this.filteredProducts = this.salesOrderForm.controls['productName'].valueChanges.pipe(\n      startWith(''),\n      map(value => this._filterProduct(value))\n    );\n\n    this.salesOrderDetailArr.valueChanges.subscribe((productList) => {\n      let totalAmount = 0;\n      productList.forEach(product => {\n        const amount = Number(product.qtyOrdered) * Number(product.price);\n        //const taxAmount = amount * (product.product?.gst || 0) / 100;\n        totalAmount += amount;\n      });\n      this.totalAmount = Math.round(totalAmount);\n    });\n  }\n\n  private _createForm() {\n    this.salesOrderForm = this._fb.group({\n      customerName: [''],\n      productName: [''],\n      motorVehicleNo: [''],\n      dueDate: [],\n      billDate: [new Date()],\n      salesOrderDetail: this._fb.array([]),\n      amountPaid: [],\n    });\n  }\n\n  get salesOrderDetailArr() {\n    return this.salesOrderForm.get('salesOrderDetail') as FormArray;\n  }\n\n  get amountPaid() {\n    return this.salesOrderForm.get('amountPaid') as FormControl;\n  }\n}\n","<form [formGroup]=\"salesOrderForm\">\n  <div class=\"d-flex\">\n    <div class=\"form-group col-3\">\n      <mat-form-field class=\"example-full-width\">\n        <mat-label>Customer</mat-label>\n        <input type=\"text\" aria-label=\"Customer\" matInput formControlName=\"customerName\"\n          [matAutocomplete]=\"customerAuto\">\n        <mat-autocomplete #customerAuto=\"matAutocomplete\" autoActiveFirstOption\n          (optionSelected)=\"selectedCustomer($event.option.value)\">\n          <mat-option *ngFor=\"let customer of filteredCustomers | async\" [value]=\"customer.customerName\">\n            {{customer.customerName}}\n          </mat-option>\n        </mat-autocomplete>\n      </mat-form-field>\n    </div>\n\n    <div class=\"form-group col-3\">\n      <mat-form-field class=\"example-full-width\">\n        <mat-label>Product</mat-label>\n        <input type=\"text\" aria-label=\"Product\" matInput formControlName=\"productName\" [matAutocomplete]=\"productAuto\">\n        <mat-autocomplete #productAuto=\"matAutocomplete\" autoActiveFirstOption\n          (optionSelected)=\"selectedProduct($event.option.value)\">\n          <mat-option *ngFor=\"let product of filteredProducts | async\" [value]=\"product.productName\">\n            {{product.productName}}\n          </mat-option>\n        </mat-autocomplete>\n      </mat-form-field>\n    </div>\n\n    <div class=\"form-group col-2\">\n      <mat-form-field class=\"forms-fildes\">\n        <mat-label>Motor Vehicle no</mat-label>\n        <input type=\"text\" aria-label=\"Motor Vehicle no\" matInput formControlName=\"motorVehicleNo\">\n      </mat-form-field>\n    </div>\n\n    <mat-form-field class=\"form-group col-2\">\n      <mat-label>Bill date</mat-label>\n      <input matInput [matDatepicker]=\"picker1\" formControlName=\"billDate\">\n      <mat-datepicker-toggle matSuffix [for]=\"picker1\"></mat-datepicker-toggle>\n      <mat-datepicker #picker1></mat-datepicker>\n    </mat-form-field>\n\n    <mat-form-field class=\"form-group col-2\">\n      <mat-label>Due date</mat-label>\n      <input matInput [matDatepicker]=\"picker2\" formControlName=\"dueDate\">\n      <mat-datepicker-toggle matSuffix [for]=\"picker2\"></mat-datepicker-toggle>\n      <mat-datepicker #picker2></mat-datepicker>\n    </mat-form-field>\n\n  </div>\n  <div class=\"mat-elevation-z8 sales-order-container\">\n    <table formArrayName=\"salesOrderDetail\" [dataSource]=\"salesOrderDetailData\" mat-table>\n      <ng-container matColumnDef=\"sno\">\n        <th *matHeaderCellDef mat-header-cell class=\"text-left pr-4\">S. No</th>\n        <td *matCellDef=\"let element; let i = index;\" mat-cell class=\"text-right pr-4\"> {{i + 1}}. </td>\n        <td mat-footer-cell *matFooterCellDef><strong>Total</strong></td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"action\">\n        <th *matHeaderCellDef mat-header-cell class=\"text-left pr-4\">Action</th>\n        <td *matCellDef=\"let element; let i = index;\" mat-cell>\n          <button (click)=\"removeProduct(i)\" mat-icon-button aria-label=\"Remove product\">\n            <mat-icon class=\"delete-button\">delete</mat-icon>\n          </button>\n        </td>\n        <td mat-footer-cell *matFooterCellDef></td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"item\">\n        <th *matHeaderCellDef mat-header-cell>Item & Description</th>\n        <td *matCellDef=\"let element\" mat-cell>{{element.get('product').value?.productName}}</td>\n        <td mat-footer-cell *matFooterCellDef></td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"price\">\n        <th *matHeaderCellDef mat-header-cell class=\"text-right pr-4\">Selling Price</th>\n        <td *matCellDef=\"let element; let index = index\" mat-cell class=\"text-right pr-4\" [formGroupName]=\"index\">\n          <mat-form-field floatLabel=\"never\">\n            <input matInput type=\"number\" formControlName=\"price\" required class=\"text-right\">\n            <span matPrefix>₹&nbsp;</span>\n            <!--<mat-error *ngIf=\"element.get('price')?.hasError('required')\">\n              Price is Required!\n            </mat-error>-->\n            <mat-error *ngIf=\"element.get('price')?.hasError('required')\">\n              Selling Price: {{element.get('product')?.value?.currentPrice | number : '1.0-2'}}\n            </mat-error>\n            <mat-error *ngIf=\"element.get('price')?.hasError('min')\">\n              Price more than zero\n            </mat-error>\n            <mat-error *ngIf=\"element.get('price')?.hasError('max')\">\n              Price can't be greater than 1 lakhs\n            </mat-error>\n          </mat-form-field>\n        </td>\n        <td mat-footer-cell *matFooterCellDef></td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"quantity\">\n        <th *matHeaderCellDef mat-header-cell class=\"text-right pr-4\">Quantity</th>\n        <td *matCellDef=\"let element; let index = index\" mat-cell class=\"text-right pr-4\" [formGroupName]=\"index\">\n          <mat-form-field floatLabel=\"never\" class=\"text-right\">\n            <input matInput type=\"number\" formControlName=\"qtyOrdered\" required>\n            <mat-error *ngIf=\"element.get('qtyOrdered')?.hasError('required')\">\n              Stock: {{element.get('product')?.value?.qty}}\n            </mat-error>\n            <mat-error *ngIf=\"element.get('qtyOrdered')?.hasError('min')\">\n              Quantity more than zero\n            </mat-error>\n            <mat-error *ngIf=\"element.get('qtyOrdered')?.hasError('max')\">\n              Quantity can't be greater than 10 thousand\n            </mat-error>\n          </mat-form-field>\n        </td>\n        <td mat-footer-cell *matFooterCellDef></td>\n      </ng-container>\n\n      <!-- <ng-container matColumnDef=\"amount\">\n        <th *matHeaderCellDef mat-header-cell class=\"text-right pr-4\">Base Price</th>\n        <td *matCellDef=\"let element\" mat-cell class=\"text-right pr-4\">\n          ₹{{element.get('price')?.value - (element.get('price')?.value * (element.get('product')?.value.gst/100) )}}</td>\n        <td mat-footer-cell *matFooterCellDef></td>\n      </ng-container> -->\n\n      <!-- <ng-container matColumnDef=\"taxType\">\n        <th *matHeaderCellDef mat-header-cell class=\"text-right pr-4\">\n          CGST/SGST <br> IGST Rate\n        </th>\n        <td *matCellDef=\"let element\" mat-cell class=\"text-right pr-4\">\n          {{element.get('product')?.value.gst}}%</td>\n        <td mat-footer-cell *matFooterCellDef></td>\n      </ng-container> -->\n\n      <!-- <ng-container matColumnDef=\"taxAmount\">\n        <th *matHeaderCellDef mat-header-cell class=\"text-right pr-4\">Tax Amount</th>\n        <td *matCellDef=\"let element\" mat-cell class=\"text-right pr-4\">\n          ₹{{element.get('price')?.value * element.get('qtyOrdered')?.value * element.get('product')?.value.gst/100 | number : '1.0-2'}}\n        </td>\n        <td mat-footer-cell *matFooterCellDef></td>\n      </ng-container>-->\n\n      <ng-container matColumnDef=\"totalAmount\">\n        <th *matHeaderCellDef mat-header-cell class=\"text-right pr-4\">Total Amount</th>\n        <td *matCellDef=\"let element\" mat-cell class=\"text-right pr-4\">\n          ₹{{element.get('price')?.value * element.get('qtyOrdered')?.value | number : '1.0-2'}}\n        </td>\n        <td mat-footer-cell *matFooterCellDef class=\"text-right pr-4\">\n          <h4><b>{{ totalAmount | currency:'INR' }}</b></h4>\n        </td>\n      </ng-container>\n\n      <tr *matHeaderRowDef=\"displayedColumns;  sticky: true\" mat-header-row></tr>\n      <tr *matRowDef=\"let row; columns: displayedColumns;\" mat-row></tr>\n      <tr mat-footer-row *matFooterRowDef=\"displayedColumns\"></tr>\n    </table>\n\n    <div class=\"total-container\">\n      <div>\n        <label for=\"name\">Current Balance : </label>\n        <span class=\"amount-read-only\">{{ getCurrentBalance() | currency:'INR' }}</span>\n      </div>\n      <div>\n        <label for=\"name\">Previous Balance : </label>\n        <span class=\"amount-read-only\">{{previousBalance | currency:'INR' }}</span>\n      </div>\n      <div>\n        <label for=\"name\">Total Pay Balance :</label>\n        <span class=\"amount-read-only\">{{getTotalBalance() | currency:'INR'}}</span>\n      </div>\n      <div>\n        <label for=\"name\">Amount Paid : </label>\n        <input class=\"amount-edit\" type=\"number\" formControlName=\"amountPaid\" required>\n      </div>\n      <br>\n\n      <button class=\"btn btn-warning\" style=\"width: 10%;margin-left: 5px;\" (click)=\"refreshAfterSave()\">CLEAR</button>\n      <button type=\"submit\" class=\"btn btn-primary\" style=\"width: 10%;margin-left: 5px;\"\n        (click)=\"save(false)\">SAVE</button>\n      <button type=\"submit\" class=\"btn btn-success\" style=\"width: 10%;margin-left: 5px;\"\n        (click)=\"save(true)\">PRINT</button>\n    </div>\n  </div>\n</form>","export class Category {\n    categoryID: number;\n    categoryName: string;\n    categoryDesc: string;\n}\n","export class HttpClientHelper {\n    //static baseURL: string = 'http://ec2-18-222-37-157.us-east-2.compute.amazonaws.com:8080';\n\n    //Visual studio with backend\n    static baseURL = 'http://localhost:8080';\n\n    //External tomcat server\n    //static baseURL: string = 'http://localhost:8080/indian-kisan-care-backend';\n\n    //AWS server\n    //static baseURL: string = 'http://ec2-3-133-100-17.us-east-2.compute.amazonaws.com:8080/indian-kisan-care-backend';\n}\n","import { SalesOrderService } from '../../_services/sales-order.service';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\n\n@Component({\n  selector: 'app-profit-summary',\n  templateUrl: './profit-summary.component.html',\n  styleUrls: ['./profit-summary.component.css']\n})\nexport class ProfitSummaryComponent implements OnInit {\n  displayedColumns: string[] = ['createdDate', 'totalPrice'];\n  displayedColumnsProduct: string[] = ['productName', 'qtySold','totalPrice'];\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  dataSource: any;\n  dataSourceProduct: any;\n\n  constructor(private salesOrderService: SalesOrderService) { }\n\n  ngOnInit(): void {\n    this.getSalesOrderList();\n    this.getSalesOrderByProduct();\n  }\n\n  getSalesOrderList() {\n    this.salesOrderService.getBarChartReport().subscribe(res => {\n      this._setData(res.monthlyBarChart);\n    }, error => console.log(error));\n  }\n\n  getSalesOrderByProduct() {\n    this.salesOrderService.getSalesOrderByProductWise().subscribe(res => {\n      this._setDataProductWise(res);\n    }, error => console.log(error));\n  }\n\n  private _setData(data) {\n    this.dataSource = new MatTableDataSource(data);\n    this.dataSource.paginator = this.paginator;\n  }\n\n  private _setDataProductWise(data) {\n    this.dataSourceProduct = new MatTableDataSource(data);\n    this.dataSourceProduct.paginator = this.paginator;\n  }\n}\n","<div class=\"d-flex\">\n  <div class=\"col-4 col-lg-4 offset-lg-0\">\n    <div class=\"mat-elevation-z8\">\n      <table [dataSource]=\"dataSource\" mat-table>\n\n        <ng-container matColumnDef=\"createdDate\">\n          <th *matHeaderCellDef mat-header-cell class=\"text-right pr-4\">Recent Dates</th>\n          <td *matCellDef=\"let element\" mat-cell class=\"text-right pr-4\"> {{element.createdDate | date: 'dd/MM/yyyy'}}\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"totalPrice\">\n          <th *matHeaderCellDef mat-header-cell class=\"text-right\">Total Profit</th>\n          <td *matCellDef=\"let element\" mat-cell class=\"text-right pr-4\">\n            {{element.totalPrice.toLocaleString('en-IN') || 0}} </td>\n        </ng-container>\n\n        <tr *matHeaderRowDef=\"displayedColumns;  sticky: true\" mat-header-row></tr>\n        <tr *matRowDef=\"let row; columns: displayedColumns;\" mat-row></tr>\n\n      </table>\n      <mat-paginator [pageSizeOptions]=\"[15, 30, 50]\" [pageSize]=\"30\" showFirstLastButtons></mat-paginator>\n    </div>\n  </div>\n\n  <div class=\"col-3 col-lg-7 offset-lg-0\">\n    <div class=\"mat-elevation-z9\">\n      <table [dataSource]=\"dataSourceProduct\" mat-table>\n\n        <ng-container matColumnDef=\"productName\">\n          <th *matHeaderCellDef mat-header-cell>Product Name</th>\n          <td *matCellDef=\"let element\" mat-cell> {{element.productName}}\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"qtySold\">\n          <th *matHeaderCellDef mat-header-cell class=\"text-right pr-4\">Sold Quantity</th>\n          <td *matCellDef=\"let element\" mat-cell class=\"text-right pr-4\"> {{element.qtySold}}\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"totalPrice\">\n          <th *matHeaderCellDef mat-header-cell class=\"text-right\">Total Profit</th>\n          <td *matCellDef=\"let element\" mat-cell class=\"text-right pr-4\">\n            {{element.totalPrice.toLocaleString('en-IN') || 0}} </td>\n        </ng-container>\n\n        <tr *matHeaderRowDef=\"displayedColumnsProduct;  sticky: true\" mat-header-row></tr>\n        <tr *matRowDef=\"let row; columns: displayedColumnsProduct;\" mat-row></tr>\n\n      </table>\n      <mat-paginator [pageSizeOptions]=\"[15, 30, 50]\" [pageSize]=\"30\" showFirstLastButtons></mat-paginator>\n    </div>\n  </div>\n</div>","import {Component, OnInit} from '@angular/core';\n\n@Component({\n    selector: 'app-notfound',\n    templateUrl: './notfound.component.html',\n    styleUrls: ['./notfound.component.scss']\n})\nexport class NotfoundComponent implements OnInit {\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n    }\n\n}\n","<div class=\"container\">\n    <div class=\"error-wrapper\">\n        <div class=\"man-icon\"></div>\n        <h3 class=\"title\">404</h3>\n        <p class=\"info\">Oh! Page not found</p>\n        <button class=\"home-btn\" routerLink=\"/dashboard\" type=\"button\">HOME</button>\n    </div>\n</div>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {MatTableDataSource} from '@angular/material/table';\nimport {Observable} from 'rxjs';\nimport {Location} from 'src/app/_model/location';\nimport {LocationService} from 'src/app/_services/location.service';\n\n@Component({\n    selector: 'app-create-location',\n    templateUrl: './create-location.component.html',\n    styleUrls: ['./create-location.component.css']\n})\nexport class CreateLocationComponent implements OnInit {\n    locationForm: FormGroup;\n    locations: Observable<Location[]>;\n    location: Location = new Location();\n    locationUpdateData: any;\n    successMsg: any;\n    errorMsg: any;\n    //@ViewChild(MatPaginator) paginator: MatPaginator;\n    //displayedColumns: string[] = ['cityName', 'id'];\n    dataSource;\n\n    constructor(private locationService: LocationService,\n                public dialogRef: MatDialogRef<CreateLocationComponent>,\n                @Inject(MAT_DIALOG_DATA) private data) {\n        this.locationUpdateData = data;\n        this.locationForm = new FormGroup({\n            cityName: new FormControl(null, [Validators.required])\n        });\n        if (data != null) {\n            this.locationForm.controls['cityName'].setValue(this.locationUpdateData.data.cityName);\n        }\n    }\n\n    closeModal(): void {\n        this.dialogRef.close();\n    }\n\n    ngOnInit(): void {\n    }\n\n    onSubmit(): void {\n        if (this.locationUpdateData?.data.id != null) {\n            this.updateLocation();\n        } else {\n            this.saveLocation();\n        }\n    }\n\n    saveLocation() {\n        let data = {\n            id: this.locationUpdateData?.data.id,\n            cityName: this.locationForm.controls.cityName.value\n        };\n        this.locationService.createLocation(data).subscribe(res => {\n            if (res != null) {\n                this.successMsg = 'Location Successfully Created..!';\n                this.closeModal();\n            }\n        }, error => {\n            this.errorMsg = error.error.errorMessage;\n        });\n    }\n\n    updateLocation() {\n        let data = {\n            id: this.locationUpdateData?.data.id,\n            cityName: this.locationForm.controls.cityName.value\n        };\n        this.locationService.updateLocation(data).subscribe(res => {\n            if (res != null) {\n                this.successMsg = 'Location Successfully Updated..!';\n                this.getLocationList();\n                this.closeModal();\n            }\n        }, error => {\n            this.errorMsg = error.error.errorMessage;\n        });\n    }\n\n    getLocationList() {\n        this.locationService.getLocationList().subscribe(data => {\n            this.dataSource = data;\n            this.dataSource = new MatTableDataSource(data);\n        }, error => console.log(error));\n    }\n}\n","<div class=\"product-conatiner\">\n    <div *ngIf=\"locationUpdateData?.data.id==null\" class=\"title-header\">\n        <h4 class=\"title\">Add location</h4>\n    </div>\n    <div *ngIf=\"locationUpdateData?.data.id!=null\" class=\"title-header\">\n        <h4 class=\"title\">Update location</h4>\n    </div>\n    <hr>\n    <form [formGroup]=\"locationForm\" (submit)=\"onSubmit()\">\n        <div class=\"title-header\">\n            <mat-form-field class=\"forms-fildes\">\n                <input formControlName=\"cityName\" matInput placeholder=\"location Name\" required>\n                <mat-error *ngIf=\"locationForm.get('cityName').hasError('required')\">\n                    City Name required!\n                </mat-error>\n            </mat-form-field>\n        </div>\n\n        <div class=\"button-container\">\n            <button (click)=\"closeModal()\" aria-label=\"Close\" class=\"btn btn-warning\"\n                    style=\"width: 25%;margin-left: 5px;\">Cancel\n            </button>\n            <button [disabled]=\"!locationForm.valid\" class=\"btn btn-primary\"\n                    style=\"width: 25%;margin-left: 5px;\">Save\n            </button>\n        </div>\n        <div class=\"button-container\">\n            <h4 style=\"color: green;\">{{successMsg}}</h4>\n            <h4 style=\"color: red;\">{{errorMsg}}</h4>\n        </div>\n    </form>\n\n</div>\n","import { SalesOrderService } from '../../_services/sales-order.service';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Product } from 'src/app/_model/product';\nimport { ProductService } from 'src/app/_services/product.service';\nimport { Observable } from 'rxjs';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { map, startWith } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-stock-book',\n  templateUrl: './stock-book.component.html',\n  styleUrls: ['./stock-book.component.css']\n})\nexport class StockBookComponent implements OnInit {\n  displayedColumns: string[] = ['date', 'productName', 'soldStock', 'profit'];\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  dataSource: any;\n  dataSourceProduct: any;\n  listOfCategories = [];\n  products: Product[];\n  filteredProducts: Observable<Product[]>;\n  productForm: FormGroup;\n\n  constructor(private salesOrderService: SalesOrderService, private productService: ProductService) {\n    this.productForm = new FormGroup({\n      productName: new FormControl(null),\n    })\n  }\n\n  ngOnInit(): void {\n    this.getSalesOrderList('');\n    //alert('Please select dropdown')\n\n    this.productService.getProductsList().subscribe(data => {\n      this.products = data;\n      this._valueChangesListner();\n    });\n  }\n\n  private _valueChangesListner() {\n    this.filteredProducts = this.productForm.controls['productName'].valueChanges.pipe(\n      startWith(''),\n      map(value => this._filterProduct(value))\n    );\n  }\n\n  private _filterProduct(value: string): Product[] {\n    if (!value) {\n      return this.products;\n    }\n    const filterValue = value.toLowerCase();\n    return this.products.filter(option => option.productName.toLowerCase().indexOf(filterValue) === 0);\n  }\n\n  getSalesOrderList(productName: string) {\n    this.salesOrderService.getStockBook(productName).subscribe(res => {\n      this._setData(res);\n    }, error => console.log(error));\n  }\n\n  selectedProduct(selectedProduct: string) {\n    //this.productForm.controls['productName'].setValue(null);\n    this._findProduct(selectedProduct);\n    this.getSalesOrderList(selectedProduct)\n  }\n\n  private _findProduct(value: string): Product {\n    return this.products.find(option => option.productName === value);\n  }\n\n  private _setData(data) {\n    this.dataSource = new MatTableDataSource(data);\n    this.dataSource.paginator = this.paginator;\n  }\n}\n","<form [formGroup]=\"productForm\">\n  <div class=\"d-flex\">\n    <div class=\"form-group col-5\">\n      <mat-form-field class=\"example-full-width\">\n        <mat-label>Product</mat-label>\n        <input type=\"text\" aria-label=\"Product\" matInput formControlName=\"productName\" [matAutocomplete]=\"productAuto\">\n        <mat-autocomplete #productAuto=\"matAutocomplete\" autoActiveFirstOption\n          (optionSelected)=\"selectedProduct($event.option.value)\">\n          <mat-option *ngFor=\"let product of filteredProducts | async\" [value]=\"product.productName\">\n            {{product.productName}}\n          </mat-option>\n        </mat-autocomplete>\n      </mat-form-field>\n    </div>\n    <div class=\"mat-elevation-z8\">\n      <table [dataSource]=\"dataSource\" mat-table>\n\n        <ng-container matColumnDef=\"date\">\n          <th *matHeaderCellDef mat-header-cell class=\"text-right pr-4\">Recent Dates</th>\n          <td *matCellDef=\"let element\" mat-cell class=\"text-right pr-4\"> {{element.date | date: 'dd/MM/yyyy'}}\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"productName\">\n          <th *matHeaderCellDef mat-header-cell>Product Name</th>\n          <td *matCellDef=\"let element\" mat-cell>\n            {{element.productName}} </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"soldStock\">\n          <th *matHeaderCellDef mat-header-cell class=\"text-right pr-4\">Sold Stock</th>\n          <td *matCellDef=\"let element\" mat-cell class=\"text-right pr-4\">\n            {{element.soldStock.toLocaleString('en-IN') || 0}} </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"profit\">\n          <th *matHeaderCellDef mat-header-cell class=\"text-right pr-4\">Profit</th>\n          <td *matCellDef=\"let element\" mat-cell class=\"text-right pr-4\">\n            {{element.profit.toLocaleString('en-IN') || 0}} </td>\n        </ng-container>\n\n        <tr *matHeaderRowDef=\"displayedColumns;  sticky: true\" mat-header-row></tr>\n        <tr *matRowDef=\"let row; columns: displayedColumns;\" mat-row></tr>\n\n      </table>\n      <mat-paginator [pageSizeOptions]=\"[15, 30, 50]\" [pageSize]=\"30\" showFirstLastButtons></mat-paginator>\n    </div>\n  </div>\n</form>","import {Component, OnInit} from '@angular/core';\nimport {Router} from '@angular/router';\n\n@Component({\n    selector: 'app-dashboard-categories',\n    templateUrl: './dashboard-categories.component.html',\n    styleUrls: ['./dashboard-categories.component.css']\n})\nexport class DashboardCategoriesComponent implements OnInit {\n    isVisible = false;\n    urlPath = [];\n\n    constructor(\n        private router: Router\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.getCurrentPage();\n    }\n\n    getCurrentPage() {\n        const path = this.router.url.split('/');\n        if (path.length === 2 && path[1] === 'dashboard') {\n            this.isVisible = true;\n        }\n        path.forEach((e) => {\n            if (e !== '') {\n                this.urlPath.push(e);\n            }\n        });\n    }\n}\n","<div class=\"app-container\">\n\n\n    <div class=\"main-container flex-fill\">\n\n\n        <div class=\"container-fluid mt-2\">\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n\n                    <div class=\"row\">\n\n                        <div class=\"col-md-3\">\n                            <div class=\"card-counter primary\">\n                                <i class=\"fa fa-code-fork\"></i>\n                                <span class=\"count-numbers\">12</span>\n                                <span class=\"count-name\">Flowz</span>\n                            </div>\n                        </div>\n\n                        <div class=\"col-md-3\">\n                            <div class=\"card-counter danger\">\n                                <i class=\"fa fa-ticket\"></i>\n                                <span class=\"count-numbers\">599</span>\n                                <span class=\"count-name\">Instances</span>\n                            </div>\n                        </div>\n\n                        <div class=\"col-md-3\">\n                            <div class=\"card-counter success\">\n                                <i class=\"fa fa-database\"></i>\n                                <span class=\"count-numbers\">6875</span>\n                                <span class=\"count-name\">Data</span>\n                            </div>\n                        </div>\n\n                        <div class=\"col-md-3\">\n                            <div class=\"card-counter info\">\n                                <i class=\"fa fa-users\"></i>\n                                <span class=\"count-numbers\">35</span>\n                                <span class=\"count-name\">Users</span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {HttpClientHelper} from '../_model/http-client-helper';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CompanyService {\n\n    private baseUrl = HttpClientHelper.baseURL + '/company';\n\n    constructor(private http: HttpClient) {\n    }\n\n    getCompany(id: number): Observable<any> {\n        return this.http.get(`${this.baseUrl}/${id}`);\n    }\n\n    // tslint:disable-next-line: ban-types\n    createCompany(company: Object): Observable<Object> {\n        return this.http.post(`${this.baseUrl}`, company);\n    }\n\n    // tslint:disable-next-line: ban-types\n    updateCompany(value: any): Observable<Object> {\n        return this.http.put(`${this.baseUrl}`, value);\n    }\n\n    deleteCompany(id: number): Observable<any> {\n        return this.http.delete(`${this.baseUrl}/${id}`, {responseType: 'text'});\n    }\n\n    getCompanyList(): Observable<any> {\n        return this.http.get(`${this.baseUrl}`);\n    }\n}\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {Observable} from 'rxjs';\nimport {Company} from 'src/app/_model/company';\nimport {CompanyService} from 'src/app/_services/company.service';\n\n@Component({\n    selector: 'app-create-company',\n    templateUrl: './create-company.component.html',\n    styleUrls: ['./create-company.component.css']\n})\nexport class CreateCompanyComponent implements OnInit {\n    companyForm: FormGroup;\n    companies: Observable<Company[]>;\n    company: Company = new Company();\n    companyUpdateData: any;\n    successMsg: any;\n    errorMsg: any;\n\n    constructor(private companyService: CompanyService,\n                public dialogRef: MatDialogRef<CreateCompanyComponent>,\n                @Inject(MAT_DIALOG_DATA) private data) {\n        this.companyUpdateData = data;\n\n        this.companyForm = new FormGroup({\n            companyName: new FormControl(null, [Validators.required]),\n            phoneNumber: new FormControl(null),\n        });\n        if (data != null) {\n            this.companyForm.controls['companyName'].setValue(this.companyUpdateData.data.companyName);\n            this.companyForm.controls['phoneNumber'].setValue(this.companyUpdateData.data.phoneNumber);\n        }\n    }\n\n    closeModal(): void {\n        this.dialogRef.close();\n    }\n\n    ngOnInit(): void {\n    }\n\n    onSubmit() {\n        if (this.companyUpdateData?.data.id != null) {\n            this.updateCompany();\n        } else {\n            this.saveCompany();\n        }\n    }\n\n    saveCompany() {\n        let data = {\n            id: this.companyUpdateData?.data.id,\n            companyName: this.companyForm.controls.companyName.value,\n            phoneNumber: this.companyForm.controls.phoneNumber.value\n        };\n        this.companyService.createCompany(data).subscribe(res => {\n            if (res != null) {\n                this.successMsg = 'Company Successfully Created..!';\n                this.closeModal();\n            }\n        }, error => {\n            this.errorMsg = error.error.errorMessage;\n        });\n    }\n\n    updateCompany() {\n        let data = {\n            id: this.companyUpdateData?.data.id,\n            companyName: this.companyForm.controls.companyName.value,\n            phoneNumber: this.companyForm.controls.phoneNumber.value\n        };\n        this.companyService.updateCompany(data).subscribe(res => {\n            if (res != null) {\n                this.successMsg = 'Company Successfully Updated..!';\n            }\n        }, error => {\n            this.errorMsg = error.error.errorMessage;\n        });\n    }\n\n    getCompanyList() {\n        this.companyService.getCompanyList().subscribe(data => {\n        }, error => console.log(error));\n    }\n}\n","<div class=\"product-conatiner\">\n    <div *ngIf=\"companyUpdateData?.data.id==null\" class=\"title-header\">\n        <h4 class=\"title\">Add Company</h4>\n    </div>\n    <div *ngIf=\"companyUpdateData?.data.id!=null\" class=\"title-header\">\n        <h4 class=\"title\">Update Company</h4>\n    </div>\n    <hr>\n    <form [formGroup]=\"companyForm\" (submit)=\"onSubmit()\">\n        <div class=\"title-header\">\n            <mat-form-field class=\"forms-fildes\">\n                <input formControlName=\"companyName\" matInput placeholder=\"Company Name\" required>\n                <mat-error *ngIf=\"companyForm.get('companyName').hasError('required')\">\n                    First Name required!\n                </mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"title-header\">\n            <mat-form-field class=\"forms-fildes\">\n                <input formControlName=\"phoneNumber\" matInput placeholder=\"Phone Number\">\n            </mat-form-field>\n        </div>\n        <div class=\"button-container\">\n            <button (click)=\"closeModal()\" aria-label=\"Close\" class=\"btn btn-warning\"\n                    style=\"width: 25%;margin-left: 5px;\">Cancel\n            </button>\n            <button [disabled]=\"!companyForm.valid\" class=\"btn btn-primary\"\n                    style=\"width: 25%;margin-left: 5px;\">Save\n            </button>\n        </div>\n        <div class=\"button-container\">\n            <h4 style=\"color: green;\">{{successMsg}}</h4>\n            <h4 style=\"color: red;\">{{errorMsg}}</h4>\n        </div>\n    </form>\n\n</div>\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\n@Component({\n  selector: 'app-action-bar',\n  templateUrl: './action-bar.component.html',\n  styleUrls: ['./action-bar.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ActionBarComponent {\n  private _transformer = (node: MasterNode, level: number) => {\n    return {\n      expandable: !!node.children && node.children.length > 0,\n      name: node.name,\n      level: level,\n    };\n  }\n\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\n    node => node.level, node => node.expandable);\n\n  treeFlattener = new MatTreeFlattener(\n    this._transformer, node => node.level, node => node.expandable, node => node.children);\n\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n  dataSource_Order = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n  dataSourceReports = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n  dataSourceBalance = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n  dataSourceSummary = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n  constructor(private router: Router) {\n    this.dataSource.data = TREE_DATA;\n    this.dataSource_Order.data = Order_DATA;\n    this.dataSourceReports.data = REPORTS;\n    this.dataSourceBalance.data = BALANCESHEET;\n    this.dataSourceSummary.data = SUMMARY;\n\n    console.log('dataSourceReports', this.dataSourceReports);\n  }\n\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\n\n  expanded = true;\n\n  goTohome() {\n    this.router.navigate(['dashboard']);\n  }\n  getComponent(item) {\n    if (item == \"Product\") {\n      this.router.navigate(['dashboard/products']);\n    }\n    if (item == \"Category\") {\n      this.router.navigate(['dashboard/categories-list']);\n    }\n    if (item == \"Supplier\") {\n      this.router.navigate(['dashboard/suppliers-list']);\n    }\n    if (item == \"Customer\") {\n      this.router.navigate(['dashboard/customers-list']);\n    }\n    if (item == \"Company\") {\n      this.router.navigate(['dashboard/companies-list']);\n    }\n    if (item == \"Location\") {\n      this.router.navigate(['dashboard/locations-list']);\n    }\n  }\n\n  getOrder(item) {\n    if (item == \"Buy\") {\n      this.router.navigate(['dashboard/purchaseOrder']);\n    }\n    if (item == \"Sell\") {\n      this.router.navigate(['dashboard/salesOrder']);\n    }\n  }\n\n  getReports(item) {\n    if (item === \"Sales Report\") {\n      this._redirectToPage('dashboard/sales-report');\n    }\n    if (item === \"Purchase Report\") {\n      this._redirectToPage('dashboard/purchase-report');\n    }\n  }\n\n  getBalanceSheet(item) {\n    if (item === \"Customer Balance\") {\n      console.log('1')\n      this._redirectToPage('dashboard/balance-sheet');\n    }\n    if (item === \"Supplier Balance\") {\n      console.log('2')\n      this._redirectToPage('dashboard/supplier-balance-sheet');\n    }\n  }\n\n  getSummary(item) {\n    if (item === \"Profit Summary\") {\n      this._redirectToPage('dashboard/profit-summary');\n    }\n    if (item === \"Stock Book\") {\n      this._redirectToPage('dashboard/stock-book');\n    }\n  }\n\n  private _redirectToPage(route) {\n    this.router.navigate([route]);\n  }\n}\n\ninterface MasterNode {\n  name: string;\n  children?: MasterNode[];\n}\n\nconst Order_DATA: MasterNode[] = [\n  {\n    name: 'ORDER',\n    children: [\n      {\n        name: 'Buy',\n      },\n      {\n        name: 'Sell',\n      }\n    ]\n  },\n];\n\nconst REPORTS: MasterNode[] = [\n  {\n    name: 'TRANSACTION',\n    children: [\n      {\n        name: 'Sales Report',\n      },\n      {\n        name: 'Purchase Report',\n      }\n    ]\n  },\n];\n\nconst BALANCESHEET: MasterNode[] = [\n  {\n    name: 'BALANCE SHEET',\n    children: [\n      {\n        name: 'Customer Balance',\n      },\n      {\n        name: 'Supplier Balance',\n      }\n    ]\n  },\n];\n\nconst SUMMARY: MasterNode[] = [\n  {\n    name: 'SUMMARY',\n    children: [\n      {\n        name: 'Profit Summary',\n      },\n      {\n        name: 'Stock Book',\n      }\n    ]\n  },\n];\n\nconst TREE_DATA: MasterNode[] = [\n  {\n    name: 'MASTER',\n    children: [\n      {\n        name: 'Product',\n      }, {\n        name: 'Category',\n      }, {\n        name: 'Location',\n      }, {\n        name: 'Company',\n      }, {\n        name: 'Supplier',\n      }, {\n        name: 'Customer',\n      }\n    ]\n  },\n];\ninterface ExampleFlatNode {\n  expandable: boolean;\n  name: string;\n  level: number;\n}\n","<div class=\"action-bar\" [class.action-bar-expanded]=\"expanded\">\n\n  <!-- Menu Button -->\n  <!-- <button class=\"action-bar-item shadow-sm\" (click)=\"expanded = !expanded\">\n\t\t<span class=\"action-bar-item-icon jam jam-bar-chart transform-rotate-90\"></span>\n    <span class=\"action-bar-item-text\">Menu</span>\n\t</button> -->\n\n  <app-action-bar-item [shadow]=\"true\" (click)=\"expanded = !expanded\">\n    <span class=\"action-bar-item-icon jam jam-bar-chart transform-rotate-90\"></span>\n    <span class=\"action-bar-item-text\">Menu</span>\n  </app-action-bar-item>\n\n  <!-- A vertical navbar -->\n  <nav class=\"navbar navbar-light\">\n\n    <!-- Links -->\n    <ul class=\"navbar-nav nav\">\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" routerLink=\"/dashboard/home\" routerLinkActive=\"active\" style=\"cursor: pointer;\"> <i\n            class=\"fa fa-home \"></i> <span *ngIf=\"expanded\" class=\"d-none d-sm-inline\">DASHBOARDS</span> </a>\n      </li>\n\n      <!-- <li class=\"nav-item\" routerLinkActive=\"active\" (mouseover)=\"dispatchPlanmenuTrigger.openMenu()\">\n        <a class=\"nav-link\" routerLink=\"/dashboard/add\" #dispatchPlanmenuTrigger=\"matMenuTrigger\"\n          [matMenuTriggerFor]=\"dispatchPlan1\">\n          <i class=\"fa fa-plus \"></i> <span *ngIf=\"expanded\" class=\"d-none d-sm-inline\">MASTER</span>\n        </a>\n        <mat-menu #dispatchPlan1=\"matMenu\" style=\"background-color: #5999d2;\">\n          <span (mouseleave)=\"dispatchPlanmenuTrigger.closeMenu()\">\n            <a class=\"nav-link\" routerLink=\"/dashboard/products\">\n              <span *ngIf=\"expanded\" class=\"d-none d-sm-inline\"> Product </span>\n            </a>\n            <a class=\"nav-link\" routerLink=\"/dashboard/categories-list\"> <span *ngIf=\"expanded\"\n                class=\"d-none d-sm-inline\">Category\n              </span></a>\n            <a class=\"nav-link\" routerLink=\"/dashboard/suppliers-list\"> <span *ngIf=\"expanded\"\n                class=\"d-none d-sm-inline\">Supplier\n              </span></a>\n            <a class=\"nav-link\" routerLink=\"/dashboard/customers-list\"> <span *ngIf=\"expanded\"\n                class=\"d-none d-sm-inline\">Customer\n              </span></a>\n            <a class=\"nav-link\" routerLink=\"/dashboard/companies-list\"> <span *ngIf=\"expanded\"\n                class=\"d-none d-sm-inline\">Company\n              </span></a>\n            <a class=\"nav-link\" routerLink=\"/dashboard/locations-list\"> <span *ngIf=\"expanded\"\n                class=\"d-none d-sm-inline\">Location\n              </span></a>\n          </span>\n        </mat-menu>\n      </li>  -->\n\n      <mat-tree [dataSource]=\"dataSource_Order\" [treeControl]=\"treeControl\">\n        <!-- This is the tree node template for leaf nodes -->\n        <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\n          <!-- use a disabled button to provide padding for tree leaf -->\n          <button mat-icon-button (click)=\"getOrder(node.name)\"> {{node.name}}</button>\n        </mat-tree-node>\n        <!-- This is the tree node template for expandable nodes -->\n        <mat-tree-node *matTreeNodeDef=\"let node;when: hasChild\" matTreeNodePadding>\n          <button mat-icon-button matTreeNodeToggle [attr.aria-label]=\"'Toggle ' + node.name\">\n            <mat-icon class=\"mat-icon-rtl-mirror\">\n              {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n            </mat-icon>\n          </button>\n          {{node.name}}\n        </mat-tree-node>\n      </mat-tree>\n\n      <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n        <!-- This is the tree node template for leaf nodes -->\n        <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\n          <!-- use a disabled button to provide padding for tree leaf -->\n          <button mat-icon-button (click)=\"getComponent(node.name)\"> {{node.name}}</button>\n        </mat-tree-node>\n        <!-- This is the tree node template for expandable nodes -->\n        <mat-tree-node *matTreeNodeDef=\"let node;when: hasChild\" matTreeNodePadding>\n          <button mat-icon-button matTreeNodeToggle [attr.aria-label]=\"'Toggle ' + node.name\">\n            <mat-icon class=\"mat-icon-rtl-mirror\">\n              {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n            </mat-icon>\n          </button>\n          {{node.name}}\n        </mat-tree-node>\n      </mat-tree>\n      <!-- \n      <li class=\"nav-item\">\n        <a class=\"nav-link\" routerLink=\"/dashboard/salesOrder\"  routerLinkActive=\"active\"><i class=\"fa fa-suitcase \"></i> <span *ngIf=\"expanded\"\n            class=\"d-none d-sm-inline\">SALES</span></a>\n      </li> -->\n\n      <!-- <li class=\"nav-item\" routerLinkActive=\"active\" (mouseover)=\"dispatchPlanmenu1Trigger.openMenu()\">\n        <a class=\"nav-link\" routerLink=\"/dashboard/add\" #dispatchPlanmenu1Trigger=\"matMenuTrigger\"\n          [matMenuTriggerFor]=\"dispatchPlan\">\n          <i class=\"fa fa-plus \"></i> <span *ngIf=\"expanded\" class=\"d-none d-sm-inline\">MASTER</span>\n        </a>\n\n        <mat-menu #dispatchPlan=\"matMenu\" style=\"background-color: #5999d2;\">\n          <span (mouseleave)=\"dispatchPlanmenu1Trigger.closeMenu()\">\n=======\n        <mat-menu #dispatchPlan=\"matMenu\" style=\"background-color: #5999d2;\">\n          <span (mouseleave)=\"dispatchPlanmenuTrigger.closeMenu()\">\n\n            <a class=\"nav-link\" routerLink=\"/dashboard/products\">\n              <span *ngIf=\"expanded\" class=\"d-none d-sm-inline\"> Product </span>\n            </a>\n            <a class=\"nav-link\" routerLink=\"/dashboard/categories-list\"> <span *ngIf=\"expanded\"\n                class=\"d-none d-sm-inline\">Category\n              </span></a>\n            <a class=\"nav-link\" routerLink=\"/dashboard/suppliers-list\"> <span *ngIf=\"expanded\"\n                class=\"d-none d-sm-inline\">Supplier\n              </span></a>\n            <a class=\"nav-link\" routerLink=\"/dashboard/customers-list\"> <span *ngIf=\"expanded\"\n                class=\"d-none d-sm-inline\">Customer\n              </span></a>\n            <a class=\"nav-link\" routerLink=\"/dashboard/companies-list\"> <span *ngIf=\"expanded\"\n                class=\"d-none d-sm-inline\">Company\n              </span></a>\n            <a class=\"nav-link\" routerLink=\"/dashboard/locations-list\"> <span *ngIf=\"expanded\"\n                class=\"d-none d-sm-inline\">Location\n              </span></a>\n          </span>\n        </mat-menu>\n      </li>  -->\n\n      <mat-tree *ngIf=\"true\" [dataSource]=\"dataSourceReports\" [treeControl]=\"treeControl\" style=\"margin-right: 10px;\">\n        <!-- This is the tree node template for leaf nodes -->\n        <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\n          <!-- use a disabled button to provide padding for tree leaf -->\n          <button mat-icon-button (click)=\"getReports(node.name)\"> {{node.name}}</button>\n\n        </mat-tree-node>\n        <!-- This is the tree node template for expandable nodes -->\n        <mat-tree-node *matTreeNodeDef=\"let node;when: hasChild\" matTreeNodePadding>\n          <button mat-icon-button matTreeNodeToggle [attr.aria-label]=\"'Toggle ' + node.name\">\n            <mat-icon class=\"mat-icon-rtl-mirror\">\n              {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n            </mat-icon>\n          </button>\n          {{node.name}}\n        </mat-tree-node>\n      </mat-tree>\n\n      <li class=\"nav-item\" *ngIf=\"false\">\n        <a class=\"nav-link\" routerLink=\"/dashboard/balance-sheet\">\n          <i class=\"fa fa-inr \"></i> <span *ngIf=\"expanded\" class=\"d-none d-sm-inline\">BALANCE SHEET</span></a>\n      </li>\n\n      <mat-tree *ngIf=\"true\" [dataSource]=\"dataSourceBalance\" [treeControl]=\"treeControl\" style=\"margin-right: 10px;\">\n        <!-- This is the tree node template for leaf nodes -->\n        <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\n          <!-- use a disabled button to provide padding for tree leaf -->\n          <button mat-icon-button (click)=\"getBalanceSheet(node.name)\"> {{node.name}}</button>\n\n        </mat-tree-node>\n        <!-- This is the tree node template for expandable nodes -->\n        <mat-tree-node *matTreeNodeDef=\"let node;when: hasChild\" matTreeNodePadding>\n          <button mat-icon-button matTreeNodeToggle [attr.aria-label]=\"'Toggle ' + node.name\">\n            <mat-icon class=\"mat-icon-rtl-mirror\">\n              {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n            </mat-icon>\n          </button>\n          {{node.name}}\n        </mat-tree-node>\n      </mat-tree>\n\n      <mat-tree *ngIf=\"true\" [dataSource]=\"dataSourceSummary\" [treeControl]=\"treeControl\" style=\"margin-right: 10px;\">\n        <!-- This is the tree node template for leaf nodes -->\n        <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\n          <!-- use a disabled button to provide padding for tree leaf -->\n          <button mat-icon-button (click)=\"getSummary(node.name)\"> {{node.name}}</button>\n\n        </mat-tree-node>\n        <!-- This is the tree node template for expandable nodes -->\n        <mat-tree-node *matTreeNodeDef=\"let node;when: hasChild\" matTreeNodePadding>\n          <button mat-icon-button matTreeNodeToggle [attr.aria-label]=\"'Toggle ' + node.name\">\n            <mat-icon class=\"mat-icon-rtl-mirror\">\n              {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n            </mat-icon>\n          </button>\n          {{node.name}}\n        </mat-tree-node>\n      </mat-tree>\n\n      <li class=\"nav-item\" *ngIf=\"false\">\n        <a class=\"nav-link\" routerLink=\"/dashboard/user\"><i class=\"fa fa-users \"></i> <span *ngIf=\"expanded\"\n            class=\"d-none d-sm-inline\">USERS</span></a>\n      </li>\n\n    </ul>\n\n  </nav>\n</div>","const a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'eleven ', 'twelve ', 'thirteen ', 'fourteen ', 'fifteen ', 'sixteen ', 'seventeen ', 'eighteen ', 'nineteen '];\nconst b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];\n\nexport function numberInWords(num) {\n    if ((num = num.toString()).length > 9) return 'overflow';\n    const n = ('000000000' + num).substr(-9).match(/^(\\d{2})(\\d{2})(\\d{2})(\\d{1})(\\d{2})$/);\n    if (!n)\n        return '';\n    var str = '';\n    str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';\n    str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';\n    str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';\n    str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';\n    str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'Only ' : '';\n    return str;\n}\n","import {Component, OnInit, ViewChild} from '@angular/core';\nimport {MatDialog} from '@angular/material/dialog';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatTableDataSource} from '@angular/material/table';\nimport {CompanyService} from 'src/app/_services/company.service';\nimport {CustomerService} from 'src/app/_services/customer.service';\nimport {CreateCustomerComponent} from '../create-customer/create-customer.component';\n\n@Component({\n    selector: 'app-customers-list',\n    templateUrl: './customers-list.component.html',\n    styleUrls: ['./customers-list.component.css']\n})\nexport class CustomersListComponent implements OnInit {\n    @ViewChild(MatPaginator) paginator: MatPaginator;\n    displayedColumns: string[] = ['customerName', 'phoneNumber', 'location', 'GSTIN', 'id'];\n    dataSource;\n\n    constructor(public dialog: MatDialog, private customerService: CustomerService, private companyService: CompanyService) {\n    }\n\n    ngOnInit(): void {\n        this.getCustomerList();\n    }\n\n    applyFilter(event: Event) {\n        const filterValue = (event.target as HTMLInputElement).value;\n        this.dataSource.filter = filterValue.trim().toLowerCase();\n    }\n\n    openDialog(): void {\n        const dialogRef = this.dialog.open(CreateCustomerComponent, {\n            width: '550px',\n            disableClose: true\n        });\n\n        dialogRef.afterClosed().subscribe(result => {\n            console.log('The dialog was closed');\n            this.getCustomerList();\n        });\n    }\n\n    updateCustomer(updateCustomer): void {\n        const dialogRef = this.dialog.open(CreateCustomerComponent, {\n            width: '550px',\n            disableClose: true,\n            data: {data: updateCustomer}\n        });\n\n        dialogRef.afterClosed().subscribe(result => {\n            console.log('The dialog was closed');\n            this.getCustomerList();\n        });\n    }\n\n    getCustomerList() {\n        this.customerService.getCustomerList().subscribe(data => {\n            this.dataSource = data;\n            this.dataSource = new MatTableDataSource(data);\n            this.dataSource.paginator = this.paginator;\n        }, error => console.log(error));\n    }\n\n    deleteCustomer(event) {\n        this.customerService.deleteCustomer(event.id).subscribe(\n            response => {\n                this.getCustomerList();\n            },\n            error => console.log(error));\n    }\n}\n\n\n","<div>\n    <mat-form-field style=\"width: 300px;\">\n        <mat-label>Search</mat-label>\n        <input #input (keyup)=\"applyFilter($event)\" matInput>\n    </mat-form-field>\n    <div class=\"pull-right\">\n        <button (click)=\"openDialog()\" class=\"btn btn-info btn-sm\" style=\"height: 35px;width: 150px;\"> Add Customer\n        </button>\n    </div>\n</div>\n\n<div class=\"mat-elevation-z8\">\n    <table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\" mat-table>\n\n        <!--- Note that these columns can be defined in any order.\n              The actual rendered columns are set as a property on the row definition\" -->\n\n        <!-- Position customer -->\n        <ng-container matColumnDef=\"customerName\">\n            <th *matHeaderCellDef mat-header-cell>Customer</th>\n            <td *matCellDef=\"let element\" mat-cell> {{element.customerName}} </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"GSTIN\">\n            <th *matHeaderCellDef mat-header-cell>GSTIN</th>\n            <td *matCellDef=\"let element\" mat-cell> {{element.gstIn}} </td>\n        </ng-container>\n\n        <!-- Name Column -->\n        <ng-container matColumnDef=\"phoneNumber\">\n            <th *matHeaderCellDef mat-header-cell> Phone Number</th>\n            <td *matCellDef=\"let element\" mat-cell> {{element.phoneNumber}} </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"location\">\n            <th *matHeaderCellDef mat-header-cell> Location</th>\n            <td *matCellDef=\"let element\" mat-cell> {{element.location?.cityName}} </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"id\">\n            <th *matHeaderCellDef mat-header-cell> Action</th>\n            <td *matCellDef=\"let element\" mat-cell>\n\n                <button class=\"kebab-menu-btn\" [matMenuTriggerFor]=\"menu\" aria-label=\"Example icon-button with a menu\"\n                        mat-icon-button>\n                    <mat-icon class=\"kebab-menu\">more_vert</mat-icon>\n                </button>\n                <mat-menu #menu=\"matMenu\" style=\"background-color: #f7f3f3;\">\n                    <div>\n                        <button (click)=\"updateCustomer(element)\" class=\"btn btn-info\"\n                                style=\"width: 80px;margin-left: 15px;\">\n                            Update\n                        </button>\n                        <br>\n                        <button (click)=\"deleteCustomer(element)\" class=\"btn btn-danger\"\n                                style=\"margin-top:5px;width: 80px;margin-left: 15px;\">Delete\n                        </button>\n                        <br>\n\n                    </div>\n                </mat-menu>\n                <!--  -->\n            </td>\n        </ng-container>\n\n        <!-- Symbol Column -->\n        <ng-container matColumnDef=\"symbol\">\n            <th *matHeaderCellDef mat-header-cell> Symbol</th>\n            <td *matCellDef=\"let element\" mat-cell> {{element.symbol}} </td>\n        </ng-container>\n\n        <tr *matHeaderRowDef=\"displayedColumns\" mat-header-row></tr>\n        <tr *matRowDef=\"let row; columns: displayedColumns;\" mat-row></tr>\n    </table>\n    <mat-paginator [pageSizeOptions]=\"[15, 30, 50]\" [pageSize]=\"15\" showFirstLastButtons></mat-paginator>\n</div>\n","import {Component, OnInit, ViewChild} from '@angular/core';\nimport {MatDialog} from '@angular/material/dialog';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatTableDataSource} from '@angular/material/table';\nimport {SupplierService} from 'src/app/_services/supplier.service';\nimport {CreateSupplierComponent} from '../create-supplier/create-supplier.component';\n\n@Component({\n    selector: 'app-supplier-list',\n    templateUrl: './supplier-list.component.html',\n    styleUrls: ['./supplier-list.component.css'],\n\n})\nexport class SupplierListComponent implements OnInit {\n    @ViewChild(MatPaginator) paginator: MatPaginator;\n    displayedColumns: string[] = ['supplierName', 'phoneNumber', 'company', 'location', 'GSTIN', 'id'];\n    dataSource;\n\n    constructor(public dialog: MatDialog, private supplierService: SupplierService) {\n    }\n\n    ngOnInit(): void {\n        this.getSupplierList();\n    }\n\n    applyFilter(event: Event) {\n        const filterValue = (event.target as HTMLInputElement).value;\n        this.dataSource.filter = filterValue.trim().toLowerCase();\n    }\n\n    openDialog(): void {\n        const dialogRef = this.dialog.open(CreateSupplierComponent, {\n            width: '550px',\n            disableClose: true\n        });\n        dialogRef.afterClosed().subscribe(result => {\n            console.log('The dialog was closed');\n            this.getSupplierList();\n        });\n    }\n\n    getSupplierList() {\n        this.supplierService.getSupplierList()\n            .subscribe(data => {\n                this.dataSource = data;\n                this.dataSource = new MatTableDataSource(data);\n                this.dataSource.paginator = this.paginator;\n            }, error => console.log(error));\n    }\n\n    deleteSupllier(event) {\n        this.supplierService.deleteSupplier(event.id).subscribe(\n            response => {\n                this.getSupplierList();\n            },\n            error => console.log(error));\n    }\n\n    updateSuppliers(updateSupplier): void {\n        const dialogRef = this.dialog.open(CreateSupplierComponent, {\n            width: '550px',\n            disableClose: true,\n            data: {data: updateSupplier}\n        });\n        dialogRef.afterClosed().subscribe(result => {\n            console.log('The dialog was closed');\n            this.getSupplierList();\n        });\n    }\n}\n","<div>\n    <mat-form-field style=\"width: 300px;\">\n        <mat-label>Search</mat-label>\n        <input #input (keyup)=\"applyFilter($event)\" matInput>\n    </mat-form-field>\n    <div class=\"pull-right\">\n        <button (click)=\"openDialog()\" class=\"btn btn-info btn-sm\" style=\"height: 35px;width: 150px;\"> Add Supplier\n        </button>\n    </div>\n</div>\n<div class=\"mat-elevation-z8\">\n    <table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\" mat-table>\n\n        <!-- Position customer -->\n        <ng-container matColumnDef=\"supplierName\">\n            <th *matHeaderCellDef mat-header-cell>Supplier</th>\n            <td *matCellDef=\"let element\" mat-cell> {{element.supplierName}} </td>\n            <td *matCellDef=\"let element\" hidden mat-cell> {{element.id}} </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"GSTIN\">\n            <th *matHeaderCellDef mat-header-cell>GSTIN</th>\n            <td *matCellDef=\"let element\" mat-cell> {{element.gstIn}} </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"company\">\n            <th *matHeaderCellDef mat-header-cell> Company</th>\n            <td *matCellDef=\"let element\" mat-cell> {{element.company?.companyName}} </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"location\">\n            <th *matHeaderCellDef mat-header-cell> Location</th>\n            <td *matCellDef=\"let element\" mat-cell> {{element.location?.cityName}} </td>\n        </ng-container>\n\n        <!-- Name Column -->\n        <ng-container matColumnDef=\"phoneNumber\">\n            <th *matHeaderCellDef mat-header-cell> Phone Number</th>\n            <td *matCellDef=\"let element\" mat-cell> {{element.phoneNumber}} </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"id\">\n            <th *matHeaderCellDef mat-header-cell> Action</th>\n            <td *matCellDef=\"let element\" mat-cell>\n\n                <button class=\"kebab-menu-btn\" [matMenuTriggerFor]=\"menu\" aria-label=\"Example icon-button with a menu\" mat-icon-button>\n                    <mat-icon class=\"kebab-menu\">more_vert</mat-icon>\n                </button>\n                <mat-menu #menu=\"matMenu\" style=\"background-color: #f7f3f3;\">\n                    <div>\n                        <button (click)=\"updateSuppliers(element)\" class=\"btn btn-info\"\n                                style=\"width: 80px;margin-left: 15px;\">\n                            Update\n                        </button>\n                        <br>\n                        <button (click)=\"deleteSupllier(element)\" class=\"btn btn-danger\"\n                                style=\"margin-top:5px;width: 80px;margin-left: 15px;\">Delete\n                        </button>\n                        <br>\n\n                    </div>\n                </mat-menu>\n                <!--  -->\n\n            </td>\n        </ng-container>\n\n\n        <!-- Symbol Column -->\n        <ng-container matColumnDef=\"symbol\">\n            <th *matHeaderCellDef mat-header-cell> Symbol</th>\n            <td *matCellDef=\"let element\" mat-cell> {{element.symbol}} </td>\n        </ng-container>\n\n        <tr *matHeaderRowDef=\"displayedColumns\" mat-header-row></tr>\n        <tr *matRowDef=\"let row; columns: displayedColumns;\" mat-row></tr>\n    </table>\n    <mat-paginator [pageSizeOptions]=\"[15, 30, 50]\" [pageSize]=\"15\" showFirstLastButtons></mat-paginator>\n</div>\n","import { PurchaseOrderService } from './../../_services/purchase-order.service';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { FormControl, FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-purchase-report',\n  templateUrl: './purchase-report.component.html',\n  styleUrls: ['./purchase-report.component.css']\n})\nexport class PurchaseReportComponent implements OnInit {\n  displayedColumns: string[] = ['billDate', 'dueDate', 'supplierName', 'status', 'totalPrice', 'amountPaid', 'dueAmount'];\n  productColumns: string[] = ['id', 'productName', 'purchasePrice', 'qtyOrdered'];\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  dataSource: any;\n\n  searchText: string;\n\n  range = new FormGroup({\n    start: new FormControl(),\n    end: new FormControl()\n  });\n\n  purchaseReports;\n\n  constructor(private purchaseOrderService: PurchaseOrderService) { }\n\n  ngOnInit(): void {\n    this.getPurchaseOrderList();\n    this.range.valueChanges.subscribe(dateRange => {\n      if (this.range.valid) {\n        this.searchData();\n      }\n    })\n  }\n\n  getPurchaseOrderList() {\n    this.purchaseOrderService.getPurchaseOrderList().subscribe(res => {\n      this.purchaseReports = res;\n      this._setData(res);\n    }, error => console.log(error));\n  }\n\n  clearSupplierSearch() {\n    this.searchText = '';\n    this._setData(this.purchaseReports);\n  }\n\n  clearDate() {\n    this.range.reset();\n  }\n\n  searchData() {\n    const searchText = this.searchText;\n    const { start, end } = this.range.value || {};\n    let filteredData = this.purchaseReports;\n\n    if (start && end) {\n      const startTime = start.getTime();\n      const endTime = end.getTime() + 86399999;\n      // console.log('date===', startTime, endTime, new Date(startTime), new Date(endTime));\n      filteredData = filteredData.filter(purchaseReport => {\n        const dueDateTime = new Date(purchaseReport?.dueDate).getTime();\n        return dueDateTime >= startTime && dueDateTime <= endTime\n      });\n    }\n\n    if (searchText) {\n      filteredData = filteredData.filter(purchaseReport => purchaseReport?.supplier?.supplierName?.toLowerCase().indexOf(searchText?.toLowerCase()) > -1);\n    }\n    this._setData(filteredData);\n  }\n\n  private _setData(data) {\n    this.dataSource = new MatTableDataSource(data);\n    this.dataSource.paginator = this.paginator;\n  }\n}\n","<div class=\"d-flex\">\n  <div class=\"form-group col-3\">\n    <mat-form-field class=\"example-form-field\">\n      <mat-label>Search Supplier</mat-label>\n      <input matInput type=\"text\" [(ngModel)]=\"searchText\" (input)=\"searchData()\" placeholder=\"Search Supplier\">\n      <button *ngIf=\"searchText\" matSuffix mat-icon-button aria-label=\"Clear\" (click)=\"clearSupplierSearch()\">\n        <mat-icon>clear</mat-icon>\n      </button>\n    </mat-form-field>\n  </div>\n\n  <mat-form-field>\n    <mat-date-range-input [formGroup]=\"range\" [rangePicker]=\"picker\">\n      <input matStartDate formControlName=\"start\" placeholder=\"Start Due date\">\n      <input matEndDate formControlName=\"end\" placeholder=\"End Due date\">\n    </mat-date-range-input>\n    <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n    <mat-datepicker-toggle matSuffix (click)=\"clearDate()\">\n      <mat-icon matDatepickerToggleIcon>clear</mat-icon>\n    </mat-datepicker-toggle>\n    <mat-date-range-picker #picker></mat-date-range-picker>\n\n    <mat-error *ngIf=\"range.controls.start.hasError('matStartDateInvalid')\">Invalid start date</mat-error>\n    <mat-error *ngIf=\"range.controls.end.hasError('matEndDateInvalid')\">Invalid end date</mat-error>\n  </mat-form-field>\n</div>\n\n<div class=\"mat-elevation-z8\">\n  <table [dataSource]=\"dataSource\" mat-table>\n    <ng-container matColumnDef=\"supplierName\">\n      <th *matHeaderCellDef mat-header-cell>Supplier</th>\n      <td *matCellDef=\"let element\" mat-cell> {{element.supplier?.supplierName}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"billDate\">\n      <th *matHeaderCellDef mat-header-cell>Bill date</th>\n      <td *matCellDef=\"let element\" mat-cell>\n        {{element.billDate | date: 'dd/MM/yyyy hh:mm a'}}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"dueDate\">\n      <th *matHeaderCellDef mat-header-cell>Due Date</th>\n      <td *matCellDef=\"let element\" mat-cell> {{element.dueDate | date: 'dd/MM/yyyy hh:mm a'}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"dueAmount\">\n      <th *matHeaderCellDef mat-header-cell class=\"text-right pr-5\">Due amount</th>\n      <td *matCellDef=\"let element\" mat-cell class=\"text-right pr-5\">\n        {{element.currentBalance.toLocaleString('en-IN') || 0}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"amountPaid\">\n      <th *matHeaderCellDef mat-header-cell class=\"text-right\">Amount Paid</th>\n      <td *matCellDef=\"let element\" mat-cell class=\"text-right\"> {{element.amountPaid.toLocaleString('en-IN') || 0}}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"totalPrice\">\n      <th *matHeaderCellDef mat-header-cell class=\"text-right\">Total Price</th>\n      <td *matCellDef=\"let element\" mat-cell class=\"text-right\"> {{element.totalPrice.toLocaleString('en-IN') || 0}}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"status\">\n      <th *matHeaderCellDef mat-header-cell>Status</th>\n      <td *matCellDef=\"let element\" mat-cell> {{element.status}} </td>\n    </ng-container>\n\n    <tr *matHeaderRowDef=\"displayedColumns;  sticky: true\" mat-header-row></tr>\n    <tr *matRowDef=\"let row; columns: displayedColumns;\" mat-row [ngbPopover]=\"test\" [placement]=\"['bottom']\"\n      triggers=\"mouseenter:mouseleave\">\n      <ng-template #test>\n        <table [dataSource]=\"row.purchaseOrderDetail\" mat-table class=\"mat-elevation-z2\">\n          <ng-container matColumnDef=\"id\">\n            <th *matHeaderCellDef mat-header-cell>S.No</th>\n            <td *matCellDef=\"let element; let index = index\" mat-cell>\n              {{index+1}}\n            </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"productName\">\n            <th *matHeaderCellDef mat-header-cell>Product Name</th>\n            <td *matCellDef=\"let element\" mat-cell> {{element.product?.productName}} </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"purchasePrice\">\n            <th *matHeaderCellDef mat-header-cell class=\"text-right\">Purchase Price</th>\n            <td *matCellDef=\"let element\" mat-cell class=\"text-right\"> {{element.price | number : '1.0-2'}}\n            </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"qtyOrdered\">\n            <th *matHeaderCellDef mat-header-cell class=\"text-right\">Order Qty</th>\n            <td *matCellDef=\"let element\" mat-cell class=\"text-right\"> {{element.qtyOrdered}} </td>\n          </ng-container>\n\n          <tr *matHeaderRowDef=\"productColumns;  sticky: true\" mat-header-row></tr>\n          <tr *matRowDef=\"let row; columns: productColumns;\" mat-row></tr>\n        </table>\n      </ng-template>\n    </tr>\n  </table>\n  <mat-paginator [pageSizeOptions]=\"[15, 30, 50]\" [pageSize]=\"15\" showFirstLastButtons></mat-paginator>\n</div>","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {HttpClientHelper} from '../_model/http-client-helper';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ProductService {\n\n    private baseUrl = HttpClientHelper.baseURL + '/product';\n\n    constructor(private http: HttpClient) {\n    }\n\n    getProduct(id: number): Observable<any> {\n        return this.http.get(`${this.baseUrl}/${id}`);\n    }\n\n    // tslint:disable-next-line: ban-types\n    createProduct(product: Object): Observable<Object> {\n        return this.http.post(`${this.baseUrl}`, product);\n    }\n\n    // tslint:disable-next-line: ban-types\n    createProductWithCategory(product: Object, id: number): Observable<Object> {\n        return this.http.post(`${this.baseUrl}/${id}`, product);\n    }\n\n    // tslint:disable-next-line: ban-types\n    updateProduct(value: any): Observable<Object> {\n        return this.http.put(`${this.baseUrl}`, value);\n    }\n\n    deleteProduct(id: number): Observable<any> {\n        return this.http.delete(`${this.baseUrl}/${id}`, {responseType: 'text'});\n    }\n\n    getProductsList(): Observable<any> {\n        return this.http.get(this.baseUrl);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    if (localStorage.getItem('accessToken')) {\n      return true;\n    }\n    return false;\n  }\n}\n","import { PurchaseOrderService } from '../../../_services/purchase-order.service';\nimport { SalesOrderService } from '../../../_services/sales-order.service';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { UpdateBalanceSheetComponent } from '../update-customer-balance-sheet/customer-update-balance-sheet.component';\n\n@Component({\n  selector: 'app-balance-sheet',\n  templateUrl: './balance-sheet.component.html',\n  styleUrls: ['./balance-sheet.component.css']\n})\nexport class BalanceSheetComponent implements OnInit {\n  displayedColumns: string[] = ['customerName', 'status', 'totalPrice', 'amountPaid', 'dueAmount', 'billDate', 'dueDate', 'action'];\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  dataSource: any;\n\n  searchText: string;\n\n  range = new FormGroup({\n    start: new FormControl(),\n    end: new FormControl()\n  });\n\n  salesReports;\n\n  constructor(private dialog: MatDialog, private salesOrderService: SalesOrderService, private purchaseOrderService: PurchaseOrderService) { }\n\n  ngOnInit(): void {\n    this.getSalesOrderList();\n    this.range.valueChanges.subscribe(dateRange => {\n      if (this.range.valid) {\n        this.searchData();\n      }\n    })\n  }\n\n  getSalesOrderList() {\n    this.salesOrderService.getAllCustomerSalesOrderBalanceSheet().subscribe(res => {\n      this.salesReports = res;\n      this._setData(res);\n    }, error => console.log(error));\n  }\n\n  clearCustomerSearch() {\n    this.searchText = '';\n    this._setData(this.salesReports);\n  }\n\n  clearDate() {\n    this.range.reset();\n  }\n\n  searchData() {\n    const searchText = this.searchText;\n    const { start, end } = this.range.value || {};\n    let filteredData = this.salesReports;\n\n    if (start && end) {\n      const startTime = start.getTime();\n      const endTime = end.getTime();\n      // console.log('date===', startTime, endTime, new Date(startTime), new Date(endTime));\n      filteredData = filteredData.filter(salesReport => {\n        const dueDateTime = new Date(salesReport?.dueDate).getTime();\n        return dueDateTime >= startTime && dueDateTime <= endTime\n      });\n    }\n\n    if (searchText) {\n      filteredData = filteredData.filter(salesReport => salesReport?.customer?.customerName?.toLowerCase().indexOf(searchText?.toLowerCase()) > -1);\n    }\n    this._setData(filteredData);\n  }\n\n  private _setData(data) {\n    this.dataSource = new MatTableDataSource(data);\n    this.dataSource.paginator = this.paginator;\n  }\n\n  pay(index: number) {\n    alert('s')\n    //this.salesOrderDetailArr.removeAt(index);\n    //this.salesOrderDetailData = new MatTableDataSource(this.salesOrderDetailArr.controls);\n  }\n\n  updateBalance(updateBalance): void {\n    const dialogRef = this.dialog.open(UpdateBalanceSheetComponent, {\n      width: '450px',\n      disableClose: true,\n      data: { data: updateBalance }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n      this.getSalesOrderList();\n    });\n  }\n}\n","<div class=\"d-flex\">\n  <div class=\"form-group col-3\">\n    <mat-form-field class=\"example-form-field\">\n      <mat-label>Search Customer</mat-label>\n      <input matInput type=\"text\" [(ngModel)]=\"searchText\" (input)=\"searchData()\">\n      <button *ngIf=\"searchText\" matSuffix mat-icon-button aria-label=\"Clear\" (click)=\"clearCustomerSearch()\">\n        <mat-icon>clear</mat-icon>\n      </button>\n    </mat-form-field>\n  </div>\n\n  <mat-form-field>\n    <mat-date-range-input [formGroup]=\"range\" [rangePicker]=\"picker\">\n      <input matStartDate formControlName=\"start\" placeholder=\"Start date\">\n      <input matEndDate formControlName=\"end\" placeholder=\"End date\">\n    </mat-date-range-input>\n    <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n    <mat-datepicker-toggle matSuffix (click)=\"clearDate()\">\n      <mat-icon matDatepickerToggleIcon>clear</mat-icon>\n    </mat-datepicker-toggle>\n    <mat-date-range-picker #picker></mat-date-range-picker>\n\n    <mat-error *ngIf=\"range.controls.start.hasError('matStartDateInvalid')\">Invalid start date</mat-error>\n    <mat-error *ngIf=\"range.controls.end.hasError('matEndDateInvalid')\">Invalid end date</mat-error>\n  </mat-form-field>\n</div>\n\n<div class=\"mat-elevation-z8\">\n  <table [dataSource]=\"dataSource\" mat-table>\n    <ng-container matColumnDef=\"customerName\">\n      <th *matHeaderCellDef mat-header-cell>Customer</th>\n      <td *matCellDef=\"let element\" mat-cell> {{element.customer?.customerName}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"status\">\n      <th *matHeaderCellDef mat-header-cell>Status</th>\n      <td *matCellDef=\"let element\" mat-cell> {{element.currentBalance == 0 ? 'PAID': 'DUE'}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"totalPrice\">\n      <th *matHeaderCellDef mat-header-cell class=\"text-right\">Total Price</th>\n      <td *matCellDef=\"let element\" mat-cell class=\"text-right\"> {{element.totalPrice.toLocaleString('en-IN') || 0}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"amountPaid\">\n      <th *matHeaderCellDef mat-header-cell class=\"text-right\">Amount Paid</th>\n      <td *matCellDef=\"let element\" mat-cell class=\"text-right\"> {{element.amountPaid.toLocaleString('en-IN') || 0}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"dueAmount\">\n      <th *matHeaderCellDef mat-header-cell class=\"text-right pr-5\">Due amount</th>\n      <td *matCellDef=\"let element\" mat-cell class=\"text-right pr-5\"> {{element.currentBalance.toLocaleString('en-IN') || 0}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"billDate\">\n      <th *matHeaderCellDef mat-header-cell>Bill date</th>\n      <td *matCellDef=\"let element\" mat-cell>\n        {{element.billDate | date: 'dd/MM/yyyy hh:mm a'}}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"dueDate\">\n      <th *matHeaderCellDef mat-header-cell>Due Date</th>\n      <td *matCellDef=\"let element\" mat-cell> {{element.dueDate | date: 'dd/MM/yyyy hh:mm a'}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"action\">\n      <th *matHeaderCellDef mat-header-cell class=\"text-left pr-4\">Action</th>\n      <td *matCellDef=\"let element\" mat-cell>\n        <button (click)=\"updateBalance(element)\" mat-icon-button aria-label=\"Pay Balance\">\n          <mat-icon>payment</mat-icon>\n        </button>\n      </td>\n      <td mat-footer-cell *matFooterCellDef></td>\n    </ng-container>\n\n    <tr *matHeaderRowDef=\"displayedColumns;  sticky: true\" mat-header-row></tr>\n    <tr *matRowDef=\"let row; columns: displayedColumns;\" mat-row></tr>\n  </table>\n  <mat-paginator [pageSizeOptions]=\"[15, 30, 50]\" [pageSize]=\"15\" showFirstLastButtons></mat-paginator>\n</div>","import { TableComponent } from './ui_modules/table/table.component';\nimport { SalesTableComponent } from './ui_modules/table/sales-table.component';\nimport { BalanceSheetComponent } from './balance-sheet/customer-balance-sheet/list-customer-balance-sheet/balance-sheet.component';\nimport { SalesOrderComponent } from './sales-order/sales-order.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule, Router } from '@angular/router';\n\nimport { PurchaseOrderComponent } from './purchase-order/purchase-order.component';\nimport { RegisterComponent } from './register/register.component';\nimport { LoginComponent } from './login/login.component';\nimport { DashboardComponent } from './pages/dashboard/dashboard.component';\nimport { NotfoundComponent } from './pages/notfound/notfound.component';\nimport { AuthGuard } from './auth.guard';\nimport { DashboardCategoriesComponent } from './pages/dashboard-categories/dashboard-categories.component';\nimport { CustomersListComponent } from './customers/customers-list/customers-list.component';\nimport { CompanyListComponent } from './companies/company-list/company-list.component';\nimport { CategoryListComponent } from './categories/category-list/category-list.component';\nimport { SupplierListComponent } from './suppliers/supplier-list/supplier-list.component';\nimport { LocationListComponent } from './locations/location-list/location-list.component';\nimport { CreateLocationComponent } from './locations/create-location/create-location.component';\nimport { CreateCategoryComponent } from './categories/create-category/create-category.component';\nimport { CreateSupplierComponent } from './suppliers/create-supplier/create-supplier.component';\nimport { CreateCustomerComponent } from './customers/create-customer/create-customer.component';\nimport { HomeComponent } from './home/home.component';\nimport { ProductListComponent } from './products/product-list/product-list.component';\nimport { SalesReportComponent } from './reports/sales-report/sales-report.component';\nimport { PurchaseReportComponent } from './reports/purchase-report/purchase-report.component';\nimport { SupplierBalanceSheetComponent } from './balance-sheet/supplier-balance-sheet/list-supplier-balance-sheet/supplier-balance-sheet.component';\nimport { ProfitSummaryComponent } from './reports/profit-summary/profit-summary.component';\nimport { StockBookComponent } from './reports/stock-book/stock-book.component';\n\nexport const routes: Routes = [\n  { path: '', redirectTo: 'login', pathMatch: 'full' },\n  { path: 'login', component: LoginComponent, },\n  { path: 'register', component: RegisterComponent },\n  { path: '404', component: NotfoundComponent },\n\n  {\n    path: 'dashboard', pathMatch: 'prefix', canActivate: [AuthGuard],\n    component: DashboardComponent,\n    children: [\n      { path: 'dashboard2', component: DashboardCategoriesComponent, canActivate: [AuthGuard] },\n      { path: 'products', component: ProductListComponent, canActivate: [AuthGuard] },\n      { path: 'category', component: CreateCategoryComponent },\n      { path: 'purchaseOrder', component: PurchaseOrderComponent },\n      { path: 'salesOrder', component: SalesOrderComponent },\n      { path: 'location', component: CreateLocationComponent },\n      { path: 'customer', component: CreateCustomerComponent },\n      { path: 'supplier', component: CreateSupplierComponent },\n      { path: 'balance-sheet', component: BalanceSheetComponent },\n      { path: 'supplier-balance-sheet', component: SupplierBalanceSheetComponent },\n      { path: 'customers-list', component: CustomersListComponent },\n      { path: 'companies-list', component: CompanyListComponent },\n      { path: 'suppliers-list', component: SupplierListComponent },\n      { path: 'categories-list', component: CategoryListComponent },\n      { path: 'locations-list', component: LocationListComponent },\n      { path: 'home', component: HomeComponent },\n      { path: 'profit-summary', component: ProfitSummaryComponent },\n      { path: 'stock-book', component: StockBookComponent },\n      { path: 'sales-report', component: SalesReportComponent },\n      { path: 'purchase-report', component: PurchaseReportComponent },\n    ]\n  },\n  { path: 'table', component: TableComponent },\n  { path: 'salesTable', component: SalesTableComponent },\n  { path: '**', redirectTo: '404', pathMatch: 'full' },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { useHash: true })],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule { }\n","import {Component, OnInit} from '@angular/core';\nimport {AuthService} from '../_services/auth.service';\nimport {TokenStorageService} from '../_services/token-storage.service';\nimport {Router} from '@angular/router';\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n    form: any = {};\n    errorMessage = '';\n    roles: string[] = [];\n\n    constructor(private authService: AuthService, private tokenStorage: TokenStorageService, private router: Router) {\n    }\n\n    ngOnInit() {\n        if (this.tokenStorage.getToken()) {\n            this.roles = this.tokenStorage.getUser().roles;\n        }\n    }\n\n    \n    onSubmit() {\n        this.authService.login(this.form).subscribe(\n            data => {\n                this.tokenStorage.saveToken(data.accessToken);\n                localStorage.setItem('accessToken', data.accessToken);\n                this.tokenStorage.saveUser(data);\n                this.roles = this.tokenStorage.getUser().roles;\n                this.router.navigate(['dashboard/home']);\n            },\n            err => {\n                this.errorMessage = err.error.message;\n            }\n        );\n    }\n\n\n}\n","<div class=\"col-md-12\">\n    <div class=\"card card-container\">\n        <img\n                class=\"profile-img-card\"\n                id=\"profile-img\"\n                src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n        />\n        <form\n                #f=\"ngForm\"\n                (ngSubmit)=\"f.form.valid && onSubmit()\"\n                name=\"form\"\n                novalidate\n        >\n            <div class=\"form-group\">\n                <label for=\"username\">Username</label>\n                <input\n                        #username=\"ngModel\"\n                        [(ngModel)]=\"form.username\"\n                        class=\"form-control\"\n                        name=\"username\"\n                        required\n                        type=\"text\"\n                />\n                <div\n                        *ngIf=\"f.submitted && username.invalid\"\n                        class=\"alert alert-danger\"\n                        role=\"alert\"\n                >\n                    Username is required!\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"password\">Password</label>\n                <input\n                        #password=\"ngModel\"\n                        [(ngModel)]=\"form.password\"\n                        class=\"form-control\"\n                        minlength=\"6\"\n                        name=\"password\"\n                        required\n                        type=\"password\"\n                />\n                <div\n                        *ngIf=\"f.submitted && password.invalid\"\n                        class=\"alert alert-danger\"\n                        role=\"alert\"\n                >\n                    <div *ngIf=\"password.errors.required\">Password is required</div>\n                    <div *ngIf=\"password.errors.minlength\">\n                        Password must be at least 6 characters\n                    </div>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <button class=\"btn btn-primary btn-block\">\n                    Login\n                </button>\n            </div>\n\n        </form>\n\n    </div>\n</div>\n","import {NgModule} from '@angular/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {ClipboardModule} from '@angular/cdk/clipboard';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatBadgeModule} from '@angular/material/badge';\nimport {MatBottomSheetModule} from '@angular/material/bottom-sheet';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatListModule} from '@angular/material/list';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatSliderModule} from '@angular/material/slider';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatSortModule} from '@angular/material/sort';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatTreeModule} from '@angular/material/tree';\nimport {OverlayModule} from '@angular/cdk/overlay';\n\n@NgModule({\n  exports: [\n    A11yModule,\n    ClipboardModule,\n    CdkStepperModule,\n    CdkTableModule,\n    CdkTreeModule,\n    DragDropModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    OverlayModule,\n    PortalModule,\n    ScrollingModule,\n  ]\n})\nexport class DemoMaterialModule {}\n\n\n/**  Copyright 2020 Google LLC. All Rights Reserved.\n    Use of this source code is governed by an MIT-style license that\n    can be found in the LICENSE file at http://angular.io/license */","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { CustomerService } from 'src/app/_services/customer.service';\nimport { LocationService } from 'src/app/_services/location.service';\n\n@Component({\n    selector: 'app-create-customer',\n    templateUrl: './create-customer.component.html',\n    styleUrls: ['./create-customer.component.css']\n})\nexport class CreateCustomerComponent implements OnInit {\n\n    customerForm: FormGroup;\n    locationForm: FormGroup;\n    customerUpdateData: any;\n    successMsg: any;\n    errorMsg: any;\n    citiesList: any;\n\n    constructor(private customerService: CustomerService, private location: LocationService,\n        public dialogRef: MatDialogRef<CreateCustomerComponent>,\n        @Inject(MAT_DIALOG_DATA) private data) {\n        this.customerUpdateData = data;\n\n        this.customerForm = new FormGroup({\n            cityName: new FormControl(null),\n            customerName: new FormControl(null, [Validators.required]),\n            gstIn: new FormControl(null),\n            phoneNumber: new FormControl(null),\n        });\n\n        this.locationForm = new FormGroup({\n            cityName: new FormControl(null, [Validators.required]),\n        });\n\n        if (data != null) {\n            this.customerUpdateData = data?.data;\n            this.customerForm.controls['customerName'].setValue(this.customerUpdateData.customerName);\n            this.customerForm.controls['gstIn'].setValue(this.customerUpdateData.gstIn);\n            this.customerForm.controls['phoneNumber'].setValue(this.customerUpdateData.phoneNumber);\n            this.customerForm.controls['cityName'].setValue(this.customerUpdateData.location);\n        }\n    }\n\n    closeModal(): void {\n        if (this.customerForm.valid || this.customerForm.controls.customerName.value === null) {\n            this.dialogRef.close();\n        }\n    }\n\n    ngOnInit(): void {\n        this.getlocationList();\n    }\n\n    onSubmit() {\n        if (this.customerForm.valid) {\n            if (this.customerUpdateData?.id != null) {\n                this.updateCustomer();\n            } else {\n                this.saveCustomer();\n            }\n        }\n    }\n\n    saveCustomer() {\n        let data = {\n            customerName: this.customerForm.controls.customerName.value,\n            gstIn: this.customerForm.controls.gstIn.value,\n            location: this.customerForm.controls.cityName.value,\n            phoneNumber: this.customerForm.controls.phoneNumber.value,\n        };\n\n        this.customerService.createCustomer(data).subscribe(res => {\n            if (res != null) {\n                this.successMsg = 'Customer Successfully Created..!';\n                this.closeModal();\n            }\n        }, error => {\n            this.errorMsg = error.error.errorMessage;\n            alert(this.errorMsg);\n        });\n    }\n\n    updateCustomer() {\n        let data = {\n            id: this.customerUpdateData?.id,\n            customerName: this.customerForm.controls.customerName.value,\n            gstIn: this.customerForm.controls.gstIn.value,\n            location: this.customerForm.controls.cityName.value,\n            phoneNumber: this.customerForm.controls.phoneNumber.value,\n        };\n\n        this.customerService.updateCustomer(data).subscribe(res => {\n            if (res != null) {\n                this.successMsg = \"Customer Successfully Updated..!\";\n                this.closeModal();\n            }\n        }, error => {\n            this.errorMsg = error.error.errorMessage;\n        })\n    }\n\n    getCustomerList() {\n        this.customerService.getCustomerList().subscribe(data => {\n        }, error => console.log(error));\n    }\n\n    getlocationList() {\n        this.location.getLocationList().subscribe(res => {\n            this.citiesList = res;\n        });\n    }\n}\n","<div class=\"product-conatiner\">\n    <div class=\"title-header\" *ngIf=\"customerUpdateData?.id==null\">\n        <h4 class=\"title\">Add Customer</h4>\n    </div>\n    <div class=\"title-header\" *ngIf=\"customerUpdateData?.id!=null\">\n        <h4 class=\"title\">Update Product</h4>\n    </div>\n    <hr>\n    <form [formGroup]=\"customerForm\" (submit)=\"onSubmit()\">\n        <div class=\"title-header\">\n            <mat-form-field class=\"forms-fildes\">\n                <input formControlName=\"customerName\" matInput placeholder=\"Customer Name\">\n            </mat-form-field>\n        </div>\n        <div class=\"title-header\">\n            <mat-form-field class=\"forms-fildes\">\n                <input formControlName=\"gstIn\" matInput placeholder=\"GSTIN\">\n            </mat-form-field>\n        </div>\n        <div class=\"title-header\">\n            <mat-form-field class=\"forms-fildes\">\n                <mat-select formControlName=\"cityName\" placeholder=\"City\">\n                    <mat-option *ngFor=\"let location of citiesList\" [value]=\"location\">{{location.cityName}}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n        <div class=\"title-header\">\n            <mat-form-field class=\"forms-fildes\">\n                <input formControlName=\"phoneNumber\" matInput placeholder=\"Phone Number\">\n            </mat-form-field>\n        </div>\n        <div class=\"button-container\">\n            <button (click)=\"closeModal()\" aria-label=\"Close\" class=\"btn btn-warning\"\n                style=\"width: 25%;margin-left: 5px;\">Cancel\n            </button>\n            <button [disabled]=\"!customerForm.valid\" class=\"btn btn-primary\"\n                style=\"width: 25%;margin-left: 5px;\">Save\n            </button>\n        </div>\n        <div class=\"button-container\">\n            <h4 style=\"color: green;\">{{successMsg}}</h4>\n            <h4 style=\"color: red;\">{{errorMsg}}</h4>\n        </div>\n    </form>\n\n</div>","export class Location {\n    locationID: number;\n    cityName: string;\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}